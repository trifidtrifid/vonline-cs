/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserContacts implements org.apache.thrift.TBase<UserContacts, UserContacts._Fields>, java.io.Serializable, Cloneable, Comparable<UserContacts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserContacts");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ADDRESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("addressStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HOME_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("homeAddress", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserContactsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserContactsTupleSchemeFactory());
  }

  public long userId; // required
  /**
   * 
   * @see UserStatus
   */
  public UserStatus addressStatus; // required
  public PostalAddress homeAddress; // required
  public String mobilePhone; // required
  public String email; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    /**
     * 
     * @see UserStatus
     */
    ADDRESS_STATUS((short)2, "addressStatus"),
    HOME_ADDRESS((short)3, "homeAddress"),
    MOBILE_PHONE((short)4, "mobilePhone"),
    EMAIL((short)5, "email");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // ADDRESS_STATUS
          return ADDRESS_STATUS;
        case 3: // HOME_ADDRESS
          return HOME_ADDRESS;
        case 4: // MOBILE_PHONE
          return MOBILE_PHONE;
        case 5: // EMAIL
          return EMAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADDRESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("addressStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserStatus.class)));
    tmpMap.put(_Fields.HOME_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("homeAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostalAddress.class)));
    tmpMap.put(_Fields.MOBILE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("mobilePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserContacts.class, metaDataMap);
  }

  public UserContacts() {
  }

  public UserContacts(
    long userId,
    UserStatus addressStatus,
    PostalAddress homeAddress,
    String mobilePhone,
    String email)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.addressStatus = addressStatus;
    this.homeAddress = homeAddress;
    this.mobilePhone = mobilePhone;
    this.email = email;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserContacts(UserContacts other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetAddressStatus()) {
      this.addressStatus = other.addressStatus;
    }
    if (other.isSetHomeAddress()) {
      this.homeAddress = new PostalAddress(other.homeAddress);
    }
    if (other.isSetMobilePhone()) {
      this.mobilePhone = other.mobilePhone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
  }

  public UserContacts deepCopy() {
    return new UserContacts(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.addressStatus = null;
    this.homeAddress = null;
    this.mobilePhone = null;
    this.email = null;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserContacts setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  /**
   * 
   * @see UserStatus
   */
  public UserStatus getAddressStatus() {
    return this.addressStatus;
  }

  /**
   * 
   * @see UserStatus
   */
  public UserContacts setAddressStatus(UserStatus addressStatus) {
    this.addressStatus = addressStatus;
    return this;
  }

  public void unsetAddressStatus() {
    this.addressStatus = null;
  }

  /** Returns true if field addressStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressStatus() {
    return this.addressStatus != null;
  }

  public void setAddressStatusIsSet(boolean value) {
    if (!value) {
      this.addressStatus = null;
    }
  }

  public PostalAddress getHomeAddress() {
    return this.homeAddress;
  }

  public UserContacts setHomeAddress(PostalAddress homeAddress) {
    this.homeAddress = homeAddress;
    return this;
  }

  public void unsetHomeAddress() {
    this.homeAddress = null;
  }

  /** Returns true if field homeAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeAddress() {
    return this.homeAddress != null;
  }

  public void setHomeAddressIsSet(boolean value) {
    if (!value) {
      this.homeAddress = null;
    }
  }

  public String getMobilePhone() {
    return this.mobilePhone;
  }

  public UserContacts setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  public void unsetMobilePhone() {
    this.mobilePhone = null;
  }

  /** Returns true if field mobilePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhone() {
    return this.mobilePhone != null;
  }

  public void setMobilePhoneIsSet(boolean value) {
    if (!value) {
      this.mobilePhone = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserContacts setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ADDRESS_STATUS:
      if (value == null) {
        unsetAddressStatus();
      } else {
        setAddressStatus((UserStatus)value);
      }
      break;

    case HOME_ADDRESS:
      if (value == null) {
        unsetHomeAddress();
      } else {
        setHomeAddress((PostalAddress)value);
      }
      break;

    case MOBILE_PHONE:
      if (value == null) {
        unsetMobilePhone();
      } else {
        setMobilePhone((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case ADDRESS_STATUS:
      return getAddressStatus();

    case HOME_ADDRESS:
      return getHomeAddress();

    case MOBILE_PHONE:
      return getMobilePhone();

    case EMAIL:
      return getEmail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case ADDRESS_STATUS:
      return isSetAddressStatus();
    case HOME_ADDRESS:
      return isSetHomeAddress();
    case MOBILE_PHONE:
      return isSetMobilePhone();
    case EMAIL:
      return isSetEmail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserContacts)
      return this.equals((UserContacts)that);
    return false;
  }

  public boolean equals(UserContacts that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_addressStatus = true && this.isSetAddressStatus();
    boolean that_present_addressStatus = true && that.isSetAddressStatus();
    if (this_present_addressStatus || that_present_addressStatus) {
      if (!(this_present_addressStatus && that_present_addressStatus))
        return false;
      if (!this.addressStatus.equals(that.addressStatus))
        return false;
    }

    boolean this_present_homeAddress = true && this.isSetHomeAddress();
    boolean that_present_homeAddress = true && that.isSetHomeAddress();
    if (this_present_homeAddress || that_present_homeAddress) {
      if (!(this_present_homeAddress && that_present_homeAddress))
        return false;
      if (!this.homeAddress.equals(that.homeAddress))
        return false;
    }

    boolean this_present_mobilePhone = true && this.isSetMobilePhone();
    boolean that_present_mobilePhone = true && that.isSetMobilePhone();
    if (this_present_mobilePhone || that_present_mobilePhone) {
      if (!(this_present_mobilePhone && that_present_mobilePhone))
        return false;
      if (!this.mobilePhone.equals(that.mobilePhone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserContacts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressStatus()).compareTo(other.isSetAddressStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressStatus, other.addressStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeAddress()).compareTo(other.isSetHomeAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeAddress, other.homeAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhone()).compareTo(other.isSetMobilePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhone, other.mobilePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserContacts(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressStatus:");
    if (this.addressStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.addressStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeAddress:");
    if (this.homeAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.homeAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhone:");
    if (this.mobilePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (homeAddress != null) {
      homeAddress.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserContactsStandardSchemeFactory implements SchemeFactory {
    public UserContactsStandardScheme getScheme() {
      return new UserContactsStandardScheme();
    }
  }

  private static class UserContactsStandardScheme extends StandardScheme<UserContacts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserContacts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADDRESS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressStatus = UserStatus.findByValue(iprot.readI32());
              struct.setAddressStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOME_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.homeAddress = new PostalAddress();
              struct.homeAddress.read(iprot);
              struct.setHomeAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhone = iprot.readString();
              struct.setMobilePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserContacts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.addressStatus != null) {
        oprot.writeFieldBegin(ADDRESS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.addressStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.homeAddress != null) {
        oprot.writeFieldBegin(HOME_ADDRESS_FIELD_DESC);
        struct.homeAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhone != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_FIELD_DESC);
        oprot.writeString(struct.mobilePhone);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserContactsTupleSchemeFactory implements SchemeFactory {
    public UserContactsTupleScheme getScheme() {
      return new UserContactsTupleScheme();
    }
  }

  private static class UserContactsTupleScheme extends TupleScheme<UserContacts> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserContacts struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetAddressStatus()) {
        optionals.set(1);
      }
      if (struct.isSetHomeAddress()) {
        optionals.set(2);
      }
      if (struct.isSetMobilePhone()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetAddressStatus()) {
        oprot.writeI32(struct.addressStatus.getValue());
      }
      if (struct.isSetHomeAddress()) {
        struct.homeAddress.write(oprot);
      }
      if (struct.isSetMobilePhone()) {
        oprot.writeString(struct.mobilePhone);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserContacts struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.addressStatus = UserStatus.findByValue(iprot.readI32());
        struct.setAddressStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.homeAddress = new PostalAddress();
        struct.homeAddress.read(iprot);
        struct.setHomeAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobilePhone = iprot.readString();
        struct.setMobilePhoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
    }
  }

}

