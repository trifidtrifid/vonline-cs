/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.utilityservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UtilityService {

  public interface Iface {

    public long registerCounter(Counter newCounter) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void updateCounter(Counter updatedCounter) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void removeCounter(long counterId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public List<Counter> getCounters() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Map<Integer,Double> getCounterHistory(long counterId, int fromDate, int toDate) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public double setCurrentCounterValue(long counterId, double counterValue, int date) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerCounter(Counter newCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCounter(Counter updatedCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeCounter(long counterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCounters(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCounterHistory(long counterId, int fromDate, int toDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setCurrentCounterValue(long counterId, double counterValue, int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long registerCounter(Counter newCounter) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_registerCounter(newCounter);
      return recv_registerCounter();
    }

    public void send_registerCounter(Counter newCounter) throws org.apache.thrift.TException
    {
      registerCounter_args args = new registerCounter_args();
      args.setNewCounter(newCounter);
      sendBase("registerCounter", args);
    }

    public long recv_registerCounter() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      registerCounter_result result = new registerCounter_result();
      receiveBase(result, "registerCounter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerCounter failed: unknown result");
    }

    public void updateCounter(Counter updatedCounter) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_updateCounter(updatedCounter);
      recv_updateCounter();
    }

    public void send_updateCounter(Counter updatedCounter) throws org.apache.thrift.TException
    {
      updateCounter_args args = new updateCounter_args();
      args.setUpdatedCounter(updatedCounter);
      sendBase("updateCounter", args);
    }

    public void recv_updateCounter() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      updateCounter_result result = new updateCounter_result();
      receiveBase(result, "updateCounter");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void removeCounter(long counterId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_removeCounter(counterId);
      recv_removeCounter();
    }

    public void send_removeCounter(long counterId) throws org.apache.thrift.TException
    {
      removeCounter_args args = new removeCounter_args();
      args.setCounterId(counterId);
      sendBase("removeCounter", args);
    }

    public void recv_removeCounter() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      removeCounter_result result = new removeCounter_result();
      receiveBase(result, "removeCounter");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public List<Counter> getCounters() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getCounters();
      return recv_getCounters();
    }

    public void send_getCounters() throws org.apache.thrift.TException
    {
      getCounters_args args = new getCounters_args();
      sendBase("getCounters", args);
    }

    public List<Counter> recv_getCounters() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getCounters_result result = new getCounters_result();
      receiveBase(result, "getCounters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCounters failed: unknown result");
    }

    public Map<Integer,Double> getCounterHistory(long counterId, int fromDate, int toDate) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getCounterHistory(counterId, fromDate, toDate);
      return recv_getCounterHistory();
    }

    public void send_getCounterHistory(long counterId, int fromDate, int toDate) throws org.apache.thrift.TException
    {
      getCounterHistory_args args = new getCounterHistory_args();
      args.setCounterId(counterId);
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      sendBase("getCounterHistory", args);
    }

    public Map<Integer,Double> recv_getCounterHistory() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getCounterHistory_result result = new getCounterHistory_result();
      receiveBase(result, "getCounterHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCounterHistory failed: unknown result");
    }

    public double setCurrentCounterValue(long counterId, double counterValue, int date) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_setCurrentCounterValue(counterId, counterValue, date);
      return recv_setCurrentCounterValue();
    }

    public void send_setCurrentCounterValue(long counterId, double counterValue, int date) throws org.apache.thrift.TException
    {
      setCurrentCounterValue_args args = new setCurrentCounterValue_args();
      args.setCounterId(counterId);
      args.setCounterValue(counterValue);
      args.setDate(date);
      sendBase("setCurrentCounterValue", args);
    }

    public double recv_setCurrentCounterValue() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      setCurrentCounterValue_result result = new setCurrentCounterValue_result();
      receiveBase(result, "setCurrentCounterValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setCurrentCounterValue failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerCounter(Counter newCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerCounter_call method_call = new registerCounter_call(newCounter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerCounter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Counter newCounter;
      public registerCounter_call(Counter newCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newCounter = newCounter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerCounter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerCounter_args args = new registerCounter_args();
        args.setNewCounter(newCounter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerCounter();
      }
    }

    public void updateCounter(Counter updatedCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCounter_call method_call = new updateCounter_call(updatedCounter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCounter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Counter updatedCounter;
      public updateCounter_call(Counter updatedCounter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updatedCounter = updatedCounter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCounter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCounter_args args = new updateCounter_args();
        args.setUpdatedCounter(updatedCounter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateCounter();
      }
    }

    public void removeCounter(long counterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeCounter_call method_call = new removeCounter_call(counterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeCounter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long counterId;
      public removeCounter_call(long counterId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.counterId = counterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeCounter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeCounter_args args = new removeCounter_args();
        args.setCounterId(counterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeCounter();
      }
    }

    public void getCounters(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCounters_call method_call = new getCounters_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCounters_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCounters_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCounters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCounters_args args = new getCounters_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Counter> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCounters();
      }
    }

    public void getCounterHistory(long counterId, int fromDate, int toDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCounterHistory_call method_call = new getCounterHistory_call(counterId, fromDate, toDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCounterHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long counterId;
      private int fromDate;
      private int toDate;
      public getCounterHistory_call(long counterId, int fromDate, int toDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.counterId = counterId;
        this.fromDate = fromDate;
        this.toDate = toDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCounterHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCounterHistory_args args = new getCounterHistory_args();
        args.setCounterId(counterId);
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCounterHistory();
      }
    }

    public void setCurrentCounterValue(long counterId, double counterValue, int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCurrentCounterValue_call method_call = new setCurrentCounterValue_call(counterId, counterValue, date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCurrentCounterValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long counterId;
      private double counterValue;
      private int date;
      public setCurrentCounterValue_call(long counterId, double counterValue, int date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.counterId = counterId;
        this.counterValue = counterValue;
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCurrentCounterValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCurrentCounterValue_args args = new setCurrentCounterValue_args();
        args.setCounterId(counterId);
        args.setCounterValue(counterValue);
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setCurrentCounterValue();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerCounter", new registerCounter());
      processMap.put("updateCounter", new updateCounter());
      processMap.put("removeCounter", new removeCounter());
      processMap.put("getCounters", new getCounters());
      processMap.put("getCounterHistory", new getCounterHistory());
      processMap.put("setCurrentCounterValue", new setCurrentCounterValue());
      return processMap;
    }

    public static class registerCounter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerCounter_args> {
      public registerCounter() {
        super("registerCounter");
      }

      public registerCounter_args getEmptyArgsInstance() {
        return new registerCounter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerCounter_result getResult(I iface, registerCounter_args args) throws org.apache.thrift.TException {
        registerCounter_result result = new registerCounter_result();
        try {
          result.success = iface.registerCounter(args.newCounter);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class updateCounter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCounter_args> {
      public updateCounter() {
        super("updateCounter");
      }

      public updateCounter_args getEmptyArgsInstance() {
        return new updateCounter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCounter_result getResult(I iface, updateCounter_args args) throws org.apache.thrift.TException {
        updateCounter_result result = new updateCounter_result();
        try {
          iface.updateCounter(args.updatedCounter);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class removeCounter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeCounter_args> {
      public removeCounter() {
        super("removeCounter");
      }

      public removeCounter_args getEmptyArgsInstance() {
        return new removeCounter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeCounter_result getResult(I iface, removeCounter_args args) throws org.apache.thrift.TException {
        removeCounter_result result = new removeCounter_result();
        try {
          iface.removeCounter(args.counterId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getCounters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCounters_args> {
      public getCounters() {
        super("getCounters");
      }

      public getCounters_args getEmptyArgsInstance() {
        return new getCounters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCounters_result getResult(I iface, getCounters_args args) throws org.apache.thrift.TException {
        getCounters_result result = new getCounters_result();
        try {
          result.success = iface.getCounters();
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getCounterHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCounterHistory_args> {
      public getCounterHistory() {
        super("getCounterHistory");
      }

      public getCounterHistory_args getEmptyArgsInstance() {
        return new getCounterHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCounterHistory_result getResult(I iface, getCounterHistory_args args) throws org.apache.thrift.TException {
        getCounterHistory_result result = new getCounterHistory_result();
        try {
          result.success = iface.getCounterHistory(args.counterId, args.fromDate, args.toDate);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setCurrentCounterValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCurrentCounterValue_args> {
      public setCurrentCounterValue() {
        super("setCurrentCounterValue");
      }

      public setCurrentCounterValue_args getEmptyArgsInstance() {
        return new setCurrentCounterValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setCurrentCounterValue_result getResult(I iface, setCurrentCounterValue_args args) throws org.apache.thrift.TException {
        setCurrentCounterValue_result result = new setCurrentCounterValue_result();
        try {
          result.success = iface.setCurrentCounterValue(args.counterId, args.counterValue, args.date);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerCounter", new registerCounter());
      processMap.put("updateCounter", new updateCounter());
      processMap.put("removeCounter", new removeCounter());
      processMap.put("getCounters", new getCounters());
      processMap.put("getCounterHistory", new getCounterHistory());
      processMap.put("setCurrentCounterValue", new setCurrentCounterValue());
      return processMap;
    }

    public static class registerCounter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerCounter_args, Long> {
      public registerCounter() {
        super("registerCounter");
      }

      public registerCounter_args getEmptyArgsInstance() {
        return new registerCounter_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            registerCounter_result result = new registerCounter_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerCounter_result result = new registerCounter_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerCounter_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.registerCounter(args.newCounter,resultHandler);
      }
    }

    public static class updateCounter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCounter_args, Void> {
      public updateCounter() {
        super("updateCounter");
      }

      public updateCounter_args getEmptyArgsInstance() {
        return new updateCounter_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateCounter_result result = new updateCounter_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCounter_result result = new updateCounter_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCounter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateCounter(args.updatedCounter,resultHandler);
      }
    }

    public static class removeCounter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeCounter_args, Void> {
      public removeCounter() {
        super("removeCounter");
      }

      public removeCounter_args getEmptyArgsInstance() {
        return new removeCounter_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeCounter_result result = new removeCounter_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeCounter_result result = new removeCounter_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeCounter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeCounter(args.counterId,resultHandler);
      }
    }

    public static class getCounters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCounters_args, List<Counter>> {
      public getCounters() {
        super("getCounters");
      }

      public getCounters_args getEmptyArgsInstance() {
        return new getCounters_args();
      }

      public AsyncMethodCallback<List<Counter>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Counter>>() { 
          public void onComplete(List<Counter> o) {
            getCounters_result result = new getCounters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCounters_result result = new getCounters_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCounters_args args, org.apache.thrift.async.AsyncMethodCallback<List<Counter>> resultHandler) throws TException {
        iface.getCounters(resultHandler);
      }
    }

    public static class getCounterHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCounterHistory_args, Map<Integer,Double>> {
      public getCounterHistory() {
        super("getCounterHistory");
      }

      public getCounterHistory_args getEmptyArgsInstance() {
        return new getCounterHistory_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            getCounterHistory_result result = new getCounterHistory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCounterHistory_result result = new getCounterHistory_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCounterHistory_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.getCounterHistory(args.counterId, args.fromDate, args.toDate,resultHandler);
      }
    }

    public static class setCurrentCounterValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCurrentCounterValue_args, Double> {
      public setCurrentCounterValue() {
        super("setCurrentCounterValue");
      }

      public setCurrentCounterValue_args getEmptyArgsInstance() {
        return new setCurrentCounterValue_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            setCurrentCounterValue_result result = new setCurrentCounterValue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setCurrentCounterValue_result result = new setCurrentCounterValue_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setCurrentCounterValue_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.setCurrentCounterValue(args.counterId, args.counterValue, args.date,resultHandler);
      }
    }

  }

  public static class registerCounter_args implements org.apache.thrift.TBase<registerCounter_args, registerCounter_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerCounter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerCounter_args");

    private static final org.apache.thrift.protocol.TField NEW_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("newCounter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerCounter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerCounter_argsTupleSchemeFactory());
    }

    public Counter newCounter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_COUNTER((short)1, "newCounter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_COUNTER
            return NEW_COUNTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("newCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Counter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerCounter_args.class, metaDataMap);
    }

    public registerCounter_args() {
    }

    public registerCounter_args(
      Counter newCounter)
    {
      this();
      this.newCounter = newCounter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerCounter_args(registerCounter_args other) {
      if (other.isSetNewCounter()) {
        this.newCounter = new Counter(other.newCounter);
      }
    }

    public registerCounter_args deepCopy() {
      return new registerCounter_args(this);
    }

    @Override
    public void clear() {
      this.newCounter = null;
    }

    public Counter getNewCounter() {
      return this.newCounter;
    }

    public registerCounter_args setNewCounter(Counter newCounter) {
      this.newCounter = newCounter;
      return this;
    }

    public void unsetNewCounter() {
      this.newCounter = null;
    }

    /** Returns true if field newCounter is set (has been assigned a value) and false otherwise */
    public boolean isSetNewCounter() {
      return this.newCounter != null;
    }

    public void setNewCounterIsSet(boolean value) {
      if (!value) {
        this.newCounter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_COUNTER:
        if (value == null) {
          unsetNewCounter();
        } else {
          setNewCounter((Counter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_COUNTER:
        return getNewCounter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_COUNTER:
        return isSetNewCounter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerCounter_args)
        return this.equals((registerCounter_args)that);
      return false;
    }

    public boolean equals(registerCounter_args that) {
      if (that == null)
        return false;

      boolean this_present_newCounter = true && this.isSetNewCounter();
      boolean that_present_newCounter = true && that.isSetNewCounter();
      if (this_present_newCounter || that_present_newCounter) {
        if (!(this_present_newCounter && that_present_newCounter))
          return false;
        if (!this.newCounter.equals(that.newCounter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerCounter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewCounter()).compareTo(other.isSetNewCounter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewCounter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCounter, other.newCounter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerCounter_args(");
      boolean first = true;

      sb.append("newCounter:");
      if (this.newCounter == null) {
        sb.append("null");
      } else {
        sb.append(this.newCounter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newCounter != null) {
        newCounter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerCounter_argsStandardSchemeFactory implements SchemeFactory {
      public registerCounter_argsStandardScheme getScheme() {
        return new registerCounter_argsStandardScheme();
      }
    }

    private static class registerCounter_argsStandardScheme extends StandardScheme<registerCounter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerCounter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_COUNTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newCounter = new Counter();
                struct.newCounter.read(iprot);
                struct.setNewCounterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerCounter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newCounter != null) {
          oprot.writeFieldBegin(NEW_COUNTER_FIELD_DESC);
          struct.newCounter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerCounter_argsTupleSchemeFactory implements SchemeFactory {
      public registerCounter_argsTupleScheme getScheme() {
        return new registerCounter_argsTupleScheme();
      }
    }

    private static class registerCounter_argsTupleScheme extends TupleScheme<registerCounter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewCounter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewCounter()) {
          struct.newCounter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newCounter = new Counter();
          struct.newCounter.read(iprot);
          struct.setNewCounterIsSet(true);
        }
      }
    }

  }

  public static class registerCounter_result implements org.apache.thrift.TBase<registerCounter_result, registerCounter_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerCounter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerCounter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerCounter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerCounter_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerCounter_result.class, metaDataMap);
    }

    public registerCounter_result() {
    }

    public registerCounter_result(
      long success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerCounter_result(registerCounter_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public registerCounter_result deepCopy() {
      return new registerCounter_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public registerCounter_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public registerCounter_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerCounter_result)
        return this.equals((registerCounter_result)that);
      return false;
    }

    public boolean equals(registerCounter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerCounter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerCounter_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerCounter_resultStandardSchemeFactory implements SchemeFactory {
      public registerCounter_resultStandardScheme getScheme() {
        return new registerCounter_resultStandardScheme();
      }
    }

    private static class registerCounter_resultStandardScheme extends StandardScheme<registerCounter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerCounter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerCounter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerCounter_resultTupleSchemeFactory implements SchemeFactory {
      public registerCounter_resultTupleScheme getScheme() {
        return new registerCounter_resultTupleScheme();
      }
    }

    private static class registerCounter_resultTupleScheme extends TupleScheme<registerCounter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class updateCounter_args implements org.apache.thrift.TBase<updateCounter_args, updateCounter_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCounter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCounter_args");

    private static final org.apache.thrift.protocol.TField UPDATED_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedCounter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCounter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCounter_argsTupleSchemeFactory());
    }

    public Counter updatedCounter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATED_COUNTER((short)1, "updatedCounter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATED_COUNTER
            return UPDATED_COUNTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATED_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("updatedCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Counter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCounter_args.class, metaDataMap);
    }

    public updateCounter_args() {
    }

    public updateCounter_args(
      Counter updatedCounter)
    {
      this();
      this.updatedCounter = updatedCounter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCounter_args(updateCounter_args other) {
      if (other.isSetUpdatedCounter()) {
        this.updatedCounter = new Counter(other.updatedCounter);
      }
    }

    public updateCounter_args deepCopy() {
      return new updateCounter_args(this);
    }

    @Override
    public void clear() {
      this.updatedCounter = null;
    }

    public Counter getUpdatedCounter() {
      return this.updatedCounter;
    }

    public updateCounter_args setUpdatedCounter(Counter updatedCounter) {
      this.updatedCounter = updatedCounter;
      return this;
    }

    public void unsetUpdatedCounter() {
      this.updatedCounter = null;
    }

    /** Returns true if field updatedCounter is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdatedCounter() {
      return this.updatedCounter != null;
    }

    public void setUpdatedCounterIsSet(boolean value) {
      if (!value) {
        this.updatedCounter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATED_COUNTER:
        if (value == null) {
          unsetUpdatedCounter();
        } else {
          setUpdatedCounter((Counter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATED_COUNTER:
        return getUpdatedCounter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATED_COUNTER:
        return isSetUpdatedCounter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCounter_args)
        return this.equals((updateCounter_args)that);
      return false;
    }

    public boolean equals(updateCounter_args that) {
      if (that == null)
        return false;

      boolean this_present_updatedCounter = true && this.isSetUpdatedCounter();
      boolean that_present_updatedCounter = true && that.isSetUpdatedCounter();
      if (this_present_updatedCounter || that_present_updatedCounter) {
        if (!(this_present_updatedCounter && that_present_updatedCounter))
          return false;
        if (!this.updatedCounter.equals(that.updatedCounter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCounter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdatedCounter()).compareTo(other.isSetUpdatedCounter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdatedCounter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedCounter, other.updatedCounter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCounter_args(");
      boolean first = true;

      sb.append("updatedCounter:");
      if (this.updatedCounter == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedCounter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updatedCounter != null) {
        updatedCounter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCounter_argsStandardSchemeFactory implements SchemeFactory {
      public updateCounter_argsStandardScheme getScheme() {
        return new updateCounter_argsStandardScheme();
      }
    }

    private static class updateCounter_argsStandardScheme extends StandardScheme<updateCounter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCounter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATED_COUNTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updatedCounter = new Counter();
                struct.updatedCounter.read(iprot);
                struct.setUpdatedCounterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCounter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updatedCounter != null) {
          oprot.writeFieldBegin(UPDATED_COUNTER_FIELD_DESC);
          struct.updatedCounter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCounter_argsTupleSchemeFactory implements SchemeFactory {
      public updateCounter_argsTupleScheme getScheme() {
        return new updateCounter_argsTupleScheme();
      }
    }

    private static class updateCounter_argsTupleScheme extends TupleScheme<updateCounter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdatedCounter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdatedCounter()) {
          struct.updatedCounter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updatedCounter = new Counter();
          struct.updatedCounter.read(iprot);
          struct.setUpdatedCounterIsSet(true);
        }
      }
    }

  }

  public static class updateCounter_result implements org.apache.thrift.TBase<updateCounter_result, updateCounter_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCounter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCounter_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCounter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCounter_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCounter_result.class, metaDataMap);
    }

    public updateCounter_result() {
    }

    public updateCounter_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCounter_result(updateCounter_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public updateCounter_result deepCopy() {
      return new updateCounter_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public updateCounter_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCounter_result)
        return this.equals((updateCounter_result)that);
      return false;
    }

    public boolean equals(updateCounter_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCounter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCounter_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCounter_resultStandardSchemeFactory implements SchemeFactory {
      public updateCounter_resultStandardScheme getScheme() {
        return new updateCounter_resultStandardScheme();
      }
    }

    private static class updateCounter_resultStandardScheme extends StandardScheme<updateCounter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCounter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCounter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCounter_resultTupleSchemeFactory implements SchemeFactory {
      public updateCounter_resultTupleScheme getScheme() {
        return new updateCounter_resultTupleScheme();
      }
    }

    private static class updateCounter_resultTupleScheme extends TupleScheme<updateCounter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class removeCounter_args implements org.apache.thrift.TBase<removeCounter_args, removeCounter_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeCounter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCounter_args");

    private static final org.apache.thrift.protocol.TField COUNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("counterId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCounter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCounter_argsTupleSchemeFactory());
    }

    public long counterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTER_ID((short)1, "counterId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTER_ID
            return COUNTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNTERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("counterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCounter_args.class, metaDataMap);
    }

    public removeCounter_args() {
    }

    public removeCounter_args(
      long counterId)
    {
      this();
      this.counterId = counterId;
      setCounterIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCounter_args(removeCounter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.counterId = other.counterId;
    }

    public removeCounter_args deepCopy() {
      return new removeCounter_args(this);
    }

    @Override
    public void clear() {
      setCounterIdIsSet(false);
      this.counterId = 0;
    }

    public long getCounterId() {
      return this.counterId;
    }

    public removeCounter_args setCounterId(long counterId) {
      this.counterId = counterId;
      setCounterIdIsSet(true);
      return this;
    }

    public void unsetCounterId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    /** Returns true if field counterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCounterId() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    public void setCounterIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTER_ID:
        if (value == null) {
          unsetCounterId();
        } else {
          setCounterId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTER_ID:
        return Long.valueOf(getCounterId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTER_ID:
        return isSetCounterId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCounter_args)
        return this.equals((removeCounter_args)that);
      return false;
    }

    public boolean equals(removeCounter_args that) {
      if (that == null)
        return false;

      boolean this_present_counterId = true;
      boolean that_present_counterId = true;
      if (this_present_counterId || that_present_counterId) {
        if (!(this_present_counterId && that_present_counterId))
          return false;
        if (this.counterId != that.counterId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeCounter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCounterId()).compareTo(other.isSetCounterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterId, other.counterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCounter_args(");
      boolean first = true;

      sb.append("counterId:");
      sb.append(this.counterId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCounter_argsStandardSchemeFactory implements SchemeFactory {
      public removeCounter_argsStandardScheme getScheme() {
        return new removeCounter_argsStandardScheme();
      }
    }

    private static class removeCounter_argsStandardScheme extends StandardScheme<removeCounter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCounter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.counterId = iprot.readI64();
                struct.setCounterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCounter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNTER_ID_FIELD_DESC);
        oprot.writeI64(struct.counterId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCounter_argsTupleSchemeFactory implements SchemeFactory {
      public removeCounter_argsTupleScheme getScheme() {
        return new removeCounter_argsTupleScheme();
      }
    }

    private static class removeCounter_argsTupleScheme extends TupleScheme<removeCounter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCounterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCounterId()) {
          oprot.writeI64(struct.counterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCounter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.counterId = iprot.readI64();
          struct.setCounterIdIsSet(true);
        }
      }
    }

  }

  public static class removeCounter_result implements org.apache.thrift.TBase<removeCounter_result, removeCounter_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeCounter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCounter_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCounter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCounter_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCounter_result.class, metaDataMap);
    }

    public removeCounter_result() {
    }

    public removeCounter_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCounter_result(removeCounter_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public removeCounter_result deepCopy() {
      return new removeCounter_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public removeCounter_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCounter_result)
        return this.equals((removeCounter_result)that);
      return false;
    }

    public boolean equals(removeCounter_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeCounter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCounter_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCounter_resultStandardSchemeFactory implements SchemeFactory {
      public removeCounter_resultStandardScheme getScheme() {
        return new removeCounter_resultStandardScheme();
      }
    }

    private static class removeCounter_resultStandardScheme extends StandardScheme<removeCounter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCounter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCounter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCounter_resultTupleSchemeFactory implements SchemeFactory {
      public removeCounter_resultTupleScheme getScheme() {
        return new removeCounter_resultTupleScheme();
      }
    }

    private static class removeCounter_resultTupleScheme extends TupleScheme<removeCounter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCounter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getCounters_args implements org.apache.thrift.TBase<getCounters_args, getCounters_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCounters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounters_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounters_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounters_args.class, metaDataMap);
    }

    public getCounters_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounters_args(getCounters_args other) {
    }

    public getCounters_args deepCopy() {
      return new getCounters_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounters_args)
        return this.equals((getCounters_args)that);
      return false;
    }

    public boolean equals(getCounters_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounters_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounters_argsStandardSchemeFactory implements SchemeFactory {
      public getCounters_argsStandardScheme getScheme() {
        return new getCounters_argsStandardScheme();
      }
    }

    private static class getCounters_argsStandardScheme extends StandardScheme<getCounters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounters_argsTupleSchemeFactory implements SchemeFactory {
      public getCounters_argsTupleScheme getScheme() {
        return new getCounters_argsTupleScheme();
      }
    }

    private static class getCounters_argsTupleScheme extends TupleScheme<getCounters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCounters_result implements org.apache.thrift.TBase<getCounters_result, getCounters_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCounters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounters_resultTupleSchemeFactory());
    }

    public List<Counter> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Counter.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounters_result.class, metaDataMap);
    }

    public getCounters_result() {
    }

    public getCounters_result(
      List<Counter> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounters_result(getCounters_result other) {
      if (other.isSetSuccess()) {
        List<Counter> __this__success = new ArrayList<Counter>(other.success.size());
        for (Counter other_element : other.success) {
          __this__success.add(new Counter(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getCounters_result deepCopy() {
      return new getCounters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Counter> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Counter elem) {
      if (this.success == null) {
        this.success = new ArrayList<Counter>();
      }
      this.success.add(elem);
    }

    public List<Counter> getSuccess() {
      return this.success;
    }

    public getCounters_result setSuccess(List<Counter> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getCounters_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Counter>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounters_result)
        return this.equals((getCounters_result)that);
      return false;
    }

    public boolean equals(getCounters_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounters_resultStandardSchemeFactory implements SchemeFactory {
      public getCounters_resultStandardScheme getScheme() {
        return new getCounters_resultStandardScheme();
      }
    }

    private static class getCounters_resultStandardScheme extends StandardScheme<getCounters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Counter>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Counter _elem2;
                    _elem2 = new Counter();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Counter _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounters_resultTupleSchemeFactory implements SchemeFactory {
      public getCounters_resultTupleScheme getScheme() {
        return new getCounters_resultTupleScheme();
      }
    }

    private static class getCounters_resultTupleScheme extends TupleScheme<getCounters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Counter _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Counter>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Counter _elem7;
              _elem7 = new Counter();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getCounterHistory_args implements org.apache.thrift.TBase<getCounterHistory_args, getCounterHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCounterHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounterHistory_args");

    private static final org.apache.thrift.protocol.TField COUNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("counterId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounterHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounterHistory_argsTupleSchemeFactory());
    }

    public long counterId; // required
    public int fromDate; // required
    public int toDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTER_ID((short)1, "counterId"),
      FROM_DATE((short)2, "fromDate"),
      TO_DATE((short)3, "toDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTER_ID
            return COUNTER_ID;
          case 2: // FROM_DATE
            return FROM_DATE;
          case 3: // TO_DATE
            return TO_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNTERID_ISSET_ID = 0;
    private static final int __FROMDATE_ISSET_ID = 1;
    private static final int __TODATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("counterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounterHistory_args.class, metaDataMap);
    }

    public getCounterHistory_args() {
    }

    public getCounterHistory_args(
      long counterId,
      int fromDate,
      int toDate)
    {
      this();
      this.counterId = counterId;
      setCounterIdIsSet(true);
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounterHistory_args(getCounterHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.counterId = other.counterId;
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
    }

    public getCounterHistory_args deepCopy() {
      return new getCounterHistory_args(this);
    }

    @Override
    public void clear() {
      setCounterIdIsSet(false);
      this.counterId = 0;
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
    }

    public long getCounterId() {
      return this.counterId;
    }

    public getCounterHistory_args setCounterId(long counterId) {
      this.counterId = counterId;
      setCounterIdIsSet(true);
      return this;
    }

    public void unsetCounterId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    /** Returns true if field counterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCounterId() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    public void setCounterIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTERID_ISSET_ID, value);
    }

    public int getFromDate() {
      return this.fromDate;
    }

    public getCounterHistory_args setFromDate(int fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMDATE_ISSET_ID, value);
    }

    public int getToDate() {
      return this.toDate;
    }

    public getCounterHistory_args setToDate(int toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return EncodingUtils.testBit(__isset_bitfield, __TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTER_ID:
        if (value == null) {
          unsetCounterId();
        } else {
          setCounterId((Long)value);
        }
        break;

      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Integer)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTER_ID:
        return Long.valueOf(getCounterId());

      case FROM_DATE:
        return Integer.valueOf(getFromDate());

      case TO_DATE:
        return Integer.valueOf(getToDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTER_ID:
        return isSetCounterId();
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounterHistory_args)
        return this.equals((getCounterHistory_args)that);
      return false;
    }

    public boolean equals(getCounterHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_counterId = true;
      boolean that_present_counterId = true;
      if (this_present_counterId || that_present_counterId) {
        if (!(this_present_counterId && that_present_counterId))
          return false;
        if (this.counterId != that.counterId)
          return false;
      }

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounterHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCounterId()).compareTo(other.isSetCounterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterId, other.counterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(other.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, other.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(other.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, other.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounterHistory_args(");
      boolean first = true;

      sb.append("counterId:");
      sb.append(this.counterId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounterHistory_argsStandardSchemeFactory implements SchemeFactory {
      public getCounterHistory_argsStandardScheme getScheme() {
        return new getCounterHistory_argsStandardScheme();
      }
    }

    private static class getCounterHistory_argsStandardScheme extends StandardScheme<getCounterHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounterHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.counterId = iprot.readI64();
                struct.setCounterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromDate = iprot.readI32();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.toDate = iprot.readI32();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounterHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNTER_ID_FIELD_DESC);
        oprot.writeI64(struct.counterId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI32(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI32(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounterHistory_argsTupleSchemeFactory implements SchemeFactory {
      public getCounterHistory_argsTupleScheme getScheme() {
        return new getCounterHistory_argsTupleScheme();
      }
    }

    private static class getCounterHistory_argsTupleScheme extends TupleScheme<getCounterHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounterHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCounterId()) {
          optionals.set(0);
        }
        if (struct.isSetFromDate()) {
          optionals.set(1);
        }
        if (struct.isSetToDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCounterId()) {
          oprot.writeI64(struct.counterId);
        }
        if (struct.isSetFromDate()) {
          oprot.writeI32(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI32(struct.toDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounterHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.counterId = iprot.readI64();
          struct.setCounterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromDate = iprot.readI32();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toDate = iprot.readI32();
          struct.setToDateIsSet(true);
        }
      }
    }

  }

  public static class getCounterHistory_result implements org.apache.thrift.TBase<getCounterHistory_result, getCounterHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCounterHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounterHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounterHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounterHistory_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounterHistory_result.class, metaDataMap);
    }

    public getCounterHistory_result() {
    }

    public getCounterHistory_result(
      Map<Integer,Double> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounterHistory_result(getCounterHistory_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getCounterHistory_result deepCopy() {
      return new getCounterHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public getCounterHistory_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getCounterHistory_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounterHistory_result)
        return this.equals((getCounterHistory_result)that);
      return false;
    }

    public boolean equals(getCounterHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounterHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounterHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounterHistory_resultStandardSchemeFactory implements SchemeFactory {
      public getCounterHistory_resultStandardScheme getScheme() {
        return new getCounterHistory_resultStandardScheme();
      }
    }

    private static class getCounterHistory_resultStandardScheme extends StandardScheme<getCounterHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounterHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    int _key10;
                    double _val11;
                    _key10 = iprot.readI32();
                    _val11 = iprot.readDouble();
                    struct.success.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounterHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter12 : struct.success.entrySet())
            {
              oprot.writeI32(_iter12.getKey());
              oprot.writeDouble(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounterHistory_resultTupleSchemeFactory implements SchemeFactory {
      public getCounterHistory_resultTupleScheme getScheme() {
        return new getCounterHistory_resultTupleScheme();
      }
    }

    private static class getCounterHistory_resultTupleScheme extends TupleScheme<getCounterHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounterHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter13 : struct.success.entrySet())
            {
              oprot.writeI32(_iter13.getKey());
              oprot.writeDouble(_iter13.getValue());
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounterHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              int _key16;
              double _val17;
              _key16 = iprot.readI32();
              _val17 = iprot.readDouble();
              struct.success.put(_key16, _val17);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setCurrentCounterValue_args implements org.apache.thrift.TBase<setCurrentCounterValue_args, setCurrentCounterValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCurrentCounterValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCurrentCounterValue_args");

    private static final org.apache.thrift.protocol.TField COUNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("counterId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COUNTER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("counterValue", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCurrentCounterValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCurrentCounterValue_argsTupleSchemeFactory());
    }

    public long counterId; // required
    public double counterValue; // required
    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTER_ID((short)1, "counterId"),
      COUNTER_VALUE((short)2, "counterValue"),
      DATE((short)3, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTER_ID
            return COUNTER_ID;
          case 2: // COUNTER_VALUE
            return COUNTER_VALUE;
          case 3: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNTERID_ISSET_ID = 0;
    private static final int __COUNTERVALUE_ISSET_ID = 1;
    private static final int __DATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("counterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNTER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("counterValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCurrentCounterValue_args.class, metaDataMap);
    }

    public setCurrentCounterValue_args() {
    }

    public setCurrentCounterValue_args(
      long counterId,
      double counterValue,
      int date)
    {
      this();
      this.counterId = counterId;
      setCounterIdIsSet(true);
      this.counterValue = counterValue;
      setCounterValueIsSet(true);
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCurrentCounterValue_args(setCurrentCounterValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.counterId = other.counterId;
      this.counterValue = other.counterValue;
      this.date = other.date;
    }

    public setCurrentCounterValue_args deepCopy() {
      return new setCurrentCounterValue_args(this);
    }

    @Override
    public void clear() {
      setCounterIdIsSet(false);
      this.counterId = 0;
      setCounterValueIsSet(false);
      this.counterValue = 0.0;
      setDateIsSet(false);
      this.date = 0;
    }

    public long getCounterId() {
      return this.counterId;
    }

    public setCurrentCounterValue_args setCounterId(long counterId) {
      this.counterId = counterId;
      setCounterIdIsSet(true);
      return this;
    }

    public void unsetCounterId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    /** Returns true if field counterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCounterId() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTERID_ISSET_ID);
    }

    public void setCounterIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTERID_ISSET_ID, value);
    }

    public double getCounterValue() {
      return this.counterValue;
    }

    public setCurrentCounterValue_args setCounterValue(double counterValue) {
      this.counterValue = counterValue;
      setCounterValueIsSet(true);
      return this;
    }

    public void unsetCounterValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTERVALUE_ISSET_ID);
    }

    /** Returns true if field counterValue is set (has been assigned a value) and false otherwise */
    public boolean isSetCounterValue() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTERVALUE_ISSET_ID);
    }

    public void setCounterValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTERVALUE_ISSET_ID, value);
    }

    public int getDate() {
      return this.date;
    }

    public setCurrentCounterValue_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTER_ID:
        if (value == null) {
          unsetCounterId();
        } else {
          setCounterId((Long)value);
        }
        break;

      case COUNTER_VALUE:
        if (value == null) {
          unsetCounterValue();
        } else {
          setCounterValue((Double)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTER_ID:
        return Long.valueOf(getCounterId());

      case COUNTER_VALUE:
        return Double.valueOf(getCounterValue());

      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTER_ID:
        return isSetCounterId();
      case COUNTER_VALUE:
        return isSetCounterValue();
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCurrentCounterValue_args)
        return this.equals((setCurrentCounterValue_args)that);
      return false;
    }

    public boolean equals(setCurrentCounterValue_args that) {
      if (that == null)
        return false;

      boolean this_present_counterId = true;
      boolean that_present_counterId = true;
      if (this_present_counterId || that_present_counterId) {
        if (!(this_present_counterId && that_present_counterId))
          return false;
        if (this.counterId != that.counterId)
          return false;
      }

      boolean this_present_counterValue = true;
      boolean that_present_counterValue = true;
      if (this_present_counterValue || that_present_counterValue) {
        if (!(this_present_counterValue && that_present_counterValue))
          return false;
        if (this.counterValue != that.counterValue)
          return false;
      }

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setCurrentCounterValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCounterId()).compareTo(other.isSetCounterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterId, other.counterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCounterValue()).compareTo(other.isSetCounterValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounterValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterValue, other.counterValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCurrentCounterValue_args(");
      boolean first = true;

      sb.append("counterId:");
      sb.append(this.counterId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("counterValue:");
      sb.append(this.counterValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCurrentCounterValue_argsStandardSchemeFactory implements SchemeFactory {
      public setCurrentCounterValue_argsStandardScheme getScheme() {
        return new setCurrentCounterValue_argsStandardScheme();
      }
    }

    private static class setCurrentCounterValue_argsStandardScheme extends StandardScheme<setCurrentCounterValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCurrentCounterValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.counterId = iprot.readI64();
                struct.setCounterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNTER_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.counterValue = iprot.readDouble();
                struct.setCounterValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCurrentCounterValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNTER_ID_FIELD_DESC);
        oprot.writeI64(struct.counterId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNTER_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.counterValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCurrentCounterValue_argsTupleSchemeFactory implements SchemeFactory {
      public setCurrentCounterValue_argsTupleScheme getScheme() {
        return new setCurrentCounterValue_argsTupleScheme();
      }
    }

    private static class setCurrentCounterValue_argsTupleScheme extends TupleScheme<setCurrentCounterValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCurrentCounterValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCounterId()) {
          optionals.set(0);
        }
        if (struct.isSetCounterValue()) {
          optionals.set(1);
        }
        if (struct.isSetDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCounterId()) {
          oprot.writeI64(struct.counterId);
        }
        if (struct.isSetCounterValue()) {
          oprot.writeDouble(struct.counterValue);
        }
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCurrentCounterValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.counterId = iprot.readI64();
          struct.setCounterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.counterValue = iprot.readDouble();
          struct.setCounterValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class setCurrentCounterValue_result implements org.apache.thrift.TBase<setCurrentCounterValue_result, setCurrentCounterValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCurrentCounterValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCurrentCounterValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCurrentCounterValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCurrentCounterValue_resultTupleSchemeFactory());
    }

    public double success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCurrentCounterValue_result.class, metaDataMap);
    }

    public setCurrentCounterValue_result() {
    }

    public setCurrentCounterValue_result(
      double success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCurrentCounterValue_result(setCurrentCounterValue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public setCurrentCounterValue_result deepCopy() {
      return new setCurrentCounterValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.exc = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public setCurrentCounterValue_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public setCurrentCounterValue_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCurrentCounterValue_result)
        return this.equals((setCurrentCounterValue_result)that);
      return false;
    }

    public boolean equals(setCurrentCounterValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setCurrentCounterValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCurrentCounterValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCurrentCounterValue_resultStandardSchemeFactory implements SchemeFactory {
      public setCurrentCounterValue_resultStandardScheme getScheme() {
        return new setCurrentCounterValue_resultStandardScheme();
      }
    }

    private static class setCurrentCounterValue_resultStandardScheme extends StandardScheme<setCurrentCounterValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCurrentCounterValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCurrentCounterValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCurrentCounterValue_resultTupleSchemeFactory implements SchemeFactory {
      public setCurrentCounterValue_resultTupleScheme getScheme() {
        return new setCurrentCounterValue_resultTupleScheme();
      }
    }

    private static class setCurrentCounterValue_resultTupleScheme extends TupleScheme<setCurrentCounterValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCurrentCounterValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCurrentCounterValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
