/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.fileservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileService {

  public interface Iface {

    public String saveFileContent(ByteBuffer data, boolean isPublic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public String copyFileContent(String sourceUrl, boolean isPublic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public String replaceFileFromURL(String oldUrl, String newSourceUrl) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public String replaceFileContent(String oldUrl, ByteBuffer newData) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void deleteFile(String url) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveFileContent(ByteBuffer data, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void copyFileContent(String sourceUrl, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replaceFileFromURL(String oldUrl, String newSourceUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replaceFileContent(String oldUrl, ByteBuffer newData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFile(String url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String saveFileContent(ByteBuffer data, boolean isPublic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_saveFileContent(data, isPublic);
      return recv_saveFileContent();
    }

    public void send_saveFileContent(ByteBuffer data, boolean isPublic) throws org.apache.thrift.TException
    {
      saveFileContent_args args = new saveFileContent_args();
      args.setData(data);
      args.setIsPublic(isPublic);
      sendBase("saveFileContent", args);
    }

    public String recv_saveFileContent() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      saveFileContent_result result = new saveFileContent_result();
      receiveBase(result, "saveFileContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFileContent failed: unknown result");
    }

    public String copyFileContent(String sourceUrl, boolean isPublic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_copyFileContent(sourceUrl, isPublic);
      return recv_copyFileContent();
    }

    public void send_copyFileContent(String sourceUrl, boolean isPublic) throws org.apache.thrift.TException
    {
      copyFileContent_args args = new copyFileContent_args();
      args.setSourceUrl(sourceUrl);
      args.setIsPublic(isPublic);
      sendBase("copyFileContent", args);
    }

    public String recv_copyFileContent() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      copyFileContent_result result = new copyFileContent_result();
      receiveBase(result, "copyFileContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "copyFileContent failed: unknown result");
    }

    public String replaceFileFromURL(String oldUrl, String newSourceUrl) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_replaceFileFromURL(oldUrl, newSourceUrl);
      return recv_replaceFileFromURL();
    }

    public void send_replaceFileFromURL(String oldUrl, String newSourceUrl) throws org.apache.thrift.TException
    {
      replaceFileFromURL_args args = new replaceFileFromURL_args();
      args.setOldUrl(oldUrl);
      args.setNewSourceUrl(newSourceUrl);
      sendBase("replaceFileFromURL", args);
    }

    public String recv_replaceFileFromURL() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      replaceFileFromURL_result result = new replaceFileFromURL_result();
      receiveBase(result, "replaceFileFromURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replaceFileFromURL failed: unknown result");
    }

    public String replaceFileContent(String oldUrl, ByteBuffer newData) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_replaceFileContent(oldUrl, newData);
      return recv_replaceFileContent();
    }

    public void send_replaceFileContent(String oldUrl, ByteBuffer newData) throws org.apache.thrift.TException
    {
      replaceFileContent_args args = new replaceFileContent_args();
      args.setOldUrl(oldUrl);
      args.setNewData(newData);
      sendBase("replaceFileContent", args);
    }

    public String recv_replaceFileContent() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      replaceFileContent_result result = new replaceFileContent_result();
      receiveBase(result, "replaceFileContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replaceFileContent failed: unknown result");
    }

    public void deleteFile(String url) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_deleteFile(url);
      recv_deleteFile();
    }

    public void send_deleteFile(String url) throws org.apache.thrift.TException
    {
      deleteFile_args args = new deleteFile_args();
      args.setUrl(url);
      sendBase("deleteFile", args);
    }

    public void recv_deleteFile() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      deleteFile_result result = new deleteFile_result();
      receiveBase(result, "deleteFile");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveFileContent(ByteBuffer data, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFileContent_call method_call = new saveFileContent_call(data, isPublic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFileContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer data;
      private boolean isPublic;
      public saveFileContent_call(ByteBuffer data, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.isPublic = isPublic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFileContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFileContent_args args = new saveFileContent_args();
        args.setData(data);
        args.setIsPublic(isPublic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFileContent();
      }
    }

    public void copyFileContent(String sourceUrl, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copyFileContent_call method_call = new copyFileContent_call(sourceUrl, isPublic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copyFileContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sourceUrl;
      private boolean isPublic;
      public copyFileContent_call(String sourceUrl, boolean isPublic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceUrl = sourceUrl;
        this.isPublic = isPublic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copyFileContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copyFileContent_args args = new copyFileContent_args();
        args.setSourceUrl(sourceUrl);
        args.setIsPublic(isPublic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_copyFileContent();
      }
    }

    public void replaceFileFromURL(String oldUrl, String newSourceUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replaceFileFromURL_call method_call = new replaceFileFromURL_call(oldUrl, newSourceUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replaceFileFromURL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String oldUrl;
      private String newSourceUrl;
      public replaceFileFromURL_call(String oldUrl, String newSourceUrl, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldUrl = oldUrl;
        this.newSourceUrl = newSourceUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replaceFileFromURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replaceFileFromURL_args args = new replaceFileFromURL_args();
        args.setOldUrl(oldUrl);
        args.setNewSourceUrl(newSourceUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replaceFileFromURL();
      }
    }

    public void replaceFileContent(String oldUrl, ByteBuffer newData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replaceFileContent_call method_call = new replaceFileContent_call(oldUrl, newData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replaceFileContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String oldUrl;
      private ByteBuffer newData;
      public replaceFileContent_call(String oldUrl, ByteBuffer newData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldUrl = oldUrl;
        this.newData = newData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replaceFileContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replaceFileContent_args args = new replaceFileContent_args();
        args.setOldUrl(oldUrl);
        args.setNewData(newData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replaceFileContent();
      }
    }

    public void deleteFile(String url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFile_call method_call = new deleteFile_call(url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String url;
      public deleteFile_call(String url, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.url = url;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFile_args args = new deleteFile_args();
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveFileContent", new saveFileContent());
      processMap.put("copyFileContent", new copyFileContent());
      processMap.put("replaceFileFromURL", new replaceFileFromURL());
      processMap.put("replaceFileContent", new replaceFileContent());
      processMap.put("deleteFile", new deleteFile());
      return processMap;
    }

    public static class saveFileContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFileContent_args> {
      public saveFileContent() {
        super("saveFileContent");
      }

      public saveFileContent_args getEmptyArgsInstance() {
        return new saveFileContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFileContent_result getResult(I iface, saveFileContent_args args) throws org.apache.thrift.TException {
        saveFileContent_result result = new saveFileContent_result();
        try {
          result.success = iface.saveFileContent(args.data, args.isPublic);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class copyFileContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copyFileContent_args> {
      public copyFileContent() {
        super("copyFileContent");
      }

      public copyFileContent_args getEmptyArgsInstance() {
        return new copyFileContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public copyFileContent_result getResult(I iface, copyFileContent_args args) throws org.apache.thrift.TException {
        copyFileContent_result result = new copyFileContent_result();
        try {
          result.success = iface.copyFileContent(args.sourceUrl, args.isPublic);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class replaceFileFromURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replaceFileFromURL_args> {
      public replaceFileFromURL() {
        super("replaceFileFromURL");
      }

      public replaceFileFromURL_args getEmptyArgsInstance() {
        return new replaceFileFromURL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replaceFileFromURL_result getResult(I iface, replaceFileFromURL_args args) throws org.apache.thrift.TException {
        replaceFileFromURL_result result = new replaceFileFromURL_result();
        try {
          result.success = iface.replaceFileFromURL(args.oldUrl, args.newSourceUrl);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class replaceFileContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replaceFileContent_args> {
      public replaceFileContent() {
        super("replaceFileContent");
      }

      public replaceFileContent_args getEmptyArgsInstance() {
        return new replaceFileContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replaceFileContent_result getResult(I iface, replaceFileContent_args args) throws org.apache.thrift.TException {
        replaceFileContent_result result = new replaceFileContent_result();
        try {
          result.success = iface.replaceFileContent(args.oldUrl, args.newData);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class deleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFile_args> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFile_result getResult(I iface, deleteFile_args args) throws org.apache.thrift.TException {
        deleteFile_result result = new deleteFile_result();
        try {
          iface.deleteFile(args.url);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveFileContent", new saveFileContent());
      processMap.put("copyFileContent", new copyFileContent());
      processMap.put("replaceFileFromURL", new replaceFileFromURL());
      processMap.put("replaceFileContent", new replaceFileContent());
      processMap.put("deleteFile", new deleteFile());
      return processMap;
    }

    public static class saveFileContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveFileContent_args, String> {
      public saveFileContent() {
        super("saveFileContent");
      }

      public saveFileContent_args getEmptyArgsInstance() {
        return new saveFileContent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            saveFileContent_result result = new saveFileContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveFileContent_result result = new saveFileContent_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveFileContent_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.saveFileContent(args.data, args.isPublic,resultHandler);
      }
    }

    public static class copyFileContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, copyFileContent_args, String> {
      public copyFileContent() {
        super("copyFileContent");
      }

      public copyFileContent_args getEmptyArgsInstance() {
        return new copyFileContent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            copyFileContent_result result = new copyFileContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            copyFileContent_result result = new copyFileContent_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, copyFileContent_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.copyFileContent(args.sourceUrl, args.isPublic,resultHandler);
      }
    }

    public static class replaceFileFromURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replaceFileFromURL_args, String> {
      public replaceFileFromURL() {
        super("replaceFileFromURL");
      }

      public replaceFileFromURL_args getEmptyArgsInstance() {
        return new replaceFileFromURL_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            replaceFileFromURL_result result = new replaceFileFromURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replaceFileFromURL_result result = new replaceFileFromURL_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replaceFileFromURL_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.replaceFileFromURL(args.oldUrl, args.newSourceUrl,resultHandler);
      }
    }

    public static class replaceFileContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replaceFileContent_args, String> {
      public replaceFileContent() {
        super("replaceFileContent");
      }

      public replaceFileContent_args getEmptyArgsInstance() {
        return new replaceFileContent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            replaceFileContent_result result = new replaceFileContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replaceFileContent_result result = new replaceFileContent_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replaceFileContent_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.replaceFileContent(args.oldUrl, args.newData,resultHandler);
      }
    }

    public static class deleteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFile_args, Void> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteFile_result result = new deleteFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFile_result result = new deleteFile_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteFile(args.url,resultHandler);
      }
    }

  }

  public static class saveFileContent_args implements org.apache.thrift.TBase<saveFileContent_args, saveFileContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveFileContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFileContent_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_PUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isPublic", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFileContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFileContent_argsTupleSchemeFactory());
    }

    public ByteBuffer data; // required
    public boolean isPublic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      IS_PUBLIC((short)2, "isPublic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // IS_PUBLIC
            return IS_PUBLIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPUBLIC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.IS_PUBLIC, new org.apache.thrift.meta_data.FieldMetaData("isPublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFileContent_args.class, metaDataMap);
    }

    public saveFileContent_args() {
    }

    public saveFileContent_args(
      ByteBuffer data,
      boolean isPublic)
    {
      this();
      this.data = data;
      this.isPublic = isPublic;
      setIsPublicIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFileContent_args(saveFileContent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
      }
      this.isPublic = other.isPublic;
    }

    public saveFileContent_args deepCopy() {
      return new saveFileContent_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      setIsPublicIsSet(false);
      this.isPublic = false;
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return data;
    }

    public saveFileContent_args setData(byte[] data) {
      setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
      return this;
    }

    public saveFileContent_args setData(ByteBuffer data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public boolean isIsPublic() {
      return this.isPublic;
    }

    public saveFileContent_args setIsPublic(boolean isPublic) {
      this.isPublic = isPublic;
      setIsPublicIsSet(true);
      return this;
    }

    public void unsetIsPublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field isPublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIsPublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      case IS_PUBLIC:
        if (value == null) {
          unsetIsPublic();
        } else {
          setIsPublic((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case IS_PUBLIC:
        return Boolean.valueOf(isIsPublic());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case IS_PUBLIC:
        return isSetIsPublic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFileContent_args)
        return this.equals((saveFileContent_args)that);
      return false;
    }

    public boolean equals(saveFileContent_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_isPublic = true;
      boolean that_present_isPublic = true;
      if (this_present_isPublic || that_present_isPublic) {
        if (!(this_present_isPublic && that_present_isPublic))
          return false;
        if (this.isPublic != that.isPublic)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveFileContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPublic()).compareTo(other.isSetIsPublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPublic, other.isPublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFileContent_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPublic:");
      sb.append(this.isPublic);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFileContent_argsStandardSchemeFactory implements SchemeFactory {
      public saveFileContent_argsStandardScheme getScheme() {
        return new saveFileContent_argsStandardScheme();
      }
    }

    private static class saveFileContent_argsStandardScheme extends StandardScheme<saveFileContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFileContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_PUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPublic = iprot.readBool();
                struct.setIsPublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFileContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PUBLIC_FIELD_DESC);
        oprot.writeBool(struct.isPublic);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFileContent_argsTupleSchemeFactory implements SchemeFactory {
      public saveFileContent_argsTupleScheme getScheme() {
        return new saveFileContent_argsTupleScheme();
      }
    }

    private static class saveFileContent_argsTupleScheme extends TupleScheme<saveFileContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetIsPublic()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
        if (struct.isSetIsPublic()) {
          oprot.writeBool(struct.isPublic);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isPublic = iprot.readBool();
          struct.setIsPublicIsSet(true);
        }
      }
    }

  }

  public static class saveFileContent_result implements org.apache.thrift.TBase<saveFileContent_result, saveFileContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveFileContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFileContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFileContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFileContent_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFileContent_result.class, metaDataMap);
    }

    public saveFileContent_result() {
    }

    public saveFileContent_result(
      String success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFileContent_result(saveFileContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public saveFileContent_result deepCopy() {
      return new saveFileContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public saveFileContent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public saveFileContent_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFileContent_result)
        return this.equals((saveFileContent_result)that);
      return false;
    }

    public boolean equals(saveFileContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveFileContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFileContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFileContent_resultStandardSchemeFactory implements SchemeFactory {
      public saveFileContent_resultStandardScheme getScheme() {
        return new saveFileContent_resultStandardScheme();
      }
    }

    private static class saveFileContent_resultStandardScheme extends StandardScheme<saveFileContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFileContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFileContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFileContent_resultTupleSchemeFactory implements SchemeFactory {
      public saveFileContent_resultTupleScheme getScheme() {
        return new saveFileContent_resultTupleScheme();
      }
    }

    private static class saveFileContent_resultTupleScheme extends TupleScheme<saveFileContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class copyFileContent_args implements org.apache.thrift.TBase<copyFileContent_args, copyFileContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<copyFileContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFileContent_args");

    private static final org.apache.thrift.protocol.TField SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_PUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isPublic", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFileContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFileContent_argsTupleSchemeFactory());
    }

    public String sourceUrl; // required
    public boolean isPublic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_URL((short)1, "sourceUrl"),
      IS_PUBLIC((short)2, "isPublic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_URL
            return SOURCE_URL;
          case 2: // IS_PUBLIC
            return IS_PUBLIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPUBLIC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("sourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_PUBLIC, new org.apache.thrift.meta_data.FieldMetaData("isPublic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFileContent_args.class, metaDataMap);
    }

    public copyFileContent_args() {
    }

    public copyFileContent_args(
      String sourceUrl,
      boolean isPublic)
    {
      this();
      this.sourceUrl = sourceUrl;
      this.isPublic = isPublic;
      setIsPublicIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFileContent_args(copyFileContent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSourceUrl()) {
        this.sourceUrl = other.sourceUrl;
      }
      this.isPublic = other.isPublic;
    }

    public copyFileContent_args deepCopy() {
      return new copyFileContent_args(this);
    }

    @Override
    public void clear() {
      this.sourceUrl = null;
      setIsPublicIsSet(false);
      this.isPublic = false;
    }

    public String getSourceUrl() {
      return this.sourceUrl;
    }

    public copyFileContent_args setSourceUrl(String sourceUrl) {
      this.sourceUrl = sourceUrl;
      return this;
    }

    public void unsetSourceUrl() {
      this.sourceUrl = null;
    }

    /** Returns true if field sourceUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceUrl() {
      return this.sourceUrl != null;
    }

    public void setSourceUrlIsSet(boolean value) {
      if (!value) {
        this.sourceUrl = null;
      }
    }

    public boolean isIsPublic() {
      return this.isPublic;
    }

    public copyFileContent_args setIsPublic(boolean isPublic) {
      this.isPublic = isPublic;
      setIsPublicIsSet(true);
      return this;
    }

    public void unsetIsPublic() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    /** Returns true if field isPublic is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPublic() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPUBLIC_ISSET_ID);
    }

    public void setIsPublicIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLIC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_URL:
        if (value == null) {
          unsetSourceUrl();
        } else {
          setSourceUrl((String)value);
        }
        break;

      case IS_PUBLIC:
        if (value == null) {
          unsetIsPublic();
        } else {
          setIsPublic((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_URL:
        return getSourceUrl();

      case IS_PUBLIC:
        return Boolean.valueOf(isIsPublic());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_URL:
        return isSetSourceUrl();
      case IS_PUBLIC:
        return isSetIsPublic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFileContent_args)
        return this.equals((copyFileContent_args)that);
      return false;
    }

    public boolean equals(copyFileContent_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceUrl = true && this.isSetSourceUrl();
      boolean that_present_sourceUrl = true && that.isSetSourceUrl();
      if (this_present_sourceUrl || that_present_sourceUrl) {
        if (!(this_present_sourceUrl && that_present_sourceUrl))
          return false;
        if (!this.sourceUrl.equals(that.sourceUrl))
          return false;
      }

      boolean this_present_isPublic = true;
      boolean that_present_isPublic = true;
      if (this_present_isPublic || that_present_isPublic) {
        if (!(this_present_isPublic && that_present_isPublic))
          return false;
        if (this.isPublic != that.isPublic)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(copyFileContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSourceUrl()).compareTo(other.isSetSourceUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceUrl, other.sourceUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPublic()).compareTo(other.isSetIsPublic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPublic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPublic, other.isPublic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFileContent_args(");
      boolean first = true;

      sb.append("sourceUrl:");
      if (this.sourceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPublic:");
      sb.append(this.isPublic);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFileContent_argsStandardSchemeFactory implements SchemeFactory {
      public copyFileContent_argsStandardScheme getScheme() {
        return new copyFileContent_argsStandardScheme();
      }
    }

    private static class copyFileContent_argsStandardScheme extends StandardScheme<copyFileContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFileContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceUrl = iprot.readString();
                struct.setSourceUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_PUBLIC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPublic = iprot.readBool();
                struct.setIsPublicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFileContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceUrl != null) {
          oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.sourceUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PUBLIC_FIELD_DESC);
        oprot.writeBool(struct.isPublic);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFileContent_argsTupleSchemeFactory implements SchemeFactory {
      public copyFileContent_argsTupleScheme getScheme() {
        return new copyFileContent_argsTupleScheme();
      }
    }

    private static class copyFileContent_argsTupleScheme extends TupleScheme<copyFileContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceUrl()) {
          optionals.set(0);
        }
        if (struct.isSetIsPublic()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSourceUrl()) {
          oprot.writeString(struct.sourceUrl);
        }
        if (struct.isSetIsPublic()) {
          oprot.writeBool(struct.isPublic);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sourceUrl = iprot.readString();
          struct.setSourceUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isPublic = iprot.readBool();
          struct.setIsPublicIsSet(true);
        }
      }
    }

  }

  public static class copyFileContent_result implements org.apache.thrift.TBase<copyFileContent_result, copyFileContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<copyFileContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFileContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFileContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFileContent_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFileContent_result.class, metaDataMap);
    }

    public copyFileContent_result() {
    }

    public copyFileContent_result(
      String success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFileContent_result(copyFileContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public copyFileContent_result deepCopy() {
      return new copyFileContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public copyFileContent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public copyFileContent_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFileContent_result)
        return this.equals((copyFileContent_result)that);
      return false;
    }

    public boolean equals(copyFileContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(copyFileContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFileContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFileContent_resultStandardSchemeFactory implements SchemeFactory {
      public copyFileContent_resultStandardScheme getScheme() {
        return new copyFileContent_resultStandardScheme();
      }
    }

    private static class copyFileContent_resultStandardScheme extends StandardScheme<copyFileContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFileContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFileContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFileContent_resultTupleSchemeFactory implements SchemeFactory {
      public copyFileContent_resultTupleScheme getScheme() {
        return new copyFileContent_resultTupleScheme();
      }
    }

    private static class copyFileContent_resultTupleScheme extends TupleScheme<copyFileContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class replaceFileFromURL_args implements org.apache.thrift.TBase<replaceFileFromURL_args, replaceFileFromURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<replaceFileFromURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceFileFromURL_args");

    private static final org.apache.thrift.protocol.TField OLD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("oldUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("newSourceUrl", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceFileFromURL_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceFileFromURL_argsTupleSchemeFactory());
    }

    public String oldUrl; // required
    public String newSourceUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_URL((short)1, "oldUrl"),
      NEW_SOURCE_URL((short)2, "newSourceUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_URL
            return OLD_URL;
          case 2: // NEW_SOURCE_URL
            return NEW_SOURCE_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_URL, new org.apache.thrift.meta_data.FieldMetaData("oldUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("newSourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceFileFromURL_args.class, metaDataMap);
    }

    public replaceFileFromURL_args() {
    }

    public replaceFileFromURL_args(
      String oldUrl,
      String newSourceUrl)
    {
      this();
      this.oldUrl = oldUrl;
      this.newSourceUrl = newSourceUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceFileFromURL_args(replaceFileFromURL_args other) {
      if (other.isSetOldUrl()) {
        this.oldUrl = other.oldUrl;
      }
      if (other.isSetNewSourceUrl()) {
        this.newSourceUrl = other.newSourceUrl;
      }
    }

    public replaceFileFromURL_args deepCopy() {
      return new replaceFileFromURL_args(this);
    }

    @Override
    public void clear() {
      this.oldUrl = null;
      this.newSourceUrl = null;
    }

    public String getOldUrl() {
      return this.oldUrl;
    }

    public replaceFileFromURL_args setOldUrl(String oldUrl) {
      this.oldUrl = oldUrl;
      return this;
    }

    public void unsetOldUrl() {
      this.oldUrl = null;
    }

    /** Returns true if field oldUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetOldUrl() {
      return this.oldUrl != null;
    }

    public void setOldUrlIsSet(boolean value) {
      if (!value) {
        this.oldUrl = null;
      }
    }

    public String getNewSourceUrl() {
      return this.newSourceUrl;
    }

    public replaceFileFromURL_args setNewSourceUrl(String newSourceUrl) {
      this.newSourceUrl = newSourceUrl;
      return this;
    }

    public void unsetNewSourceUrl() {
      this.newSourceUrl = null;
    }

    /** Returns true if field newSourceUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetNewSourceUrl() {
      return this.newSourceUrl != null;
    }

    public void setNewSourceUrlIsSet(boolean value) {
      if (!value) {
        this.newSourceUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_URL:
        if (value == null) {
          unsetOldUrl();
        } else {
          setOldUrl((String)value);
        }
        break;

      case NEW_SOURCE_URL:
        if (value == null) {
          unsetNewSourceUrl();
        } else {
          setNewSourceUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_URL:
        return getOldUrl();

      case NEW_SOURCE_URL:
        return getNewSourceUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_URL:
        return isSetOldUrl();
      case NEW_SOURCE_URL:
        return isSetNewSourceUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceFileFromURL_args)
        return this.equals((replaceFileFromURL_args)that);
      return false;
    }

    public boolean equals(replaceFileFromURL_args that) {
      if (that == null)
        return false;

      boolean this_present_oldUrl = true && this.isSetOldUrl();
      boolean that_present_oldUrl = true && that.isSetOldUrl();
      if (this_present_oldUrl || that_present_oldUrl) {
        if (!(this_present_oldUrl && that_present_oldUrl))
          return false;
        if (!this.oldUrl.equals(that.oldUrl))
          return false;
      }

      boolean this_present_newSourceUrl = true && this.isSetNewSourceUrl();
      boolean that_present_newSourceUrl = true && that.isSetNewSourceUrl();
      if (this_present_newSourceUrl || that_present_newSourceUrl) {
        if (!(this_present_newSourceUrl && that_present_newSourceUrl))
          return false;
        if (!this.newSourceUrl.equals(that.newSourceUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replaceFileFromURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldUrl()).compareTo(other.isSetOldUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldUrl, other.oldUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewSourceUrl()).compareTo(other.isSetNewSourceUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewSourceUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newSourceUrl, other.newSourceUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceFileFromURL_args(");
      boolean first = true;

      sb.append("oldUrl:");
      if (this.oldUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.oldUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newSourceUrl:");
      if (this.newSourceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.newSourceUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceFileFromURL_argsStandardSchemeFactory implements SchemeFactory {
      public replaceFileFromURL_argsStandardScheme getScheme() {
        return new replaceFileFromURL_argsStandardScheme();
      }
    }

    private static class replaceFileFromURL_argsStandardScheme extends StandardScheme<replaceFileFromURL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceFileFromURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldUrl = iprot.readString();
                struct.setOldUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_SOURCE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newSourceUrl = iprot.readString();
                struct.setNewSourceUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceFileFromURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldUrl != null) {
          oprot.writeFieldBegin(OLD_URL_FIELD_DESC);
          oprot.writeString(struct.oldUrl);
          oprot.writeFieldEnd();
        }
        if (struct.newSourceUrl != null) {
          oprot.writeFieldBegin(NEW_SOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.newSourceUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceFileFromURL_argsTupleSchemeFactory implements SchemeFactory {
      public replaceFileFromURL_argsTupleScheme getScheme() {
        return new replaceFileFromURL_argsTupleScheme();
      }
    }

    private static class replaceFileFromURL_argsTupleScheme extends TupleScheme<replaceFileFromURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceFileFromURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldUrl()) {
          optionals.set(0);
        }
        if (struct.isSetNewSourceUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldUrl()) {
          oprot.writeString(struct.oldUrl);
        }
        if (struct.isSetNewSourceUrl()) {
          oprot.writeString(struct.newSourceUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceFileFromURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldUrl = iprot.readString();
          struct.setOldUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newSourceUrl = iprot.readString();
          struct.setNewSourceUrlIsSet(true);
        }
      }
    }

  }

  public static class replaceFileFromURL_result implements org.apache.thrift.TBase<replaceFileFromURL_result, replaceFileFromURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<replaceFileFromURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceFileFromURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceFileFromURL_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceFileFromURL_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceFileFromURL_result.class, metaDataMap);
    }

    public replaceFileFromURL_result() {
    }

    public replaceFileFromURL_result(
      String success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceFileFromURL_result(replaceFileFromURL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public replaceFileFromURL_result deepCopy() {
      return new replaceFileFromURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public replaceFileFromURL_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public replaceFileFromURL_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceFileFromURL_result)
        return this.equals((replaceFileFromURL_result)that);
      return false;
    }

    public boolean equals(replaceFileFromURL_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replaceFileFromURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceFileFromURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceFileFromURL_resultStandardSchemeFactory implements SchemeFactory {
      public replaceFileFromURL_resultStandardScheme getScheme() {
        return new replaceFileFromURL_resultStandardScheme();
      }
    }

    private static class replaceFileFromURL_resultStandardScheme extends StandardScheme<replaceFileFromURL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceFileFromURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceFileFromURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceFileFromURL_resultTupleSchemeFactory implements SchemeFactory {
      public replaceFileFromURL_resultTupleScheme getScheme() {
        return new replaceFileFromURL_resultTupleScheme();
      }
    }

    private static class replaceFileFromURL_resultTupleScheme extends TupleScheme<replaceFileFromURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceFileFromURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceFileFromURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class replaceFileContent_args implements org.apache.thrift.TBase<replaceFileContent_args, replaceFileContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<replaceFileContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceFileContent_args");

    private static final org.apache.thrift.protocol.TField OLD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("oldUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("newData", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceFileContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceFileContent_argsTupleSchemeFactory());
    }

    public String oldUrl; // required
    public ByteBuffer newData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_URL((short)1, "oldUrl"),
      NEW_DATA((short)2, "newData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_URL
            return OLD_URL;
          case 2: // NEW_DATA
            return NEW_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_URL, new org.apache.thrift.meta_data.FieldMetaData("oldUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_DATA, new org.apache.thrift.meta_data.FieldMetaData("newData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceFileContent_args.class, metaDataMap);
    }

    public replaceFileContent_args() {
    }

    public replaceFileContent_args(
      String oldUrl,
      ByteBuffer newData)
    {
      this();
      this.oldUrl = oldUrl;
      this.newData = newData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceFileContent_args(replaceFileContent_args other) {
      if (other.isSetOldUrl()) {
        this.oldUrl = other.oldUrl;
      }
      if (other.isSetNewData()) {
        this.newData = org.apache.thrift.TBaseHelper.copyBinary(other.newData);
;
      }
    }

    public replaceFileContent_args deepCopy() {
      return new replaceFileContent_args(this);
    }

    @Override
    public void clear() {
      this.oldUrl = null;
      this.newData = null;
    }

    public String getOldUrl() {
      return this.oldUrl;
    }

    public replaceFileContent_args setOldUrl(String oldUrl) {
      this.oldUrl = oldUrl;
      return this;
    }

    public void unsetOldUrl() {
      this.oldUrl = null;
    }

    /** Returns true if field oldUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetOldUrl() {
      return this.oldUrl != null;
    }

    public void setOldUrlIsSet(boolean value) {
      if (!value) {
        this.oldUrl = null;
      }
    }

    public byte[] getNewData() {
      setNewData(org.apache.thrift.TBaseHelper.rightSize(newData));
      return newData == null ? null : newData.array();
    }

    public ByteBuffer bufferForNewData() {
      return newData;
    }

    public replaceFileContent_args setNewData(byte[] newData) {
      setNewData(newData == null ? (ByteBuffer)null : ByteBuffer.wrap(newData));
      return this;
    }

    public replaceFileContent_args setNewData(ByteBuffer newData) {
      this.newData = newData;
      return this;
    }

    public void unsetNewData() {
      this.newData = null;
    }

    /** Returns true if field newData is set (has been assigned a value) and false otherwise */
    public boolean isSetNewData() {
      return this.newData != null;
    }

    public void setNewDataIsSet(boolean value) {
      if (!value) {
        this.newData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_URL:
        if (value == null) {
          unsetOldUrl();
        } else {
          setOldUrl((String)value);
        }
        break;

      case NEW_DATA:
        if (value == null) {
          unsetNewData();
        } else {
          setNewData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_URL:
        return getOldUrl();

      case NEW_DATA:
        return getNewData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_URL:
        return isSetOldUrl();
      case NEW_DATA:
        return isSetNewData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceFileContent_args)
        return this.equals((replaceFileContent_args)that);
      return false;
    }

    public boolean equals(replaceFileContent_args that) {
      if (that == null)
        return false;

      boolean this_present_oldUrl = true && this.isSetOldUrl();
      boolean that_present_oldUrl = true && that.isSetOldUrl();
      if (this_present_oldUrl || that_present_oldUrl) {
        if (!(this_present_oldUrl && that_present_oldUrl))
          return false;
        if (!this.oldUrl.equals(that.oldUrl))
          return false;
      }

      boolean this_present_newData = true && this.isSetNewData();
      boolean that_present_newData = true && that.isSetNewData();
      if (this_present_newData || that_present_newData) {
        if (!(this_present_newData && that_present_newData))
          return false;
        if (!this.newData.equals(that.newData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replaceFileContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldUrl()).compareTo(other.isSetOldUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldUrl, other.oldUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewData()).compareTo(other.isSetNewData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newData, other.newData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceFileContent_args(");
      boolean first = true;

      sb.append("oldUrl:");
      if (this.oldUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.oldUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newData:");
      if (this.newData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.newData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceFileContent_argsStandardSchemeFactory implements SchemeFactory {
      public replaceFileContent_argsStandardScheme getScheme() {
        return new replaceFileContent_argsStandardScheme();
      }
    }

    private static class replaceFileContent_argsStandardScheme extends StandardScheme<replaceFileContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceFileContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldUrl = iprot.readString();
                struct.setOldUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newData = iprot.readBinary();
                struct.setNewDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceFileContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldUrl != null) {
          oprot.writeFieldBegin(OLD_URL_FIELD_DESC);
          oprot.writeString(struct.oldUrl);
          oprot.writeFieldEnd();
        }
        if (struct.newData != null) {
          oprot.writeFieldBegin(NEW_DATA_FIELD_DESC);
          oprot.writeBinary(struct.newData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceFileContent_argsTupleSchemeFactory implements SchemeFactory {
      public replaceFileContent_argsTupleScheme getScheme() {
        return new replaceFileContent_argsTupleScheme();
      }
    }

    private static class replaceFileContent_argsTupleScheme extends TupleScheme<replaceFileContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldUrl()) {
          optionals.set(0);
        }
        if (struct.isSetNewData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldUrl()) {
          oprot.writeString(struct.oldUrl);
        }
        if (struct.isSetNewData()) {
          oprot.writeBinary(struct.newData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceFileContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldUrl = iprot.readString();
          struct.setOldUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newData = iprot.readBinary();
          struct.setNewDataIsSet(true);
        }
      }
    }

  }

  public static class replaceFileContent_result implements org.apache.thrift.TBase<replaceFileContent_result, replaceFileContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<replaceFileContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceFileContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceFileContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceFileContent_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceFileContent_result.class, metaDataMap);
    }

    public replaceFileContent_result() {
    }

    public replaceFileContent_result(
      String success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceFileContent_result(replaceFileContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public replaceFileContent_result deepCopy() {
      return new replaceFileContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public replaceFileContent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public replaceFileContent_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceFileContent_result)
        return this.equals((replaceFileContent_result)that);
      return false;
    }

    public boolean equals(replaceFileContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replaceFileContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceFileContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceFileContent_resultStandardSchemeFactory implements SchemeFactory {
      public replaceFileContent_resultStandardScheme getScheme() {
        return new replaceFileContent_resultStandardScheme();
      }
    }

    private static class replaceFileContent_resultStandardScheme extends StandardScheme<replaceFileContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceFileContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceFileContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceFileContent_resultTupleSchemeFactory implements SchemeFactory {
      public replaceFileContent_resultTupleScheme getScheme() {
        return new replaceFileContent_resultTupleScheme();
      }
    }

    private static class replaceFileContent_resultTupleScheme extends TupleScheme<replaceFileContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceFileContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_args implements org.apache.thrift.TBase<deleteFile_args, deleteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_args");

    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_argsTupleSchemeFactory());
    }

    public String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URL((short)1, "url");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_args.class, metaDataMap);
    }

    public deleteFile_args() {
    }

    public deleteFile_args(
      String url)
    {
      this();
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_args(deleteFile_args other) {
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    public deleteFile_args deepCopy() {
      return new deleteFile_args(this);
    }

    @Override
    public void clear() {
      this.url = null;
    }

    public String getUrl() {
      return this.url;
    }

    public deleteFile_args setUrl(String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URL:
        return getUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URL:
        return isSetUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_args)
        return this.equals((deleteFile_args)that);
      return false;
    }

    public boolean equals(deleteFile_args that) {
      if (that == null)
        return false;

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_args(");
      boolean first = true;

      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFile_argsStandardScheme getScheme() {
        return new deleteFile_argsStandardScheme();
      }
    }

    private static class deleteFile_argsStandardScheme extends StandardScheme<deleteFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFile_argsTupleScheme getScheme() {
        return new deleteFile_argsTupleScheme();
      }
    }

    private static class deleteFile_argsTupleScheme extends TupleScheme<deleteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUrl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_result implements org.apache.thrift.TBase<deleteFile_result, deleteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_result.class, metaDataMap);
    }

    public deleteFile_result() {
    }

    public deleteFile_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_result(deleteFile_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public deleteFile_result deepCopy() {
      return new deleteFile_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public deleteFile_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_result)
        return this.equals((deleteFile_result)that);
      return false;
    }

    public boolean equals(deleteFile_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFile_resultStandardScheme getScheme() {
        return new deleteFile_resultStandardScheme();
      }
    }

    private static class deleteFile_resultStandardScheme extends StandardScheme<deleteFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFile_resultTupleScheme getScheme() {
        return new deleteFile_resultTupleScheme();
      }
    }

    private static class deleteFile_resultTupleScheme extends TupleScheme<deleteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
