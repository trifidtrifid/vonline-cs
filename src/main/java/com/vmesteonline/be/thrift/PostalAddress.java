/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PostalAddress implements org.apache.thrift.TBase<PostalAddress, PostalAddress._Fields>, java.io.Serializable, Cloneable, Comparable<PostalAddress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostalAddress");

  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BUILDING_FIELD_DESC = new org.apache.thrift.protocol.TField("building", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STAIRCASE_FIELD_DESC = new org.apache.thrift.protocol.TField("staircase", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("floor", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField FLAT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("flatNo", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PostalAddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PostalAddressTupleSchemeFactory());
  }

  public Country country; // required
  public City city; // required
  public Street street; // required
  public Building building; // required
  public byte staircase; // required
  public byte floor; // required
  public int flatNo; // required
  public String comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNTRY((short)1, "country"),
    CITY((short)2, "city"),
    STREET((short)3, "street"),
    BUILDING((short)4, "building"),
    STAIRCASE((short)5, "staircase"),
    FLOOR((short)6, "floor"),
    FLAT_NO((short)7, "flatNo"),
    COMMENT((short)8, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNTRY
          return COUNTRY;
        case 2: // CITY
          return CITY;
        case 3: // STREET
          return STREET;
        case 4: // BUILDING
          return BUILDING;
        case 5: // STAIRCASE
          return STAIRCASE;
        case 6: // FLOOR
          return FLOOR;
        case 7: // FLAT_NO
          return FLAT_NO;
        case 8: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAIRCASE_ISSET_ID = 0;
  private static final int __FLOOR_ISSET_ID = 1;
  private static final int __FLATNO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Country.class)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, City.class)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Street.class)));
    tmpMap.put(_Fields.BUILDING, new org.apache.thrift.meta_data.FieldMetaData("building", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Building.class)));
    tmpMap.put(_Fields.STAIRCASE, new org.apache.thrift.meta_data.FieldMetaData("staircase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FLOOR, new org.apache.thrift.meta_data.FieldMetaData("floor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FLAT_NO, new org.apache.thrift.meta_data.FieldMetaData("flatNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostalAddress.class, metaDataMap);
  }

  public PostalAddress() {
  }

  public PostalAddress(
    Country country,
    City city,
    Street street,
    Building building,
    byte staircase,
    byte floor,
    int flatNo,
    String comment)
  {
    this();
    this.country = country;
    this.city = city;
    this.street = street;
    this.building = building;
    this.staircase = staircase;
    setStaircaseIsSet(true);
    this.floor = floor;
    setFloorIsSet(true);
    this.flatNo = flatNo;
    setFlatNoIsSet(true);
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostalAddress(PostalAddress other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCountry()) {
      this.country = new Country(other.country);
    }
    if (other.isSetCity()) {
      this.city = new City(other.city);
    }
    if (other.isSetStreet()) {
      this.street = new Street(other.street);
    }
    if (other.isSetBuilding()) {
      this.building = new Building(other.building);
    }
    this.staircase = other.staircase;
    this.floor = other.floor;
    this.flatNo = other.flatNo;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public PostalAddress deepCopy() {
    return new PostalAddress(this);
  }

  @Override
  public void clear() {
    this.country = null;
    this.city = null;
    this.street = null;
    this.building = null;
    setStaircaseIsSet(false);
    this.staircase = 0;
    setFloorIsSet(false);
    this.floor = 0;
    setFlatNoIsSet(false);
    this.flatNo = 0;
    this.comment = null;
  }

  public Country getCountry() {
    return this.country;
  }

  public PostalAddress setCountry(Country country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public City getCity() {
    return this.city;
  }

  public PostalAddress setCity(City city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public Street getStreet() {
    return this.street;
  }

  public PostalAddress setStreet(Street street) {
    this.street = street;
    return this;
  }

  public void unsetStreet() {
    this.street = null;
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return this.street != null;
  }

  public void setStreetIsSet(boolean value) {
    if (!value) {
      this.street = null;
    }
  }

  public Building getBuilding() {
    return this.building;
  }

  public PostalAddress setBuilding(Building building) {
    this.building = building;
    return this;
  }

  public void unsetBuilding() {
    this.building = null;
  }

  /** Returns true if field building is set (has been assigned a value) and false otherwise */
  public boolean isSetBuilding() {
    return this.building != null;
  }

  public void setBuildingIsSet(boolean value) {
    if (!value) {
      this.building = null;
    }
  }

  public byte getStaircase() {
    return this.staircase;
  }

  public PostalAddress setStaircase(byte staircase) {
    this.staircase = staircase;
    setStaircaseIsSet(true);
    return this;
  }

  public void unsetStaircase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAIRCASE_ISSET_ID);
  }

  /** Returns true if field staircase is set (has been assigned a value) and false otherwise */
  public boolean isSetStaircase() {
    return EncodingUtils.testBit(__isset_bitfield, __STAIRCASE_ISSET_ID);
  }

  public void setStaircaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAIRCASE_ISSET_ID, value);
  }

  public byte getFloor() {
    return this.floor;
  }

  public PostalAddress setFloor(byte floor) {
    this.floor = floor;
    setFloorIsSet(true);
    return this;
  }

  public void unsetFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOOR_ISSET_ID);
  }

  /** Returns true if field floor is set (has been assigned a value) and false otherwise */
  public boolean isSetFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOOR_ISSET_ID);
  }

  public void setFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOOR_ISSET_ID, value);
  }

  public int getFlatNo() {
    return this.flatNo;
  }

  public PostalAddress setFlatNo(int flatNo) {
    this.flatNo = flatNo;
    setFlatNoIsSet(true);
    return this;
  }

  public void unsetFlatNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLATNO_ISSET_ID);
  }

  /** Returns true if field flatNo is set (has been assigned a value) and false otherwise */
  public boolean isSetFlatNo() {
    return EncodingUtils.testBit(__isset_bitfield, __FLATNO_ISSET_ID);
  }

  public void setFlatNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLATNO_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public PostalAddress setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((Country)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((City)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((Street)value);
      }
      break;

    case BUILDING:
      if (value == null) {
        unsetBuilding();
      } else {
        setBuilding((Building)value);
      }
      break;

    case STAIRCASE:
      if (value == null) {
        unsetStaircase();
      } else {
        setStaircase((Byte)value);
      }
      break;

    case FLOOR:
      if (value == null) {
        unsetFloor();
      } else {
        setFloor((Byte)value);
      }
      break;

    case FLAT_NO:
      if (value == null) {
        unsetFlatNo();
      } else {
        setFlatNo((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNTRY:
      return getCountry();

    case CITY:
      return getCity();

    case STREET:
      return getStreet();

    case BUILDING:
      return getBuilding();

    case STAIRCASE:
      return Byte.valueOf(getStaircase());

    case FLOOR:
      return Byte.valueOf(getFloor());

    case FLAT_NO:
      return Integer.valueOf(getFlatNo());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNTRY:
      return isSetCountry();
    case CITY:
      return isSetCity();
    case STREET:
      return isSetStreet();
    case BUILDING:
      return isSetBuilding();
    case STAIRCASE:
      return isSetStaircase();
    case FLOOR:
      return isSetFloor();
    case FLAT_NO:
      return isSetFlatNo();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PostalAddress)
      return this.equals((PostalAddress)that);
    return false;
  }

  public boolean equals(PostalAddress that) {
    if (that == null)
      return false;

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_street = true && this.isSetStreet();
    boolean that_present_street = true && that.isSetStreet();
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (!this.street.equals(that.street))
        return false;
    }

    boolean this_present_building = true && this.isSetBuilding();
    boolean that_present_building = true && that.isSetBuilding();
    if (this_present_building || that_present_building) {
      if (!(this_present_building && that_present_building))
        return false;
      if (!this.building.equals(that.building))
        return false;
    }

    boolean this_present_staircase = true;
    boolean that_present_staircase = true;
    if (this_present_staircase || that_present_staircase) {
      if (!(this_present_staircase && that_present_staircase))
        return false;
      if (this.staircase != that.staircase)
        return false;
    }

    boolean this_present_floor = true;
    boolean that_present_floor = true;
    if (this_present_floor || that_present_floor) {
      if (!(this_present_floor && that_present_floor))
        return false;
      if (this.floor != that.floor)
        return false;
    }

    boolean this_present_flatNo = true;
    boolean that_present_flatNo = true;
    if (this_present_flatNo || that_present_flatNo) {
      if (!(this_present_flatNo && that_present_flatNo))
        return false;
      if (this.flatNo != that.flatNo)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PostalAddress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreet()).compareTo(other.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, other.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuilding()).compareTo(other.isSetBuilding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuilding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.building, other.building);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaircase()).compareTo(other.isSetStaircase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaircase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staircase, other.staircase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloor()).compareTo(other.isSetFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floor, other.floor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlatNo()).compareTo(other.isSetFlatNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlatNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flatNo, other.flatNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostalAddress(");
    boolean first = true;

    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("street:");
    if (this.street == null) {
      sb.append("null");
    } else {
      sb.append(this.street);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("building:");
    if (this.building == null) {
      sb.append("null");
    } else {
      sb.append(this.building);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("staircase:");
    sb.append(this.staircase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("floor:");
    sb.append(this.floor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flatNo:");
    sb.append(this.flatNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (country != null) {
      country.validate();
    }
    if (city != null) {
      city.validate();
    }
    if (street != null) {
      street.validate();
    }
    if (building != null) {
      building.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostalAddressStandardSchemeFactory implements SchemeFactory {
    public PostalAddressStandardScheme getScheme() {
      return new PostalAddressStandardScheme();
    }
  }

  private static class PostalAddressStandardScheme extends StandardScheme<PostalAddress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PostalAddress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.country = new Country();
              struct.country.read(iprot);
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.city = new City();
              struct.city.read(iprot);
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.street = new Street();
              struct.street.read(iprot);
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUILDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.building = new Building();
              struct.building.read(iprot);
              struct.setBuildingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STAIRCASE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.staircase = iprot.readByte();
              struct.setStaircaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.floor = iprot.readByte();
              struct.setFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flatNo = iprot.readI32();
              struct.setFlatNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PostalAddress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        struct.country.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        struct.city.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.street != null) {
        oprot.writeFieldBegin(STREET_FIELD_DESC);
        struct.street.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.building != null) {
        oprot.writeFieldBegin(BUILDING_FIELD_DESC);
        struct.building.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAIRCASE_FIELD_DESC);
      oprot.writeByte(struct.staircase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOOR_FIELD_DESC);
      oprot.writeByte(struct.floor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAT_NO_FIELD_DESC);
      oprot.writeI32(struct.flatNo);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostalAddressTupleSchemeFactory implements SchemeFactory {
    public PostalAddressTupleScheme getScheme() {
      return new PostalAddressTupleScheme();
    }
  }

  private static class PostalAddressTupleScheme extends TupleScheme<PostalAddress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PostalAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCountry()) {
        optionals.set(0);
      }
      if (struct.isSetCity()) {
        optionals.set(1);
      }
      if (struct.isSetStreet()) {
        optionals.set(2);
      }
      if (struct.isSetBuilding()) {
        optionals.set(3);
      }
      if (struct.isSetStaircase()) {
        optionals.set(4);
      }
      if (struct.isSetFloor()) {
        optionals.set(5);
      }
      if (struct.isSetFlatNo()) {
        optionals.set(6);
      }
      if (struct.isSetComment()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCountry()) {
        struct.country.write(oprot);
      }
      if (struct.isSetCity()) {
        struct.city.write(oprot);
      }
      if (struct.isSetStreet()) {
        struct.street.write(oprot);
      }
      if (struct.isSetBuilding()) {
        struct.building.write(oprot);
      }
      if (struct.isSetStaircase()) {
        oprot.writeByte(struct.staircase);
      }
      if (struct.isSetFloor()) {
        oprot.writeByte(struct.floor);
      }
      if (struct.isSetFlatNo()) {
        oprot.writeI32(struct.flatNo);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PostalAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.country = new Country();
        struct.country.read(iprot);
        struct.setCountryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.city = new City();
        struct.city.read(iprot);
        struct.setCityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.street = new Street();
        struct.street.read(iprot);
        struct.setStreetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.building = new Building();
        struct.building.read(iprot);
        struct.setBuildingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.staircase = iprot.readByte();
        struct.setStaircaseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.floor = iprot.readByte();
        struct.setFloorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flatNo = iprot.readI32();
        struct.setFlatNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}

