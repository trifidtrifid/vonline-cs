/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatrixAsList implements org.apache.thrift.TBase<MatrixAsList, MatrixAsList._Fields>, java.io.Serializable, Cloneable, Comparable<MatrixAsList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatrixAsList");

  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ELEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("elems", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatrixAsListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatrixAsListTupleSchemeFactory());
  }

  public int rowCount; // required
  public List<String> elems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW_COUNT((short)1, "rowCount"),
    ELEMS((short)2, "elems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW_COUNT
          return ROW_COUNT;
        case 2: // ELEMS
          return ELEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMS, new org.apache.thrift.meta_data.FieldMetaData("elems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatrixAsList.class, metaDataMap);
  }

  public MatrixAsList() {
  }

  public MatrixAsList(
    int rowCount,
    List<String> elems)
  {
    this();
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    this.elems = elems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatrixAsList(MatrixAsList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rowCount = other.rowCount;
    if (other.isSetElems()) {
      List<String> __this__elems = new ArrayList<String>(other.elems);
      this.elems = __this__elems;
    }
  }

  public MatrixAsList deepCopy() {
    return new MatrixAsList(this);
  }

  @Override
  public void clear() {
    setRowCountIsSet(false);
    this.rowCount = 0;
    this.elems = null;
  }

  public int getRowCount() {
    return this.rowCount;
  }

  public MatrixAsList setRowCount(int rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public int getElemsSize() {
    return (this.elems == null) ? 0 : this.elems.size();
  }

  public java.util.Iterator<String> getElemsIterator() {
    return (this.elems == null) ? null : this.elems.iterator();
  }

  public void addToElems(String elem) {
    if (this.elems == null) {
      this.elems = new ArrayList<String>();
    }
    this.elems.add(elem);
  }

  public List<String> getElems() {
    return this.elems;
  }

  public MatrixAsList setElems(List<String> elems) {
    this.elems = elems;
    return this;
  }

  public void unsetElems() {
    this.elems = null;
  }

  /** Returns true if field elems is set (has been assigned a value) and false otherwise */
  public boolean isSetElems() {
    return this.elems != null;
  }

  public void setElemsIsSet(boolean value) {
    if (!value) {
      this.elems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((Integer)value);
      }
      break;

    case ELEMS:
      if (value == null) {
        unsetElems();
      } else {
        setElems((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_COUNT:
      return Integer.valueOf(getRowCount());

    case ELEMS:
      return getElems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROW_COUNT:
      return isSetRowCount();
    case ELEMS:
      return isSetElems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatrixAsList)
      return this.equals((MatrixAsList)that);
    return false;
  }

  public boolean equals(MatrixAsList that) {
    if (that == null)
      return false;

    boolean this_present_rowCount = true;
    boolean that_present_rowCount = true;
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_elems = true && this.isSetElems();
    boolean that_present_elems = true && that.isSetElems();
    if (this_present_elems || that_present_elems) {
      if (!(this_present_elems && that_present_elems))
        return false;
      if (!this.elems.equals(that.elems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MatrixAsList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRowCount()).compareTo(other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElems()).compareTo(other.isSetElems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elems, other.elems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatrixAsList(");
    boolean first = true;

    sb.append("rowCount:");
    sb.append(this.rowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elems:");
    if (this.elems == null) {
      sb.append("null");
    } else {
      sb.append(this.elems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatrixAsListStandardSchemeFactory implements SchemeFactory {
    public MatrixAsListStandardScheme getScheme() {
      return new MatrixAsListStandardScheme();
    }
  }

  private static class MatrixAsListStandardScheme extends StandardScheme<MatrixAsList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatrixAsList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowCount = iprot.readI32();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ELEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.elems = new ArrayList<String>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  String _elem34;
                  _elem34 = iprot.readString();
                  struct.elems.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setElemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatrixAsList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.rowCount);
      oprot.writeFieldEnd();
      if (struct.elems != null) {
        oprot.writeFieldBegin(ELEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.elems.size()));
          for (String _iter35 : struct.elems)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatrixAsListTupleSchemeFactory implements SchemeFactory {
    public MatrixAsListTupleScheme getScheme() {
      return new MatrixAsListTupleScheme();
    }
  }

  private static class MatrixAsListTupleScheme extends TupleScheme<MatrixAsList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatrixAsList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRowCount()) {
        optionals.set(0);
      }
      if (struct.isSetElems()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRowCount()) {
        oprot.writeI32(struct.rowCount);
      }
      if (struct.isSetElems()) {
        {
          oprot.writeI32(struct.elems.size());
          for (String _iter36 : struct.elems)
          {
            oprot.writeString(_iter36);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatrixAsList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.rowCount = iprot.readI32();
        struct.setRowCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.elems = new ArrayList<String>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            String _elem39;
            _elem39 = iprot.readString();
            struct.elems.add(_elem39);
          }
        }
        struct.setElemsIsSet(true);
      }
    }
  }

}

