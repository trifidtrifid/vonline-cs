/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.messageservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageService {

  public interface Iface {

    public void sendInfoEmail(String email, String name, String content) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public List<WallItem> getWallItems(long groupId, long lastLoadedIdTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    /**
     * Cоздание нового или обновление старого сообщения
     * 
     * 
     * @param msg
     */
    public Message postMessage(Message msg) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Message deleteMessage(long msgId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Poll doPoll(long pollId, int item) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Topic postTopic(Topic topic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Topic deleteTopic(long topicId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    /**
     * checkUpdates запрашивает наличие обновлений с момента предыдущего запроса, который возвращает сервер в ответе
     * если обновлений нет - в ответ приходит новое значение таймстампа формирования ответа на сервере.
     * При наличии обновлений возвращается 0
     * 
     * 
     * @param lastResposeTimestamp
     */
    public int checkUpdates(int lastResposeTimestamp) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Map<Long,Integer> getDialogUpdates() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public TopicListPart getBlog(long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Message postBlogMessage(Message msg) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public TopicListPart getAdverts(long groupId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public TopicListPart getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public TopicListPart getImportantTopics(long groupId, long rubricId, int commmunityId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    /**
     * Загрузка части преставления дерева сообщений в виде дерева. parentID указывает на сообщение топика или на сообщение первого уровня
     * 
     * 
     * @param topicId
     * @param groupId
     * @param messageType
     * @param lastLoadedId
     * @param archived
     * @param length
     */
    public MessageListPart getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public MessageListPart getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public MessageListPart getMessagesAsList(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public int markMessageImportant(long messageId, boolean isImportant) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public int markMessageLike(long messageId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendInfoEmail(String email, String name, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWallItems(long groupId, long lastLoadedIdTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMessage(long msgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doPoll(long pollId, int item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postTopic(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTopic(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkUpdates(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDialogUpdates(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBlog(long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postBlogMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAdverts(long groupId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getImportantTopics(long groupId, long rubricId, int commmunityId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessagesAsList(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markMessageImportant(long messageId, boolean isImportant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markMessageLike(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendInfoEmail(String email, String name, String content) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_sendInfoEmail(email, name, content);
      recv_sendInfoEmail();
    }

    public void send_sendInfoEmail(String email, String name, String content) throws org.apache.thrift.TException
    {
      sendInfoEmail_args args = new sendInfoEmail_args();
      args.setEmail(email);
      args.setName(name);
      args.setContent(content);
      sendBase("sendInfoEmail", args);
    }

    public void recv_sendInfoEmail() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      sendInfoEmail_result result = new sendInfoEmail_result();
      receiveBase(result, "sendInfoEmail");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public List<WallItem> getWallItems(long groupId, long lastLoadedIdTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getWallItems(groupId, lastLoadedIdTopicId, length);
      return recv_getWallItems();
    }

    public void send_getWallItems(long groupId, long lastLoadedIdTopicId, int length) throws org.apache.thrift.TException
    {
      getWallItems_args args = new getWallItems_args();
      args.setGroupId(groupId);
      args.setLastLoadedIdTopicId(lastLoadedIdTopicId);
      args.setLength(length);
      sendBase("getWallItems", args);
    }

    public List<WallItem> recv_getWallItems() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getWallItems_result result = new getWallItems_result();
      receiveBase(result, "getWallItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWallItems failed: unknown result");
    }

    public Message postMessage(Message msg) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_postMessage(msg);
      return recv_postMessage();
    }

    public void send_postMessage(Message msg) throws org.apache.thrift.TException
    {
      postMessage_args args = new postMessage_args();
      args.setMsg(msg);
      sendBase("postMessage", args);
    }

    public Message recv_postMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      postMessage_result result = new postMessage_result();
      receiveBase(result, "postMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postMessage failed: unknown result");
    }

    public Message deleteMessage(long msgId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_deleteMessage(msgId);
      return recv_deleteMessage();
    }

    public void send_deleteMessage(long msgId) throws org.apache.thrift.TException
    {
      deleteMessage_args args = new deleteMessage_args();
      args.setMsgId(msgId);
      sendBase("deleteMessage", args);
    }

    public Message recv_deleteMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      deleteMessage_result result = new deleteMessage_result();
      receiveBase(result, "deleteMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMessage failed: unknown result");
    }

    public Poll doPoll(long pollId, int item) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_doPoll(pollId, item);
      return recv_doPoll();
    }

    public void send_doPoll(long pollId, int item) throws org.apache.thrift.TException
    {
      doPoll_args args = new doPoll_args();
      args.setPollId(pollId);
      args.setItem(item);
      sendBase("doPoll", args);
    }

    public Poll recv_doPoll() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      doPoll_result result = new doPoll_result();
      receiveBase(result, "doPoll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doPoll failed: unknown result");
    }

    public Topic postTopic(Topic topic) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_postTopic(topic);
      return recv_postTopic();
    }

    public void send_postTopic(Topic topic) throws org.apache.thrift.TException
    {
      postTopic_args args = new postTopic_args();
      args.setTopic(topic);
      sendBase("postTopic", args);
    }

    public Topic recv_postTopic() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      postTopic_result result = new postTopic_result();
      receiveBase(result, "postTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postTopic failed: unknown result");
    }

    public Topic deleteTopic(long topicId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_deleteTopic(topicId);
      return recv_deleteTopic();
    }

    public void send_deleteTopic(long topicId) throws org.apache.thrift.TException
    {
      deleteTopic_args args = new deleteTopic_args();
      args.setTopicId(topicId);
      sendBase("deleteTopic", args);
    }

    public Topic recv_deleteTopic() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      deleteTopic_result result = new deleteTopic_result();
      receiveBase(result, "deleteTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTopic failed: unknown result");
    }

    public int checkUpdates(int lastResposeTimestamp) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_checkUpdates(lastResposeTimestamp);
      return recv_checkUpdates();
    }

    public void send_checkUpdates(int lastResposeTimestamp) throws org.apache.thrift.TException
    {
      checkUpdates_args args = new checkUpdates_args();
      args.setLastResposeTimestamp(lastResposeTimestamp);
      sendBase("checkUpdates", args);
    }

    public int recv_checkUpdates() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      checkUpdates_result result = new checkUpdates_result();
      receiveBase(result, "checkUpdates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUpdates failed: unknown result");
    }

    public Map<Long,Integer> getDialogUpdates() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getDialogUpdates();
      return recv_getDialogUpdates();
    }

    public void send_getDialogUpdates() throws org.apache.thrift.TException
    {
      getDialogUpdates_args args = new getDialogUpdates_args();
      sendBase("getDialogUpdates", args);
    }

    public Map<Long,Integer> recv_getDialogUpdates() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getDialogUpdates_result result = new getDialogUpdates_result();
      receiveBase(result, "getDialogUpdates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDialogUpdates failed: unknown result");
    }

    public TopicListPart getBlog(long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getBlog(lastLoadedTopicId, length);
      return recv_getBlog();
    }

    public void send_getBlog(long lastLoadedTopicId, int length) throws org.apache.thrift.TException
    {
      getBlog_args args = new getBlog_args();
      args.setLastLoadedTopicId(lastLoadedTopicId);
      args.setLength(length);
      sendBase("getBlog", args);
    }

    public TopicListPart recv_getBlog() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getBlog_result result = new getBlog_result();
      receiveBase(result, "getBlog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlog failed: unknown result");
    }

    public Message postBlogMessage(Message msg) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_postBlogMessage(msg);
      return recv_postBlogMessage();
    }

    public void send_postBlogMessage(Message msg) throws org.apache.thrift.TException
    {
      postBlogMessage_args args = new postBlogMessage_args();
      args.setMsg(msg);
      sendBase("postBlogMessage", args);
    }

    public Message recv_postBlogMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      postBlogMessage_result result = new postBlogMessage_result();
      receiveBase(result, "postBlogMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postBlogMessage failed: unknown result");
    }

    public TopicListPart getAdverts(long groupId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getAdverts(groupId, lastLoadedTopicId, length);
      return recv_getAdverts();
    }

    public void send_getAdverts(long groupId, long lastLoadedTopicId, int length) throws org.apache.thrift.TException
    {
      getAdverts_args args = new getAdverts_args();
      args.setGroupId(groupId);
      args.setLastLoadedTopicId(lastLoadedTopicId);
      args.setLength(length);
      sendBase("getAdverts", args);
    }

    public TopicListPart recv_getAdverts() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getAdverts_result result = new getAdverts_result();
      receiveBase(result, "getAdverts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdverts failed: unknown result");
    }

    public TopicListPart getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getTopics(groupId, rubricId, commmunityId, lastLoadedTopicId, length);
      return recv_getTopics();
    }

    public void send_getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws org.apache.thrift.TException
    {
      getTopics_args args = new getTopics_args();
      args.setGroupId(groupId);
      args.setRubricId(rubricId);
      args.setCommmunityId(commmunityId);
      args.setLastLoadedTopicId(lastLoadedTopicId);
      args.setLength(length);
      sendBase("getTopics", args);
    }

    public TopicListPart recv_getTopics() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getTopics_result result = new getTopics_result();
      receiveBase(result, "getTopics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopics failed: unknown result");
    }

    public TopicListPart getImportantTopics(long groupId, long rubricId, int commmunityId, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getImportantTopics(groupId, rubricId, commmunityId, length);
      return recv_getImportantTopics();
    }

    public void send_getImportantTopics(long groupId, long rubricId, int commmunityId, int length) throws org.apache.thrift.TException
    {
      getImportantTopics_args args = new getImportantTopics_args();
      args.setGroupId(groupId);
      args.setRubricId(rubricId);
      args.setCommmunityId(commmunityId);
      args.setLength(length);
      sendBase("getImportantTopics", args);
    }

    public TopicListPart recv_getImportantTopics() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getImportantTopics_result result = new getImportantTopics_result();
      receiveBase(result, "getImportantTopics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImportantTopics failed: unknown result");
    }

    public MessageListPart getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getMessages(topicId, groupId, messageType, lastLoadedId, archived, length);
      return recv_getMessages();
    }

    public void send_getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws org.apache.thrift.TException
    {
      getMessages_args args = new getMessages_args();
      args.setTopicId(topicId);
      args.setGroupId(groupId);
      args.setMessageType(messageType);
      args.setLastLoadedId(lastLoadedId);
      args.setArchived(archived);
      args.setLength(length);
      sendBase("getMessages", args);
    }

    public MessageListPart recv_getMessages() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getMessages_result result = new getMessages_result();
      receiveBase(result, "getMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessages failed: unknown result");
    }

    public MessageListPart getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getFirstLevelMessages(topicId, groupId, messageType, lastLoadedId, archived, length);
      return recv_getFirstLevelMessages();
    }

    public void send_getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws org.apache.thrift.TException
    {
      getFirstLevelMessages_args args = new getFirstLevelMessages_args();
      args.setTopicId(topicId);
      args.setGroupId(groupId);
      args.setMessageType(messageType);
      args.setLastLoadedId(lastLoadedId);
      args.setArchived(archived);
      args.setLength(length);
      sendBase("getFirstLevelMessages", args);
    }

    public MessageListPart recv_getFirstLevelMessages() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getFirstLevelMessages_result result = new getFirstLevelMessages_result();
      receiveBase(result, "getFirstLevelMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFirstLevelMessages failed: unknown result");
    }

    public MessageListPart getMessagesAsList(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getMessagesAsList(topicId, messageType, lastLoadedId, archived, length);
      return recv_getMessagesAsList();
    }

    public void send_getMessagesAsList(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws org.apache.thrift.TException
    {
      getMessagesAsList_args args = new getMessagesAsList_args();
      args.setTopicId(topicId);
      args.setMessageType(messageType);
      args.setLastLoadedId(lastLoadedId);
      args.setArchived(archived);
      args.setLength(length);
      sendBase("getMessagesAsList", args);
    }

    public MessageListPart recv_getMessagesAsList() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getMessagesAsList_result result = new getMessagesAsList_result();
      receiveBase(result, "getMessagesAsList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessagesAsList failed: unknown result");
    }

    public int markMessageImportant(long messageId, boolean isImportant) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_markMessageImportant(messageId, isImportant);
      return recv_markMessageImportant();
    }

    public void send_markMessageImportant(long messageId, boolean isImportant) throws org.apache.thrift.TException
    {
      markMessageImportant_args args = new markMessageImportant_args();
      args.setMessageId(messageId);
      args.setIsImportant(isImportant);
      sendBase("markMessageImportant", args);
    }

    public int recv_markMessageImportant() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      markMessageImportant_result result = new markMessageImportant_result();
      receiveBase(result, "markMessageImportant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markMessageImportant failed: unknown result");
    }

    public int markMessageLike(long messageId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_markMessageLike(messageId);
      return recv_markMessageLike();
    }

    public void send_markMessageLike(long messageId) throws org.apache.thrift.TException
    {
      markMessageLike_args args = new markMessageLike_args();
      args.setMessageId(messageId);
      sendBase("markMessageLike", args);
    }

    public int recv_markMessageLike() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      markMessageLike_result result = new markMessageLike_result();
      receiveBase(result, "markMessageLike");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markMessageLike failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendInfoEmail(String email, String name, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendInfoEmail_call method_call = new sendInfoEmail_call(email, name, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendInfoEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      private String name;
      private String content;
      public sendInfoEmail_call(String email, String name, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.name = name;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendInfoEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendInfoEmail_args args = new sendInfoEmail_args();
        args.setEmail(email);
        args.setName(name);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendInfoEmail();
      }
    }

    public void getWallItems(long groupId, long lastLoadedIdTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWallItems_call method_call = new getWallItems_call(groupId, lastLoadedIdTopicId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWallItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private long lastLoadedIdTopicId;
      private int length;
      public getWallItems_call(long groupId, long lastLoadedIdTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.lastLoadedIdTopicId = lastLoadedIdTopicId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWallItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWallItems_args args = new getWallItems_args();
        args.setGroupId(groupId);
        args.setLastLoadedIdTopicId(lastLoadedIdTopicId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WallItem> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWallItems();
      }
    }

    public void postMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postMessage_call method_call = new postMessage_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Message msg;
      public postMessage_call(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postMessage_args args = new postMessage_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Message getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postMessage();
      }
    }

    public void deleteMessage(long msgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMessage_call method_call = new deleteMessage_call(msgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long msgId;
      public deleteMessage_call(long msgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgId = msgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMessage_args args = new deleteMessage_args();
        args.setMsgId(msgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Message getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMessage();
      }
    }

    public void doPoll(long pollId, int item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doPoll_call method_call = new doPoll_call(pollId, item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doPoll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pollId;
      private int item;
      public doPoll_call(long pollId, int item, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pollId = pollId;
        this.item = item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doPoll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doPoll_args args = new doPoll_args();
        args.setPollId(pollId);
        args.setItem(item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Poll getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doPoll();
      }
    }

    public void postTopic(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postTopic_call method_call = new postTopic_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Topic topic;
      public postTopic_call(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postTopic_args args = new postTopic_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Topic getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postTopic();
      }
    }

    public void deleteTopic(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTopic_call method_call = new deleteTopic_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      public deleteTopic_call(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTopic_args args = new deleteTopic_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Topic getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTopic();
      }
    }

    public void checkUpdates(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUpdates_call method_call = new checkUpdates_call(lastResposeTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUpdates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lastResposeTimestamp;
      public checkUpdates_call(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastResposeTimestamp = lastResposeTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUpdates_args args = new checkUpdates_args();
        args.setLastResposeTimestamp(lastResposeTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUpdates();
      }
    }

    public void getDialogUpdates(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDialogUpdates_call method_call = new getDialogUpdates_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDialogUpdates_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDialogUpdates_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDialogUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDialogUpdates_args args = new getDialogUpdates_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,Integer> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDialogUpdates();
      }
    }

    public void getBlog(long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlog_call method_call = new getBlog_call(lastLoadedTopicId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lastLoadedTopicId;
      private int length;
      public getBlog_call(long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastLoadedTopicId = lastLoadedTopicId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlog_args args = new getBlog_args();
        args.setLastLoadedTopicId(lastLoadedTopicId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopicListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlog();
      }
    }

    public void postBlogMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postBlogMessage_call method_call = new postBlogMessage_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postBlogMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Message msg;
      public postBlogMessage_call(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postBlogMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postBlogMessage_args args = new postBlogMessage_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Message getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postBlogMessage();
      }
    }

    public void getAdverts(long groupId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdverts_call method_call = new getAdverts_call(groupId, lastLoadedTopicId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdverts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private long lastLoadedTopicId;
      private int length;
      public getAdverts_call(long groupId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.lastLoadedTopicId = lastLoadedTopicId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdverts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdverts_args args = new getAdverts_args();
        args.setGroupId(groupId);
        args.setLastLoadedTopicId(lastLoadedTopicId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopicListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdverts();
      }
    }

    public void getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopics_call method_call = new getTopics_call(groupId, rubricId, commmunityId, lastLoadedTopicId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private long rubricId;
      private int commmunityId;
      private long lastLoadedTopicId;
      private int length;
      public getTopics_call(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.rubricId = rubricId;
        this.commmunityId = commmunityId;
        this.lastLoadedTopicId = lastLoadedTopicId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopics_args args = new getTopics_args();
        args.setGroupId(groupId);
        args.setRubricId(rubricId);
        args.setCommmunityId(commmunityId);
        args.setLastLoadedTopicId(lastLoadedTopicId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopicListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopics();
      }
    }

    public void getImportantTopics(long groupId, long rubricId, int commmunityId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImportantTopics_call method_call = new getImportantTopics_call(groupId, rubricId, commmunityId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImportantTopics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private long rubricId;
      private int commmunityId;
      private int length;
      public getImportantTopics_call(long groupId, long rubricId, int commmunityId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.rubricId = rubricId;
        this.commmunityId = commmunityId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImportantTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImportantTopics_args args = new getImportantTopics_args();
        args.setGroupId(groupId);
        args.setRubricId(rubricId);
        args.setCommmunityId(commmunityId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopicListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImportantTopics();
      }
    }

    public void getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessages_call method_call = new getMessages_call(topicId, groupId, messageType, lastLoadedId, archived, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private long groupId;
      private MessageType messageType;
      private long lastLoadedId;
      private boolean archived;
      private int length;
      public getMessages_call(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.groupId = groupId;
        this.messageType = messageType;
        this.lastLoadedId = lastLoadedId;
        this.archived = archived;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessages_args args = new getMessages_args();
        args.setTopicId(topicId);
        args.setGroupId(groupId);
        args.setMessageType(messageType);
        args.setLastLoadedId(lastLoadedId);
        args.setArchived(archived);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessages();
      }
    }

    public void getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFirstLevelMessages_call method_call = new getFirstLevelMessages_call(topicId, groupId, messageType, lastLoadedId, archived, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFirstLevelMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private long groupId;
      private MessageType messageType;
      private long lastLoadedId;
      private boolean archived;
      private int length;
      public getFirstLevelMessages_call(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.groupId = groupId;
        this.messageType = messageType;
        this.lastLoadedId = lastLoadedId;
        this.archived = archived;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFirstLevelMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFirstLevelMessages_args args = new getFirstLevelMessages_args();
        args.setTopicId(topicId);
        args.setGroupId(groupId);
        args.setMessageType(messageType);
        args.setLastLoadedId(lastLoadedId);
        args.setArchived(archived);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFirstLevelMessages();
      }
    }

    public void getMessagesAsList(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessagesAsList_call method_call = new getMessagesAsList_call(topicId, messageType, lastLoadedId, archived, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessagesAsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private MessageType messageType;
      private long lastLoadedId;
      private boolean archived;
      private int length;
      public getMessagesAsList_call(long topicId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.messageType = messageType;
        this.lastLoadedId = lastLoadedId;
        this.archived = archived;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessagesAsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessagesAsList_args args = new getMessagesAsList_args();
        args.setTopicId(topicId);
        args.setMessageType(messageType);
        args.setLastLoadedId(lastLoadedId);
        args.setArchived(archived);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageListPart getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessagesAsList();
      }
    }

    public void markMessageImportant(long messageId, boolean isImportant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markMessageImportant_call method_call = new markMessageImportant_call(messageId, isImportant, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markMessageImportant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      private boolean isImportant;
      public markMessageImportant_call(long messageId, boolean isImportant, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.isImportant = isImportant;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markMessageImportant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markMessageImportant_args args = new markMessageImportant_args();
        args.setMessageId(messageId);
        args.setIsImportant(isImportant);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markMessageImportant();
      }
    }

    public void markMessageLike(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markMessageLike_call method_call = new markMessageLike_call(messageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markMessageLike_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      public markMessageLike_call(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markMessageLike", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markMessageLike_args args = new markMessageLike_args();
        args.setMessageId(messageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markMessageLike();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendInfoEmail", new sendInfoEmail());
      processMap.put("getWallItems", new getWallItems());
      processMap.put("postMessage", new postMessage());
      processMap.put("deleteMessage", new deleteMessage());
      processMap.put("doPoll", new doPoll());
      processMap.put("postTopic", new postTopic());
      processMap.put("deleteTopic", new deleteTopic());
      processMap.put("checkUpdates", new checkUpdates());
      processMap.put("getDialogUpdates", new getDialogUpdates());
      processMap.put("getBlog", new getBlog());
      processMap.put("postBlogMessage", new postBlogMessage());
      processMap.put("getAdverts", new getAdverts());
      processMap.put("getTopics", new getTopics());
      processMap.put("getImportantTopics", new getImportantTopics());
      processMap.put("getMessages", new getMessages());
      processMap.put("getFirstLevelMessages", new getFirstLevelMessages());
      processMap.put("getMessagesAsList", new getMessagesAsList());
      processMap.put("markMessageImportant", new markMessageImportant());
      processMap.put("markMessageLike", new markMessageLike());
      return processMap;
    }

    public static class sendInfoEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendInfoEmail_args> {
      public sendInfoEmail() {
        super("sendInfoEmail");
      }

      public sendInfoEmail_args getEmptyArgsInstance() {
        return new sendInfoEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendInfoEmail_result getResult(I iface, sendInfoEmail_args args) throws org.apache.thrift.TException {
        sendInfoEmail_result result = new sendInfoEmail_result();
        try {
          iface.sendInfoEmail(args.email, args.name, args.content);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getWallItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWallItems_args> {
      public getWallItems() {
        super("getWallItems");
      }

      public getWallItems_args getEmptyArgsInstance() {
        return new getWallItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWallItems_result getResult(I iface, getWallItems_args args) throws org.apache.thrift.TException {
        getWallItems_result result = new getWallItems_result();
        try {
          result.success = iface.getWallItems(args.groupId, args.lastLoadedIdTopicId, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class postMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postMessage_args> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postMessage_result getResult(I iface, postMessage_args args) throws org.apache.thrift.TException {
        postMessage_result result = new postMessage_result();
        try {
          result.success = iface.postMessage(args.msg);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class deleteMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMessage_args> {
      public deleteMessage() {
        super("deleteMessage");
      }

      public deleteMessage_args getEmptyArgsInstance() {
        return new deleteMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMessage_result getResult(I iface, deleteMessage_args args) throws org.apache.thrift.TException {
        deleteMessage_result result = new deleteMessage_result();
        try {
          result.success = iface.deleteMessage(args.msgId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class doPoll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doPoll_args> {
      public doPoll() {
        super("doPoll");
      }

      public doPoll_args getEmptyArgsInstance() {
        return new doPoll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doPoll_result getResult(I iface, doPoll_args args) throws org.apache.thrift.TException {
        doPoll_result result = new doPoll_result();
        try {
          result.success = iface.doPoll(args.pollId, args.item);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class postTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postTopic_args> {
      public postTopic() {
        super("postTopic");
      }

      public postTopic_args getEmptyArgsInstance() {
        return new postTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postTopic_result getResult(I iface, postTopic_args args) throws org.apache.thrift.TException {
        postTopic_result result = new postTopic_result();
        try {
          result.success = iface.postTopic(args.topic);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class deleteTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTopic_args> {
      public deleteTopic() {
        super("deleteTopic");
      }

      public deleteTopic_args getEmptyArgsInstance() {
        return new deleteTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTopic_result getResult(I iface, deleteTopic_args args) throws org.apache.thrift.TException {
        deleteTopic_result result = new deleteTopic_result();
        try {
          result.success = iface.deleteTopic(args.topicId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class checkUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUpdates_args> {
      public checkUpdates() {
        super("checkUpdates");
      }

      public checkUpdates_args getEmptyArgsInstance() {
        return new checkUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUpdates_result getResult(I iface, checkUpdates_args args) throws org.apache.thrift.TException {
        checkUpdates_result result = new checkUpdates_result();
        try {
          result.success = iface.checkUpdates(args.lastResposeTimestamp);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getDialogUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDialogUpdates_args> {
      public getDialogUpdates() {
        super("getDialogUpdates");
      }

      public getDialogUpdates_args getEmptyArgsInstance() {
        return new getDialogUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDialogUpdates_result getResult(I iface, getDialogUpdates_args args) throws org.apache.thrift.TException {
        getDialogUpdates_result result = new getDialogUpdates_result();
        try {
          result.success = iface.getDialogUpdates();
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getBlog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlog_args> {
      public getBlog() {
        super("getBlog");
      }

      public getBlog_args getEmptyArgsInstance() {
        return new getBlog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBlog_result getResult(I iface, getBlog_args args) throws org.apache.thrift.TException {
        getBlog_result result = new getBlog_result();
        try {
          result.success = iface.getBlog(args.lastLoadedTopicId, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class postBlogMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postBlogMessage_args> {
      public postBlogMessage() {
        super("postBlogMessage");
      }

      public postBlogMessage_args getEmptyArgsInstance() {
        return new postBlogMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postBlogMessage_result getResult(I iface, postBlogMessage_args args) throws org.apache.thrift.TException {
        postBlogMessage_result result = new postBlogMessage_result();
        try {
          result.success = iface.postBlogMessage(args.msg);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getAdverts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdverts_args> {
      public getAdverts() {
        super("getAdverts");
      }

      public getAdverts_args getEmptyArgsInstance() {
        return new getAdverts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdverts_result getResult(I iface, getAdverts_args args) throws org.apache.thrift.TException {
        getAdverts_result result = new getAdverts_result();
        try {
          result.success = iface.getAdverts(args.groupId, args.lastLoadedTopicId, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopics_args> {
      public getTopics() {
        super("getTopics");
      }

      public getTopics_args getEmptyArgsInstance() {
        return new getTopics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopics_result getResult(I iface, getTopics_args args) throws org.apache.thrift.TException {
        getTopics_result result = new getTopics_result();
        try {
          result.success = iface.getTopics(args.groupId, args.rubricId, args.commmunityId, args.lastLoadedTopicId, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getImportantTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImportantTopics_args> {
      public getImportantTopics() {
        super("getImportantTopics");
      }

      public getImportantTopics_args getEmptyArgsInstance() {
        return new getImportantTopics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImportantTopics_result getResult(I iface, getImportantTopics_args args) throws org.apache.thrift.TException {
        getImportantTopics_result result = new getImportantTopics_result();
        try {
          result.success = iface.getImportantTopics(args.groupId, args.rubricId, args.commmunityId, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessages_args> {
      public getMessages() {
        super("getMessages");
      }

      public getMessages_args getEmptyArgsInstance() {
        return new getMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessages_result getResult(I iface, getMessages_args args) throws org.apache.thrift.TException {
        getMessages_result result = new getMessages_result();
        try {
          result.success = iface.getMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getFirstLevelMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFirstLevelMessages_args> {
      public getFirstLevelMessages() {
        super("getFirstLevelMessages");
      }

      public getFirstLevelMessages_args getEmptyArgsInstance() {
        return new getFirstLevelMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFirstLevelMessages_result getResult(I iface, getFirstLevelMessages_args args) throws org.apache.thrift.TException {
        getFirstLevelMessages_result result = new getFirstLevelMessages_result();
        try {
          result.success = iface.getFirstLevelMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getMessagesAsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessagesAsList_args> {
      public getMessagesAsList() {
        super("getMessagesAsList");
      }

      public getMessagesAsList_args getEmptyArgsInstance() {
        return new getMessagesAsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessagesAsList_result getResult(I iface, getMessagesAsList_args args) throws org.apache.thrift.TException {
        getMessagesAsList_result result = new getMessagesAsList_result();
        try {
          result.success = iface.getMessagesAsList(args.topicId, args.messageType, args.lastLoadedId, args.archived, args.length);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class markMessageImportant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markMessageImportant_args> {
      public markMessageImportant() {
        super("markMessageImportant");
      }

      public markMessageImportant_args getEmptyArgsInstance() {
        return new markMessageImportant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markMessageImportant_result getResult(I iface, markMessageImportant_args args) throws org.apache.thrift.TException {
        markMessageImportant_result result = new markMessageImportant_result();
        try {
          result.success = iface.markMessageImportant(args.messageId, args.isImportant);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class markMessageLike<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markMessageLike_args> {
      public markMessageLike() {
        super("markMessageLike");
      }

      public markMessageLike_args getEmptyArgsInstance() {
        return new markMessageLike_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markMessageLike_result getResult(I iface, markMessageLike_args args) throws org.apache.thrift.TException {
        markMessageLike_result result = new markMessageLike_result();
        try {
          result.success = iface.markMessageLike(args.messageId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendInfoEmail", new sendInfoEmail());
      processMap.put("getWallItems", new getWallItems());
      processMap.put("postMessage", new postMessage());
      processMap.put("deleteMessage", new deleteMessage());
      processMap.put("doPoll", new doPoll());
      processMap.put("postTopic", new postTopic());
      processMap.put("deleteTopic", new deleteTopic());
      processMap.put("checkUpdates", new checkUpdates());
      processMap.put("getDialogUpdates", new getDialogUpdates());
      processMap.put("getBlog", new getBlog());
      processMap.put("postBlogMessage", new postBlogMessage());
      processMap.put("getAdverts", new getAdverts());
      processMap.put("getTopics", new getTopics());
      processMap.put("getImportantTopics", new getImportantTopics());
      processMap.put("getMessages", new getMessages());
      processMap.put("getFirstLevelMessages", new getFirstLevelMessages());
      processMap.put("getMessagesAsList", new getMessagesAsList());
      processMap.put("markMessageImportant", new markMessageImportant());
      processMap.put("markMessageLike", new markMessageLike());
      return processMap;
    }

    public static class sendInfoEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendInfoEmail_args, Void> {
      public sendInfoEmail() {
        super("sendInfoEmail");
      }

      public sendInfoEmail_args getEmptyArgsInstance() {
        return new sendInfoEmail_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendInfoEmail_result result = new sendInfoEmail_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendInfoEmail_result result = new sendInfoEmail_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendInfoEmail_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendInfoEmail(args.email, args.name, args.content,resultHandler);
      }
    }

    public static class getWallItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWallItems_args, List<WallItem>> {
      public getWallItems() {
        super("getWallItems");
      }

      public getWallItems_args getEmptyArgsInstance() {
        return new getWallItems_args();
      }

      public AsyncMethodCallback<List<WallItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WallItem>>() { 
          public void onComplete(List<WallItem> o) {
            getWallItems_result result = new getWallItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWallItems_result result = new getWallItems_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWallItems_args args, org.apache.thrift.async.AsyncMethodCallback<List<WallItem>> resultHandler) throws TException {
        iface.getWallItems(args.groupId, args.lastLoadedIdTopicId, args.length,resultHandler);
      }
    }

    public static class postMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postMessage_args, Message> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      public AsyncMethodCallback<Message> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Message>() { 
          public void onComplete(Message o) {
            postMessage_result result = new postMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postMessage_result result = new postMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler) throws TException {
        iface.postMessage(args.msg,resultHandler);
      }
    }

    public static class deleteMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMessage_args, Message> {
      public deleteMessage() {
        super("deleteMessage");
      }

      public deleteMessage_args getEmptyArgsInstance() {
        return new deleteMessage_args();
      }

      public AsyncMethodCallback<Message> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Message>() { 
          public void onComplete(Message o) {
            deleteMessage_result result = new deleteMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMessage_result result = new deleteMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler) throws TException {
        iface.deleteMessage(args.msgId,resultHandler);
      }
    }

    public static class doPoll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doPoll_args, Poll> {
      public doPoll() {
        super("doPoll");
      }

      public doPoll_args getEmptyArgsInstance() {
        return new doPoll_args();
      }

      public AsyncMethodCallback<Poll> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Poll>() { 
          public void onComplete(Poll o) {
            doPoll_result result = new doPoll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doPoll_result result = new doPoll_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doPoll_args args, org.apache.thrift.async.AsyncMethodCallback<Poll> resultHandler) throws TException {
        iface.doPoll(args.pollId, args.item,resultHandler);
      }
    }

    public static class postTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postTopic_args, Topic> {
      public postTopic() {
        super("postTopic");
      }

      public postTopic_args getEmptyArgsInstance() {
        return new postTopic_args();
      }

      public AsyncMethodCallback<Topic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Topic>() { 
          public void onComplete(Topic o) {
            postTopic_result result = new postTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postTopic_result result = new postTopic_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Topic> resultHandler) throws TException {
        iface.postTopic(args.topic,resultHandler);
      }
    }

    public static class deleteTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTopic_args, Topic> {
      public deleteTopic() {
        super("deleteTopic");
      }

      public deleteTopic_args getEmptyArgsInstance() {
        return new deleteTopic_args();
      }

      public AsyncMethodCallback<Topic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Topic>() { 
          public void onComplete(Topic o) {
            deleteTopic_result result = new deleteTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTopic_result result = new deleteTopic_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Topic> resultHandler) throws TException {
        iface.deleteTopic(args.topicId,resultHandler);
      }
    }

    public static class checkUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUpdates_args, Integer> {
      public checkUpdates() {
        super("checkUpdates");
      }

      public checkUpdates_args getEmptyArgsInstance() {
        return new checkUpdates_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkUpdates_result result = new checkUpdates_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkUpdates_result result = new checkUpdates_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkUpdates(args.lastResposeTimestamp,resultHandler);
      }
    }

    public static class getDialogUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDialogUpdates_args, Map<Long,Integer>> {
      public getDialogUpdates() {
        super("getDialogUpdates");
      }

      public getDialogUpdates_args getEmptyArgsInstance() {
        return new getDialogUpdates_args();
      }

      public AsyncMethodCallback<Map<Long,Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,Integer>>() { 
          public void onComplete(Map<Long,Integer> o) {
            getDialogUpdates_result result = new getDialogUpdates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDialogUpdates_result result = new getDialogUpdates_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDialogUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,Integer>> resultHandler) throws TException {
        iface.getDialogUpdates(resultHandler);
      }
    }

    public static class getBlog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBlog_args, TopicListPart> {
      public getBlog() {
        super("getBlog");
      }

      public getBlog_args getEmptyArgsInstance() {
        return new getBlog_args();
      }

      public AsyncMethodCallback<TopicListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopicListPart>() { 
          public void onComplete(TopicListPart o) {
            getBlog_result result = new getBlog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBlog_result result = new getBlog_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBlog_args args, org.apache.thrift.async.AsyncMethodCallback<TopicListPart> resultHandler) throws TException {
        iface.getBlog(args.lastLoadedTopicId, args.length,resultHandler);
      }
    }

    public static class postBlogMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postBlogMessage_args, Message> {
      public postBlogMessage() {
        super("postBlogMessage");
      }

      public postBlogMessage_args getEmptyArgsInstance() {
        return new postBlogMessage_args();
      }

      public AsyncMethodCallback<Message> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Message>() { 
          public void onComplete(Message o) {
            postBlogMessage_result result = new postBlogMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postBlogMessage_result result = new postBlogMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postBlogMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler) throws TException {
        iface.postBlogMessage(args.msg,resultHandler);
      }
    }

    public static class getAdverts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdverts_args, TopicListPart> {
      public getAdverts() {
        super("getAdverts");
      }

      public getAdverts_args getEmptyArgsInstance() {
        return new getAdverts_args();
      }

      public AsyncMethodCallback<TopicListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopicListPart>() { 
          public void onComplete(TopicListPart o) {
            getAdverts_result result = new getAdverts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAdverts_result result = new getAdverts_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdverts_args args, org.apache.thrift.async.AsyncMethodCallback<TopicListPart> resultHandler) throws TException {
        iface.getAdverts(args.groupId, args.lastLoadedTopicId, args.length,resultHandler);
      }
    }

    public static class getTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopics_args, TopicListPart> {
      public getTopics() {
        super("getTopics");
      }

      public getTopics_args getEmptyArgsInstance() {
        return new getTopics_args();
      }

      public AsyncMethodCallback<TopicListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopicListPart>() { 
          public void onComplete(TopicListPart o) {
            getTopics_result result = new getTopics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopics_result result = new getTopics_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopics_args args, org.apache.thrift.async.AsyncMethodCallback<TopicListPart> resultHandler) throws TException {
        iface.getTopics(args.groupId, args.rubricId, args.commmunityId, args.lastLoadedTopicId, args.length,resultHandler);
      }
    }

    public static class getImportantTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImportantTopics_args, TopicListPart> {
      public getImportantTopics() {
        super("getImportantTopics");
      }

      public getImportantTopics_args getEmptyArgsInstance() {
        return new getImportantTopics_args();
      }

      public AsyncMethodCallback<TopicListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopicListPart>() { 
          public void onComplete(TopicListPart o) {
            getImportantTopics_result result = new getImportantTopics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getImportantTopics_result result = new getImportantTopics_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImportantTopics_args args, org.apache.thrift.async.AsyncMethodCallback<TopicListPart> resultHandler) throws TException {
        iface.getImportantTopics(args.groupId, args.rubricId, args.commmunityId, args.length,resultHandler);
      }
    }

    public static class getMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessages_args, MessageListPart> {
      public getMessages() {
        super("getMessages");
      }

      public getMessages_args getEmptyArgsInstance() {
        return new getMessages_args();
      }

      public AsyncMethodCallback<MessageListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageListPart>() { 
          public void onComplete(MessageListPart o) {
            getMessages_result result = new getMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessages_result result = new getMessages_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessages_args args, org.apache.thrift.async.AsyncMethodCallback<MessageListPart> resultHandler) throws TException {
        iface.getMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length,resultHandler);
      }
    }

    public static class getFirstLevelMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFirstLevelMessages_args, MessageListPart> {
      public getFirstLevelMessages() {
        super("getFirstLevelMessages");
      }

      public getFirstLevelMessages_args getEmptyArgsInstance() {
        return new getFirstLevelMessages_args();
      }

      public AsyncMethodCallback<MessageListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageListPart>() { 
          public void onComplete(MessageListPart o) {
            getFirstLevelMessages_result result = new getFirstLevelMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFirstLevelMessages_result result = new getFirstLevelMessages_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFirstLevelMessages_args args, org.apache.thrift.async.AsyncMethodCallback<MessageListPart> resultHandler) throws TException {
        iface.getFirstLevelMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length,resultHandler);
      }
    }

    public static class getMessagesAsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessagesAsList_args, MessageListPart> {
      public getMessagesAsList() {
        super("getMessagesAsList");
      }

      public getMessagesAsList_args getEmptyArgsInstance() {
        return new getMessagesAsList_args();
      }

      public AsyncMethodCallback<MessageListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageListPart>() { 
          public void onComplete(MessageListPart o) {
            getMessagesAsList_result result = new getMessagesAsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessagesAsList_result result = new getMessagesAsList_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessagesAsList_args args, org.apache.thrift.async.AsyncMethodCallback<MessageListPart> resultHandler) throws TException {
        iface.getMessagesAsList(args.topicId, args.messageType, args.lastLoadedId, args.archived, args.length,resultHandler);
      }
    }

    public static class markMessageImportant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markMessageImportant_args, Integer> {
      public markMessageImportant() {
        super("markMessageImportant");
      }

      public markMessageImportant_args getEmptyArgsInstance() {
        return new markMessageImportant_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            markMessageImportant_result result = new markMessageImportant_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markMessageImportant_result result = new markMessageImportant_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markMessageImportant_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.markMessageImportant(args.messageId, args.isImportant,resultHandler);
      }
    }

    public static class markMessageLike<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markMessageLike_args, Integer> {
      public markMessageLike() {
        super("markMessageLike");
      }

      public markMessageLike_args getEmptyArgsInstance() {
        return new markMessageLike_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            markMessageLike_result result = new markMessageLike_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markMessageLike_result result = new markMessageLike_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markMessageLike_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.markMessageLike(args.messageId,resultHandler);
      }
    }

  }

  public static class sendInfoEmail_args implements org.apache.thrift.TBase<sendInfoEmail_args, sendInfoEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendInfoEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInfoEmail_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendInfoEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendInfoEmail_argsTupleSchemeFactory());
    }

    public String email; // required
    public String name; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      NAME((short)2, "name"),
      CONTENT((short)3, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // NAME
            return NAME;
          case 3: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInfoEmail_args.class, metaDataMap);
    }

    public sendInfoEmail_args() {
    }

    public sendInfoEmail_args(
      String email,
      String name,
      String content)
    {
      this();
      this.email = email;
      this.name = name;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendInfoEmail_args(sendInfoEmail_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public sendInfoEmail_args deepCopy() {
      return new sendInfoEmail_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
      this.name = null;
      this.content = null;
    }

    public String getEmail() {
      return this.email;
    }

    public sendInfoEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public sendInfoEmail_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public sendInfoEmail_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case NAME:
        return getName();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case NAME:
        return isSetName();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendInfoEmail_args)
        return this.equals((sendInfoEmail_args)that);
      return false;
    }

    public boolean equals(sendInfoEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendInfoEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendInfoEmail_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendInfoEmail_argsStandardSchemeFactory implements SchemeFactory {
      public sendInfoEmail_argsStandardScheme getScheme() {
        return new sendInfoEmail_argsStandardScheme();
      }
    }

    private static class sendInfoEmail_argsStandardScheme extends StandardScheme<sendInfoEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendInfoEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendInfoEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendInfoEmail_argsTupleSchemeFactory implements SchemeFactory {
      public sendInfoEmail_argsTupleScheme getScheme() {
        return new sendInfoEmail_argsTupleScheme();
      }
    }

    private static class sendInfoEmail_argsTupleScheme extends TupleScheme<sendInfoEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendInfoEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendInfoEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class sendInfoEmail_result implements org.apache.thrift.TBase<sendInfoEmail_result, sendInfoEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendInfoEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInfoEmail_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendInfoEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendInfoEmail_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInfoEmail_result.class, metaDataMap);
    }

    public sendInfoEmail_result() {
    }

    public sendInfoEmail_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendInfoEmail_result(sendInfoEmail_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public sendInfoEmail_result deepCopy() {
      return new sendInfoEmail_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public sendInfoEmail_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendInfoEmail_result)
        return this.equals((sendInfoEmail_result)that);
      return false;
    }

    public boolean equals(sendInfoEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendInfoEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendInfoEmail_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendInfoEmail_resultStandardSchemeFactory implements SchemeFactory {
      public sendInfoEmail_resultStandardScheme getScheme() {
        return new sendInfoEmail_resultStandardScheme();
      }
    }

    private static class sendInfoEmail_resultStandardScheme extends StandardScheme<sendInfoEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendInfoEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendInfoEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendInfoEmail_resultTupleSchemeFactory implements SchemeFactory {
      public sendInfoEmail_resultTupleScheme getScheme() {
        return new sendInfoEmail_resultTupleScheme();
      }
    }

    private static class sendInfoEmail_resultTupleScheme extends TupleScheme<sendInfoEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendInfoEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendInfoEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getWallItems_args implements org.apache.thrift.TBase<getWallItems_args, getWallItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWallItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWallItems_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedIdTopicId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWallItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWallItems_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public long lastLoadedIdTopicId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      LAST_LOADED_ID_TOPIC_ID((short)2, "lastLoadedIdTopicId"),
      LENGTH((short)3, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // LAST_LOADED_ID_TOPIC_ID
            return LAST_LOADED_ID_TOPIC_ID;
          case 3: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __LASTLOADEDIDTOPICID_ISSET_ID = 1;
    private static final int __LENGTH_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LAST_LOADED_ID_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedIdTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWallItems_args.class, metaDataMap);
    }

    public getWallItems_args() {
    }

    public getWallItems_args(
      long groupId,
      long lastLoadedIdTopicId,
      int length)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.lastLoadedIdTopicId = lastLoadedIdTopicId;
      setLastLoadedIdTopicIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWallItems_args(getWallItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      this.lastLoadedIdTopicId = other.lastLoadedIdTopicId;
      this.length = other.length;
    }

    public getWallItems_args deepCopy() {
      return new getWallItems_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      setLastLoadedIdTopicIdIsSet(false);
      this.lastLoadedIdTopicId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getWallItems_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public long getLastLoadedIdTopicId() {
      return this.lastLoadedIdTopicId;
    }

    public getWallItems_args setLastLoadedIdTopicId(long lastLoadedIdTopicId) {
      this.lastLoadedIdTopicId = lastLoadedIdTopicId;
      setLastLoadedIdTopicIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedIdTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDIDTOPICID_ISSET_ID);
    }

    /** Returns true if field lastLoadedIdTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedIdTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDIDTOPICID_ISSET_ID);
    }

    public void setLastLoadedIdTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDIDTOPICID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getWallItems_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case LAST_LOADED_ID_TOPIC_ID:
        if (value == null) {
          unsetLastLoadedIdTopicId();
        } else {
          setLastLoadedIdTopicId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case LAST_LOADED_ID_TOPIC_ID:
        return Long.valueOf(getLastLoadedIdTopicId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case LAST_LOADED_ID_TOPIC_ID:
        return isSetLastLoadedIdTopicId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWallItems_args)
        return this.equals((getWallItems_args)that);
      return false;
    }

    public boolean equals(getWallItems_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_lastLoadedIdTopicId = true;
      boolean that_present_lastLoadedIdTopicId = true;
      if (this_present_lastLoadedIdTopicId || that_present_lastLoadedIdTopicId) {
        if (!(this_present_lastLoadedIdTopicId && that_present_lastLoadedIdTopicId))
          return false;
        if (this.lastLoadedIdTopicId != that.lastLoadedIdTopicId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWallItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedIdTopicId()).compareTo(other.isSetLastLoadedIdTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedIdTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedIdTopicId, other.lastLoadedIdTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWallItems_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedIdTopicId:");
      sb.append(this.lastLoadedIdTopicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWallItems_argsStandardSchemeFactory implements SchemeFactory {
      public getWallItems_argsStandardScheme getScheme() {
        return new getWallItems_argsStandardScheme();
      }
    }

    private static class getWallItems_argsStandardScheme extends StandardScheme<getWallItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWallItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAST_LOADED_ID_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedIdTopicId = iprot.readI64();
                struct.setLastLoadedIdTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWallItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOADED_ID_TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedIdTopicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWallItems_argsTupleSchemeFactory implements SchemeFactory {
      public getWallItems_argsTupleScheme getScheme() {
        return new getWallItems_argsTupleScheme();
      }
    }

    private static class getWallItems_argsTupleScheme extends TupleScheme<getWallItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWallItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetLastLoadedIdTopicId()) {
          optionals.set(1);
        }
        if (struct.isSetLength()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetLastLoadedIdTopicId()) {
          oprot.writeI64(struct.lastLoadedIdTopicId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWallItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastLoadedIdTopicId = iprot.readI64();
          struct.setLastLoadedIdTopicIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getWallItems_result implements org.apache.thrift.TBase<getWallItems_result, getWallItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWallItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWallItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWallItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWallItems_resultTupleSchemeFactory());
    }

    public List<WallItem> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WallItem.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWallItems_result.class, metaDataMap);
    }

    public getWallItems_result() {
    }

    public getWallItems_result(
      List<WallItem> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWallItems_result(getWallItems_result other) {
      if (other.isSetSuccess()) {
        List<WallItem> __this__success = new ArrayList<WallItem>(other.success.size());
        for (WallItem other_element : other.success) {
          __this__success.add(new WallItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getWallItems_result deepCopy() {
      return new getWallItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WallItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WallItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<WallItem>();
      }
      this.success.add(elem);
    }

    public List<WallItem> getSuccess() {
      return this.success;
    }

    public getWallItems_result setSuccess(List<WallItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getWallItems_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WallItem>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWallItems_result)
        return this.equals((getWallItems_result)that);
      return false;
    }

    public boolean equals(getWallItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWallItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWallItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWallItems_resultStandardSchemeFactory implements SchemeFactory {
      public getWallItems_resultStandardScheme getScheme() {
        return new getWallItems_resultStandardScheme();
      }
    }

    private static class getWallItems_resultStandardScheme extends StandardScheme<getWallItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWallItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                  struct.success = new ArrayList<WallItem>(_list140.size);
                  for (int _i141 = 0; _i141 < _list140.size; ++_i141)
                  {
                    WallItem _elem142;
                    _elem142 = new WallItem();
                    _elem142.read(iprot);
                    struct.success.add(_elem142);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWallItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WallItem _iter143 : struct.success)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWallItems_resultTupleSchemeFactory implements SchemeFactory {
      public getWallItems_resultTupleScheme getScheme() {
        return new getWallItems_resultTupleScheme();
      }
    }

    private static class getWallItems_resultTupleScheme extends TupleScheme<getWallItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWallItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WallItem _iter144 : struct.success)
            {
              _iter144.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWallItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WallItem>(_list145.size);
            for (int _i146 = 0; _i146 < _list145.size; ++_i146)
            {
              WallItem _elem147;
              _elem147 = new WallItem();
              _elem147.read(iprot);
              struct.success.add(_elem147);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class postMessage_args implements org.apache.thrift.TBase<postMessage_args, postMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_argsTupleSchemeFactory());
    }

    public Message msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_args.class, metaDataMap);
    }

    public postMessage_args() {
    }

    public postMessage_args(
      Message msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_args(postMessage_args other) {
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
    }

    public postMessage_args deepCopy() {
      return new postMessage_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public Message getMsg() {
      return this.msg;
    }

    public postMessage_args setMsg(Message msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((Message)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_args)
        return this.equals((postMessage_args)that);
      return false;
    }

    public boolean equals(postMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msg != null) {
        msg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postMessage_argsStandardScheme getScheme() {
        return new postMessage_argsStandardScheme();
      }
    }

    private static class postMessage_argsStandardScheme extends StandardScheme<postMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new Message();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postMessage_argsTupleScheme getScheme() {
        return new postMessage_argsTupleScheme();
      }
    }

    private static class postMessage_argsTupleScheme extends TupleScheme<postMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = new Message();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class postMessage_result implements org.apache.thrift.TBase<postMessage_result, postMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_resultTupleSchemeFactory());
    }

    public Message success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_result.class, metaDataMap);
    }

    public postMessage_result() {
    }

    public postMessage_result(
      Message success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_result(postMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public postMessage_result deepCopy() {
      return new postMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public postMessage_result setSuccess(Message success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public postMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Message)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_result)
        return this.equals((postMessage_result)that);
      return false;
    }

    public boolean equals(postMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postMessage_resultStandardScheme getScheme() {
        return new postMessage_resultStandardScheme();
      }
    }

    private static class postMessage_resultStandardScheme extends StandardScheme<postMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Message();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postMessage_resultTupleScheme getScheme() {
        return new postMessage_resultTupleScheme();
      }
    }

    private static class postMessage_resultTupleScheme extends TupleScheme<postMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Message();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class deleteMessage_args implements org.apache.thrift.TBase<deleteMessage_args, deleteMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMessage_args");

    private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMessage_argsTupleSchemeFactory());
    }

    public long msgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ID((short)1, "msgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ID
            return MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMessage_args.class, metaDataMap);
    }

    public deleteMessage_args() {
    }

    public deleteMessage_args(
      long msgId)
    {
      this();
      this.msgId = msgId;
      setMsgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMessage_args(deleteMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.msgId = other.msgId;
    }

    public deleteMessage_args deepCopy() {
      return new deleteMessage_args(this);
    }

    @Override
    public void clear() {
      setMsgIdIsSet(false);
      this.msgId = 0;
    }

    public long getMsgId() {
      return this.msgId;
    }

    public deleteMessage_args setMsgId(long msgId) {
      this.msgId = msgId;
      setMsgIdIsSet(true);
      return this;
    }

    public void unsetMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    public void setMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG_ID:
        if (value == null) {
          unsetMsgId();
        } else {
          setMsgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ID:
        return Long.valueOf(getMsgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG_ID:
        return isSetMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMessage_args)
        return this.equals((deleteMessage_args)that);
      return false;
    }

    public boolean equals(deleteMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_msgId = true;
      boolean that_present_msgId = true;
      if (this_present_msgId || that_present_msgId) {
        if (!(this_present_msgId && that_present_msgId))
          return false;
        if (this.msgId != that.msgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMessage_args(");
      boolean first = true;

      sb.append("msgId:");
      sb.append(this.msgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMessage_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMessage_argsStandardScheme getScheme() {
        return new deleteMessage_argsStandardScheme();
      }
    }

    private static class deleteMessage_argsStandardScheme extends StandardScheme<deleteMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.msgId = iprot.readI64();
                struct.setMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.msgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMessage_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMessage_argsTupleScheme getScheme() {
        return new deleteMessage_argsTupleScheme();
      }
    }

    private static class deleteMessage_argsTupleScheme extends TupleScheme<deleteMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsgId()) {
          oprot.writeI64(struct.msgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msgId = iprot.readI64();
          struct.setMsgIdIsSet(true);
        }
      }
    }

  }

  public static class deleteMessage_result implements org.apache.thrift.TBase<deleteMessage_result, deleteMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMessage_resultTupleSchemeFactory());
    }

    public Message success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMessage_result.class, metaDataMap);
    }

    public deleteMessage_result() {
    }

    public deleteMessage_result(
      Message success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMessage_result(deleteMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public deleteMessage_result deepCopy() {
      return new deleteMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public deleteMessage_result setSuccess(Message success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public deleteMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Message)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMessage_result)
        return this.equals((deleteMessage_result)that);
      return false;
    }

    public boolean equals(deleteMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMessage_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMessage_resultStandardScheme getScheme() {
        return new deleteMessage_resultStandardScheme();
      }
    }

    private static class deleteMessage_resultStandardScheme extends StandardScheme<deleteMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Message();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMessage_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMessage_resultTupleScheme getScheme() {
        return new deleteMessage_resultTupleScheme();
      }
    }

    private static class deleteMessage_resultTupleScheme extends TupleScheme<deleteMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Message();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class doPoll_args implements org.apache.thrift.TBase<doPoll_args, doPoll_args._Fields>, java.io.Serializable, Cloneable, Comparable<doPoll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doPoll_args");

    private static final org.apache.thrift.protocol.TField POLL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pollId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doPoll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doPoll_argsTupleSchemeFactory());
    }

    public long pollId; // required
    public int item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POLL_ID((short)1, "pollId"),
      ITEM((short)2, "item");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POLL_ID
            return POLL_ID;
          case 2: // ITEM
            return ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POLLID_ISSET_ID = 0;
    private static final int __ITEM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POLL_ID, new org.apache.thrift.meta_data.FieldMetaData("pollId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doPoll_args.class, metaDataMap);
    }

    public doPoll_args() {
    }

    public doPoll_args(
      long pollId,
      int item)
    {
      this();
      this.pollId = pollId;
      setPollIdIsSet(true);
      this.item = item;
      setItemIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doPoll_args(doPoll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pollId = other.pollId;
      this.item = other.item;
    }

    public doPoll_args deepCopy() {
      return new doPoll_args(this);
    }

    @Override
    public void clear() {
      setPollIdIsSet(false);
      this.pollId = 0;
      setItemIsSet(false);
      this.item = 0;
    }

    public long getPollId() {
      return this.pollId;
    }

    public doPoll_args setPollId(long pollId) {
      this.pollId = pollId;
      setPollIdIsSet(true);
      return this;
    }

    public void unsetPollId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLLID_ISSET_ID);
    }

    /** Returns true if field pollId is set (has been assigned a value) and false otherwise */
    public boolean isSetPollId() {
      return EncodingUtils.testBit(__isset_bitfield, __POLLID_ISSET_ID);
    }

    public void setPollIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLLID_ISSET_ID, value);
    }

    public int getItem() {
      return this.item;
    }

    public doPoll_args setItem(int item) {
      this.item = item;
      setItemIsSet(true);
      return this;
    }

    public void unsetItem() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEM_ISSET_ID);
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEM_ISSET_ID);
    }

    public void setItemIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case POLL_ID:
        if (value == null) {
          unsetPollId();
        } else {
          setPollId((Long)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POLL_ID:
        return Long.valueOf(getPollId());

      case ITEM:
        return Integer.valueOf(getItem());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POLL_ID:
        return isSetPollId();
      case ITEM:
        return isSetItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doPoll_args)
        return this.equals((doPoll_args)that);
      return false;
    }

    public boolean equals(doPoll_args that) {
      if (that == null)
        return false;

      boolean this_present_pollId = true;
      boolean that_present_pollId = true;
      if (this_present_pollId || that_present_pollId) {
        if (!(this_present_pollId && that_present_pollId))
          return false;
        if (this.pollId != that.pollId)
          return false;
      }

      boolean this_present_item = true;
      boolean that_present_item = true;
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (this.item != that.item)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doPoll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPollId()).compareTo(other.isSetPollId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPollId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollId, other.pollId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doPoll_args(");
      boolean first = true;

      sb.append("pollId:");
      sb.append(this.pollId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      sb.append(this.item);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doPoll_argsStandardSchemeFactory implements SchemeFactory {
      public doPoll_argsStandardScheme getScheme() {
        return new doPoll_argsStandardScheme();
      }
    }

    private static class doPoll_argsStandardScheme extends StandardScheme<doPoll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doPoll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POLL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pollId = iprot.readI64();
                struct.setPollIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.item = iprot.readI32();
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doPoll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POLL_ID_FIELD_DESC);
        oprot.writeI64(struct.pollId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITEM_FIELD_DESC);
        oprot.writeI32(struct.item);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doPoll_argsTupleSchemeFactory implements SchemeFactory {
      public doPoll_argsTupleScheme getScheme() {
        return new doPoll_argsTupleScheme();
      }
    }

    private static class doPoll_argsTupleScheme extends TupleScheme<doPoll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doPoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPollId()) {
          optionals.set(0);
        }
        if (struct.isSetItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPollId()) {
          oprot.writeI64(struct.pollId);
        }
        if (struct.isSetItem()) {
          oprot.writeI32(struct.item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doPoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pollId = iprot.readI64();
          struct.setPollIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item = iprot.readI32();
          struct.setItemIsSet(true);
        }
      }
    }

  }

  public static class doPoll_result implements org.apache.thrift.TBase<doPoll_result, doPoll_result._Fields>, java.io.Serializable, Cloneable, Comparable<doPoll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doPoll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doPoll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doPoll_resultTupleSchemeFactory());
    }

    public Poll success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Poll.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doPoll_result.class, metaDataMap);
    }

    public doPoll_result() {
    }

    public doPoll_result(
      Poll success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doPoll_result(doPoll_result other) {
      if (other.isSetSuccess()) {
        this.success = new Poll(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public doPoll_result deepCopy() {
      return new doPoll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Poll getSuccess() {
      return this.success;
    }

    public doPoll_result setSuccess(Poll success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public doPoll_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Poll)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doPoll_result)
        return this.equals((doPoll_result)that);
      return false;
    }

    public boolean equals(doPoll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doPoll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doPoll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doPoll_resultStandardSchemeFactory implements SchemeFactory {
      public doPoll_resultStandardScheme getScheme() {
        return new doPoll_resultStandardScheme();
      }
    }

    private static class doPoll_resultStandardScheme extends StandardScheme<doPoll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doPoll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Poll();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doPoll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doPoll_resultTupleSchemeFactory implements SchemeFactory {
      public doPoll_resultTupleScheme getScheme() {
        return new doPoll_resultTupleScheme();
      }
    }

    private static class doPoll_resultTupleScheme extends TupleScheme<doPoll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doPoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doPoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Poll();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class postTopic_args implements org.apache.thrift.TBase<postTopic_args, postTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<postTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTopic_argsTupleSchemeFactory());
    }

    public Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTopic_args.class, metaDataMap);
    }

    public postTopic_args() {
    }

    public postTopic_args(
      Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTopic_args(postTopic_args other) {
      if (other.isSetTopic()) {
        this.topic = new Topic(other.topic);
      }
    }

    public postTopic_args deepCopy() {
      return new postTopic_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public Topic getTopic() {
      return this.topic;
    }

    public postTopic_args setTopic(Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((Topic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTopic_args)
        return this.equals((postTopic_args)that);
      return false;
    }

    public boolean equals(postTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTopic_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTopic_argsStandardSchemeFactory implements SchemeFactory {
      public postTopic_argsStandardScheme getScheme() {
        return new postTopic_argsStandardScheme();
      }
    }

    private static class postTopic_argsStandardScheme extends StandardScheme<postTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTopic_argsTupleSchemeFactory implements SchemeFactory {
      public postTopic_argsTupleScheme getScheme() {
        return new postTopic_argsTupleScheme();
      }
    }

    private static class postTopic_argsTupleScheme extends TupleScheme<postTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

  }

  public static class postTopic_result implements org.apache.thrift.TBase<postTopic_result, postTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<postTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTopic_resultTupleSchemeFactory());
    }

    public Topic success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTopic_result.class, metaDataMap);
    }

    public postTopic_result() {
    }

    public postTopic_result(
      Topic success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTopic_result(postTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = new Topic(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public postTopic_result deepCopy() {
      return new postTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Topic getSuccess() {
      return this.success;
    }

    public postTopic_result setSuccess(Topic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public postTopic_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Topic)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTopic_result)
        return this.equals((postTopic_result)that);
      return false;
    }

    public boolean equals(postTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTopic_resultStandardSchemeFactory implements SchemeFactory {
      public postTopic_resultStandardScheme getScheme() {
        return new postTopic_resultStandardScheme();
      }
    }

    private static class postTopic_resultStandardScheme extends StandardScheme<postTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Topic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTopic_resultTupleSchemeFactory implements SchemeFactory {
      public postTopic_resultTupleScheme getScheme() {
        return new postTopic_resultTupleScheme();
      }
    }

    private static class postTopic_resultTupleScheme extends TupleScheme<postTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Topic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class deleteTopic_args implements org.apache.thrift.TBase<deleteTopic_args, deleteTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTopic_argsTupleSchemeFactory());
    }

    public long topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopic_args.class, metaDataMap);
    }

    public deleteTopic_args() {
    }

    public deleteTopic_args(
      long topicId)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopic_args(deleteTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
    }

    public deleteTopic_args deepCopy() {
      return new deleteTopic_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public deleteTopic_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopic_args)
        return this.equals((deleteTopic_args)that);
      return false;
    }

    public boolean equals(deleteTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTopic_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopic_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTopic_argsStandardScheme getScheme() {
        return new deleteTopic_argsStandardScheme();
      }
    }

    private static class deleteTopic_argsStandardScheme extends StandardScheme<deleteTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopic_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTopic_argsTupleScheme getScheme() {
        return new deleteTopic_argsTupleScheme();
      }
    }

    private static class deleteTopic_argsTupleScheme extends TupleScheme<deleteTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class deleteTopic_result implements org.apache.thrift.TBase<deleteTopic_result, deleteTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTopic_resultTupleSchemeFactory());
    }

    public Topic success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopic_result.class, metaDataMap);
    }

    public deleteTopic_result() {
    }

    public deleteTopic_result(
      Topic success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopic_result(deleteTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = new Topic(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public deleteTopic_result deepCopy() {
      return new deleteTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Topic getSuccess() {
      return this.success;
    }

    public deleteTopic_result setSuccess(Topic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public deleteTopic_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Topic)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopic_result)
        return this.equals((deleteTopic_result)that);
      return false;
    }

    public boolean equals(deleteTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopic_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTopic_resultStandardScheme getScheme() {
        return new deleteTopic_resultStandardScheme();
      }
    }

    private static class deleteTopic_resultStandardScheme extends StandardScheme<deleteTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Topic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopic_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTopic_resultTupleScheme getScheme() {
        return new deleteTopic_resultTupleScheme();
      }
    }

    private static class deleteTopic_resultTupleScheme extends TupleScheme<deleteTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Topic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class checkUpdates_args implements org.apache.thrift.TBase<checkUpdates_args, checkUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUpdates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUpdates_args");

    private static final org.apache.thrift.protocol.TField LAST_RESPOSE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastResposeTimestamp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUpdates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUpdates_argsTupleSchemeFactory());
    }

    public int lastResposeTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_RESPOSE_TIMESTAMP((short)1, "lastResposeTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LAST_RESPOSE_TIMESTAMP
            return LAST_RESPOSE_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTRESPOSETIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_RESPOSE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastResposeTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUpdates_args.class, metaDataMap);
    }

    public checkUpdates_args() {
    }

    public checkUpdates_args(
      int lastResposeTimestamp)
    {
      this();
      this.lastResposeTimestamp = lastResposeTimestamp;
      setLastResposeTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUpdates_args(checkUpdates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastResposeTimestamp = other.lastResposeTimestamp;
    }

    public checkUpdates_args deepCopy() {
      return new checkUpdates_args(this);
    }

    @Override
    public void clear() {
      setLastResposeTimestampIsSet(false);
      this.lastResposeTimestamp = 0;
    }

    public int getLastResposeTimestamp() {
      return this.lastResposeTimestamp;
    }

    public checkUpdates_args setLastResposeTimestamp(int lastResposeTimestamp) {
      this.lastResposeTimestamp = lastResposeTimestamp;
      setLastResposeTimestampIsSet(true);
      return this;
    }

    public void unsetLastResposeTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID);
    }

    /** Returns true if field lastResposeTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastResposeTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID);
    }

    public void setLastResposeTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        if (value == null) {
          unsetLastResposeTimestamp();
        } else {
          setLastResposeTimestamp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        return Integer.valueOf(getLastResposeTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        return isSetLastResposeTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUpdates_args)
        return this.equals((checkUpdates_args)that);
      return false;
    }

    public boolean equals(checkUpdates_args that) {
      if (that == null)
        return false;

      boolean this_present_lastResposeTimestamp = true;
      boolean that_present_lastResposeTimestamp = true;
      if (this_present_lastResposeTimestamp || that_present_lastResposeTimestamp) {
        if (!(this_present_lastResposeTimestamp && that_present_lastResposeTimestamp))
          return false;
        if (this.lastResposeTimestamp != that.lastResposeTimestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastResposeTimestamp()).compareTo(other.isSetLastResposeTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastResposeTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastResposeTimestamp, other.lastResposeTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUpdates_args(");
      boolean first = true;

      sb.append("lastResposeTimestamp:");
      sb.append(this.lastResposeTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUpdates_argsStandardSchemeFactory implements SchemeFactory {
      public checkUpdates_argsStandardScheme getScheme() {
        return new checkUpdates_argsStandardScheme();
      }
    }

    private static class checkUpdates_argsStandardScheme extends StandardScheme<checkUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LAST_RESPOSE_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lastResposeTimestamp = iprot.readI32();
                struct.setLastResposeTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_RESPOSE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastResposeTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUpdates_argsTupleSchemeFactory implements SchemeFactory {
      public checkUpdates_argsTupleScheme getScheme() {
        return new checkUpdates_argsTupleScheme();
      }
    }

    private static class checkUpdates_argsTupleScheme extends TupleScheme<checkUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastResposeTimestamp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLastResposeTimestamp()) {
          oprot.writeI32(struct.lastResposeTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lastResposeTimestamp = iprot.readI32();
          struct.setLastResposeTimestampIsSet(true);
        }
      }
    }

  }

  public static class checkUpdates_result implements org.apache.thrift.TBase<checkUpdates_result, checkUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUpdates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUpdates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUpdates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUpdates_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUpdates_result.class, metaDataMap);
    }

    public checkUpdates_result() {
    }

    public checkUpdates_result(
      int success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUpdates_result(checkUpdates_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public checkUpdates_result deepCopy() {
      return new checkUpdates_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkUpdates_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public checkUpdates_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUpdates_result)
        return this.equals((checkUpdates_result)that);
      return false;
    }

    public boolean equals(checkUpdates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUpdates_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUpdates_resultStandardSchemeFactory implements SchemeFactory {
      public checkUpdates_resultStandardScheme getScheme() {
        return new checkUpdates_resultStandardScheme();
      }
    }

    private static class checkUpdates_resultStandardScheme extends StandardScheme<checkUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUpdates_resultTupleSchemeFactory implements SchemeFactory {
      public checkUpdates_resultTupleScheme getScheme() {
        return new checkUpdates_resultTupleScheme();
      }
    }

    private static class checkUpdates_resultTupleScheme extends TupleScheme<checkUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getDialogUpdates_args implements org.apache.thrift.TBase<getDialogUpdates_args, getDialogUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogUpdates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogUpdates_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogUpdates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogUpdates_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogUpdates_args.class, metaDataMap);
    }

    public getDialogUpdates_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogUpdates_args(getDialogUpdates_args other) {
    }

    public getDialogUpdates_args deepCopy() {
      return new getDialogUpdates_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogUpdates_args)
        return this.equals((getDialogUpdates_args)that);
      return false;
    }

    public boolean equals(getDialogUpdates_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogUpdates_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogUpdates_argsStandardSchemeFactory implements SchemeFactory {
      public getDialogUpdates_argsStandardScheme getScheme() {
        return new getDialogUpdates_argsStandardScheme();
      }
    }

    private static class getDialogUpdates_argsStandardScheme extends StandardScheme<getDialogUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogUpdates_argsTupleSchemeFactory implements SchemeFactory {
      public getDialogUpdates_argsTupleScheme getScheme() {
        return new getDialogUpdates_argsTupleScheme();
      }
    }

    private static class getDialogUpdates_argsTupleScheme extends TupleScheme<getDialogUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDialogUpdates_result implements org.apache.thrift.TBase<getDialogUpdates_result, getDialogUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogUpdates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogUpdates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogUpdates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogUpdates_resultTupleSchemeFactory());
    }

    public Map<Long,Integer> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogUpdates_result.class, metaDataMap);
    }

    public getDialogUpdates_result() {
    }

    public getDialogUpdates_result(
      Map<Long,Integer> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogUpdates_result(getDialogUpdates_result other) {
      if (other.isSetSuccess()) {
        Map<Long,Integer> __this__success = new HashMap<Long,Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getDialogUpdates_result deepCopy() {
      return new getDialogUpdates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, int val) {
      if (this.success == null) {
        this.success = new HashMap<Long,Integer>();
      }
      this.success.put(key, val);
    }

    public Map<Long,Integer> getSuccess() {
      return this.success;
    }

    public getDialogUpdates_result setSuccess(Map<Long,Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getDialogUpdates_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,Integer>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogUpdates_result)
        return this.equals((getDialogUpdates_result)that);
      return false;
    }

    public boolean equals(getDialogUpdates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogUpdates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogUpdates_resultStandardSchemeFactory implements SchemeFactory {
      public getDialogUpdates_resultStandardScheme getScheme() {
        return new getDialogUpdates_resultStandardScheme();
      }
    }

    private static class getDialogUpdates_resultStandardScheme extends StandardScheme<getDialogUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,Integer>(2*_map148.size);
                  for (int _i149 = 0; _i149 < _map148.size; ++_i149)
                  {
                    long _key150;
                    int _val151;
                    _key150 = iprot.readI64();
                    _val151 = iprot.readI32();
                    struct.success.put(_key150, _val151);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Map.Entry<Long, Integer> _iter152 : struct.success.entrySet())
            {
              oprot.writeI64(_iter152.getKey());
              oprot.writeI32(_iter152.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogUpdates_resultTupleSchemeFactory implements SchemeFactory {
      public getDialogUpdates_resultTupleScheme getScheme() {
        return new getDialogUpdates_resultTupleScheme();
      }
    }

    private static class getDialogUpdates_resultTupleScheme extends TupleScheme<getDialogUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, Integer> _iter153 : struct.success.entrySet())
            {
              oprot.writeI64(_iter153.getKey());
              oprot.writeI32(_iter153.getValue());
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashMap<Long,Integer>(2*_map154.size);
            for (int _i155 = 0; _i155 < _map154.size; ++_i155)
            {
              long _key156;
              int _val157;
              _key156 = iprot.readI64();
              _val157 = iprot.readI32();
              struct.success.put(_key156, _val157);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getBlog_args implements org.apache.thrift.TBase<getBlog_args, getBlog_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBlog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlog_args");

    private static final org.apache.thrift.protocol.TField LAST_LOADED_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedTopicId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlog_argsTupleSchemeFactory());
    }

    public long lastLoadedTopicId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_LOADED_TOPIC_ID((short)2, "lastLoadedTopicId"),
      LENGTH((short)3, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LAST_LOADED_TOPIC_ID
            return LAST_LOADED_TOPIC_ID;
          case 3: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTLOADEDTOPICID_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_LOADED_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlog_args.class, metaDataMap);
    }

    public getBlog_args() {
    }

    public getBlog_args(
      long lastLoadedTopicId,
      int length)
    {
      this();
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlog_args(getBlog_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastLoadedTopicId = other.lastLoadedTopicId;
      this.length = other.length;
    }

    public getBlog_args deepCopy() {
      return new getBlog_args(this);
    }

    @Override
    public void clear() {
      setLastLoadedTopicIdIsSet(false);
      this.lastLoadedTopicId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getLastLoadedTopicId() {
      return this.lastLoadedTopicId;
    }

    public getBlog_args setLastLoadedTopicId(long lastLoadedTopicId) {
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    /** Returns true if field lastLoadedTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    public void setLastLoadedTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getBlog_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_LOADED_TOPIC_ID:
        if (value == null) {
          unsetLastLoadedTopicId();
        } else {
          setLastLoadedTopicId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_LOADED_TOPIC_ID:
        return Long.valueOf(getLastLoadedTopicId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_LOADED_TOPIC_ID:
        return isSetLastLoadedTopicId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlog_args)
        return this.equals((getBlog_args)that);
      return false;
    }

    public boolean equals(getBlog_args that) {
      if (that == null)
        return false;

      boolean this_present_lastLoadedTopicId = true;
      boolean that_present_lastLoadedTopicId = true;
      if (this_present_lastLoadedTopicId || that_present_lastLoadedTopicId) {
        if (!(this_present_lastLoadedTopicId && that_present_lastLoadedTopicId))
          return false;
        if (this.lastLoadedTopicId != that.lastLoadedTopicId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBlog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastLoadedTopicId()).compareTo(other.isSetLastLoadedTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedTopicId, other.lastLoadedTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlog_args(");
      boolean first = true;

      sb.append("lastLoadedTopicId:");
      sb.append(this.lastLoadedTopicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlog_argsStandardSchemeFactory implements SchemeFactory {
      public getBlog_argsStandardScheme getScheme() {
        return new getBlog_argsStandardScheme();
      }
    }

    private static class getBlog_argsStandardScheme extends StandardScheme<getBlog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LAST_LOADED_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedTopicId = iprot.readI64();
                struct.setLastLoadedTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_LOADED_TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedTopicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlog_argsTupleSchemeFactory implements SchemeFactory {
      public getBlog_argsTupleScheme getScheme() {
        return new getBlog_argsTupleScheme();
      }
    }

    private static class getBlog_argsTupleScheme extends TupleScheme<getBlog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastLoadedTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetLength()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLastLoadedTopicId()) {
          oprot.writeI64(struct.lastLoadedTopicId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lastLoadedTopicId = iprot.readI64();
          struct.setLastLoadedTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getBlog_result implements org.apache.thrift.TBase<getBlog_result, getBlog_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBlog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlog_resultTupleSchemeFactory());
    }

    public TopicListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlog_result.class, metaDataMap);
    }

    public getBlog_result() {
    }

    public getBlog_result(
      TopicListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlog_result(getBlog_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopicListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getBlog_result deepCopy() {
      return new getBlog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public TopicListPart getSuccess() {
      return this.success;
    }

    public getBlog_result setSuccess(TopicListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getBlog_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopicListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlog_result)
        return this.equals((getBlog_result)that);
      return false;
    }

    public boolean equals(getBlog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBlog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlog_resultStandardSchemeFactory implements SchemeFactory {
      public getBlog_resultStandardScheme getScheme() {
        return new getBlog_resultStandardScheme();
      }
    }

    private static class getBlog_resultStandardScheme extends StandardScheme<getBlog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopicListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlog_resultTupleSchemeFactory implements SchemeFactory {
      public getBlog_resultTupleScheme getScheme() {
        return new getBlog_resultTupleScheme();
      }
    }

    private static class getBlog_resultTupleScheme extends TupleScheme<getBlog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TopicListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class postBlogMessage_args implements org.apache.thrift.TBase<postBlogMessage_args, postBlogMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postBlogMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postBlogMessage_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postBlogMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postBlogMessage_argsTupleSchemeFactory());
    }

    public Message msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postBlogMessage_args.class, metaDataMap);
    }

    public postBlogMessage_args() {
    }

    public postBlogMessage_args(
      Message msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postBlogMessage_args(postBlogMessage_args other) {
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
    }

    public postBlogMessage_args deepCopy() {
      return new postBlogMessage_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public Message getMsg() {
      return this.msg;
    }

    public postBlogMessage_args setMsg(Message msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((Message)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postBlogMessage_args)
        return this.equals((postBlogMessage_args)that);
      return false;
    }

    public boolean equals(postBlogMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postBlogMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postBlogMessage_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msg != null) {
        msg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postBlogMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postBlogMessage_argsStandardScheme getScheme() {
        return new postBlogMessage_argsStandardScheme();
      }
    }

    private static class postBlogMessage_argsStandardScheme extends StandardScheme<postBlogMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postBlogMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new Message();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postBlogMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postBlogMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postBlogMessage_argsTupleScheme getScheme() {
        return new postBlogMessage_argsTupleScheme();
      }
    }

    private static class postBlogMessage_argsTupleScheme extends TupleScheme<postBlogMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postBlogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postBlogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = new Message();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class postBlogMessage_result implements org.apache.thrift.TBase<postBlogMessage_result, postBlogMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postBlogMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postBlogMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postBlogMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postBlogMessage_resultTupleSchemeFactory());
    }

    public Message success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postBlogMessage_result.class, metaDataMap);
    }

    public postBlogMessage_result() {
    }

    public postBlogMessage_result(
      Message success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postBlogMessage_result(postBlogMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public postBlogMessage_result deepCopy() {
      return new postBlogMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public postBlogMessage_result setSuccess(Message success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public postBlogMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Message)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postBlogMessage_result)
        return this.equals((postBlogMessage_result)that);
      return false;
    }

    public boolean equals(postBlogMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postBlogMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postBlogMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postBlogMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postBlogMessage_resultStandardScheme getScheme() {
        return new postBlogMessage_resultStandardScheme();
      }
    }

    private static class postBlogMessage_resultStandardScheme extends StandardScheme<postBlogMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postBlogMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Message();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postBlogMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postBlogMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postBlogMessage_resultTupleScheme getScheme() {
        return new postBlogMessage_resultTupleScheme();
      }
    }

    private static class postBlogMessage_resultTupleScheme extends TupleScheme<postBlogMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postBlogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postBlogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Message();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getAdverts_args implements org.apache.thrift.TBase<getAdverts_args, getAdverts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdverts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdverts_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedTopicId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdverts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdverts_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public long lastLoadedTopicId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      LAST_LOADED_TOPIC_ID((short)2, "lastLoadedTopicId"),
      LENGTH((short)3, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // LAST_LOADED_TOPIC_ID
            return LAST_LOADED_TOPIC_ID;
          case 3: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __LASTLOADEDTOPICID_ISSET_ID = 1;
    private static final int __LENGTH_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LAST_LOADED_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdverts_args.class, metaDataMap);
    }

    public getAdverts_args() {
    }

    public getAdverts_args(
      long groupId,
      long lastLoadedTopicId,
      int length)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdverts_args(getAdverts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      this.lastLoadedTopicId = other.lastLoadedTopicId;
      this.length = other.length;
    }

    public getAdverts_args deepCopy() {
      return new getAdverts_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      setLastLoadedTopicIdIsSet(false);
      this.lastLoadedTopicId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getAdverts_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public long getLastLoadedTopicId() {
      return this.lastLoadedTopicId;
    }

    public getAdverts_args setLastLoadedTopicId(long lastLoadedTopicId) {
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    /** Returns true if field lastLoadedTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    public void setLastLoadedTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getAdverts_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case LAST_LOADED_TOPIC_ID:
        if (value == null) {
          unsetLastLoadedTopicId();
        } else {
          setLastLoadedTopicId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case LAST_LOADED_TOPIC_ID:
        return Long.valueOf(getLastLoadedTopicId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case LAST_LOADED_TOPIC_ID:
        return isSetLastLoadedTopicId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdverts_args)
        return this.equals((getAdverts_args)that);
      return false;
    }

    public boolean equals(getAdverts_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_lastLoadedTopicId = true;
      boolean that_present_lastLoadedTopicId = true;
      if (this_present_lastLoadedTopicId || that_present_lastLoadedTopicId) {
        if (!(this_present_lastLoadedTopicId && that_present_lastLoadedTopicId))
          return false;
        if (this.lastLoadedTopicId != that.lastLoadedTopicId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAdverts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedTopicId()).compareTo(other.isSetLastLoadedTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedTopicId, other.lastLoadedTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdverts_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedTopicId:");
      sb.append(this.lastLoadedTopicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdverts_argsStandardSchemeFactory implements SchemeFactory {
      public getAdverts_argsStandardScheme getScheme() {
        return new getAdverts_argsStandardScheme();
      }
    }

    private static class getAdverts_argsStandardScheme extends StandardScheme<getAdverts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdverts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAST_LOADED_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedTopicId = iprot.readI64();
                struct.setLastLoadedTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdverts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOADED_TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedTopicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdverts_argsTupleSchemeFactory implements SchemeFactory {
      public getAdverts_argsTupleScheme getScheme() {
        return new getAdverts_argsTupleScheme();
      }
    }

    private static class getAdverts_argsTupleScheme extends TupleScheme<getAdverts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdverts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetLastLoadedTopicId()) {
          optionals.set(1);
        }
        if (struct.isSetLength()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetLastLoadedTopicId()) {
          oprot.writeI64(struct.lastLoadedTopicId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdverts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastLoadedTopicId = iprot.readI64();
          struct.setLastLoadedTopicIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getAdverts_result implements org.apache.thrift.TBase<getAdverts_result, getAdverts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdverts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdverts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdverts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdverts_resultTupleSchemeFactory());
    }

    public TopicListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdverts_result.class, metaDataMap);
    }

    public getAdverts_result() {
    }

    public getAdverts_result(
      TopicListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdverts_result(getAdverts_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopicListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getAdverts_result deepCopy() {
      return new getAdverts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public TopicListPart getSuccess() {
      return this.success;
    }

    public getAdverts_result setSuccess(TopicListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getAdverts_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopicListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdverts_result)
        return this.equals((getAdverts_result)that);
      return false;
    }

    public boolean equals(getAdverts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAdverts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdverts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdverts_resultStandardSchemeFactory implements SchemeFactory {
      public getAdverts_resultStandardScheme getScheme() {
        return new getAdverts_resultStandardScheme();
      }
    }

    private static class getAdverts_resultStandardScheme extends StandardScheme<getAdverts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdverts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopicListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdverts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdverts_resultTupleSchemeFactory implements SchemeFactory {
      public getAdverts_resultTupleScheme getScheme() {
        return new getAdverts_resultTupleScheme();
      }
    }

    private static class getAdverts_resultTupleScheme extends TupleScheme<getAdverts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdverts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdverts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TopicListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getTopics_args implements org.apache.thrift.TBase<getTopics_args, getTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopics_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COMMMUNITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commmunityId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedTopicId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopics_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public long rubricId; // required
    public int commmunityId; // required
    public long lastLoadedTopicId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      RUBRIC_ID((short)2, "rubricId"),
      COMMMUNITY_ID((short)3, "commmunityId"),
      LAST_LOADED_TOPIC_ID((short)4, "lastLoadedTopicId"),
      LENGTH((short)5, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // RUBRIC_ID
            return RUBRIC_ID;
          case 3: // COMMMUNITY_ID
            return COMMMUNITY_ID;
          case 4: // LAST_LOADED_TOPIC_ID
            return LAST_LOADED_TOPIC_ID;
          case 5: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __RUBRICID_ISSET_ID = 1;
    private static final int __COMMMUNITYID_ISSET_ID = 2;
    private static final int __LASTLOADEDTOPICID_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMMUNITY_ID, new org.apache.thrift.meta_data.FieldMetaData("commmunityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAST_LOADED_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopics_args.class, metaDataMap);
    }

    public getTopics_args() {
    }

    public getTopics_args(
      long groupId,
      long rubricId,
      int commmunityId,
      long lastLoadedTopicId,
      int length)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopics_args(getTopics_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      this.rubricId = other.rubricId;
      this.commmunityId = other.commmunityId;
      this.lastLoadedTopicId = other.lastLoadedTopicId;
      this.length = other.length;
    }

    public getTopics_args deepCopy() {
      return new getTopics_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      setRubricIdIsSet(false);
      this.rubricId = 0;
      setCommmunityIdIsSet(false);
      this.commmunityId = 0;
      setLastLoadedTopicIdIsSet(false);
      this.lastLoadedTopicId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getTopics_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public long getRubricId() {
      return this.rubricId;
    }

    public getTopics_args setRubricId(long rubricId) {
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      return this;
    }

    public void unsetRubricId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
    public boolean isSetRubricId() {
      return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    public void setRubricIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
    }

    public int getCommmunityId() {
      return this.commmunityId;
    }

    public getTopics_args setCommmunityId(int commmunityId) {
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      return this;
    }

    public void unsetCommmunityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    /** Returns true if field commmunityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommmunityId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    public void setCommmunityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID, value);
    }

    public long getLastLoadedTopicId() {
      return this.lastLoadedTopicId;
    }

    public getTopics_args setLastLoadedTopicId(long lastLoadedTopicId) {
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    /** Returns true if field lastLoadedTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    public void setLastLoadedTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getTopics_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case RUBRIC_ID:
        if (value == null) {
          unsetRubricId();
        } else {
          setRubricId((Long)value);
        }
        break;

      case COMMMUNITY_ID:
        if (value == null) {
          unsetCommmunityId();
        } else {
          setCommmunityId((Integer)value);
        }
        break;

      case LAST_LOADED_TOPIC_ID:
        if (value == null) {
          unsetLastLoadedTopicId();
        } else {
          setLastLoadedTopicId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case RUBRIC_ID:
        return Long.valueOf(getRubricId());

      case COMMMUNITY_ID:
        return Integer.valueOf(getCommmunityId());

      case LAST_LOADED_TOPIC_ID:
        return Long.valueOf(getLastLoadedTopicId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case RUBRIC_ID:
        return isSetRubricId();
      case COMMMUNITY_ID:
        return isSetCommmunityId();
      case LAST_LOADED_TOPIC_ID:
        return isSetLastLoadedTopicId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopics_args)
        return this.equals((getTopics_args)that);
      return false;
    }

    public boolean equals(getTopics_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_rubricId = true;
      boolean that_present_rubricId = true;
      if (this_present_rubricId || that_present_rubricId) {
        if (!(this_present_rubricId && that_present_rubricId))
          return false;
        if (this.rubricId != that.rubricId)
          return false;
      }

      boolean this_present_commmunityId = true;
      boolean that_present_commmunityId = true;
      if (this_present_commmunityId || that_present_commmunityId) {
        if (!(this_present_commmunityId && that_present_commmunityId))
          return false;
        if (this.commmunityId != that.commmunityId)
          return false;
      }

      boolean this_present_lastLoadedTopicId = true;
      boolean that_present_lastLoadedTopicId = true;
      if (this_present_lastLoadedTopicId || that_present_lastLoadedTopicId) {
        if (!(this_present_lastLoadedTopicId && that_present_lastLoadedTopicId))
          return false;
        if (this.lastLoadedTopicId != that.lastLoadedTopicId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRubricId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommmunityId()).compareTo(other.isSetCommmunityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommmunityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commmunityId, other.commmunityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedTopicId()).compareTo(other.isSetLastLoadedTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedTopicId, other.lastLoadedTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopics_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rubricId:");
      sb.append(this.rubricId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commmunityId:");
      sb.append(this.commmunityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedTopicId:");
      sb.append(this.lastLoadedTopicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopics_argsStandardSchemeFactory implements SchemeFactory {
      public getTopics_argsStandardScheme getScheme() {
        return new getTopics_argsStandardScheme();
      }
    }

    private static class getTopics_argsStandardScheme extends StandardScheme<getTopics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUBRIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rubricId = iprot.readI64();
                struct.setRubricIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMMUNITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commmunityId = iprot.readI32();
                struct.setCommmunityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedTopicId = iprot.readI64();
                struct.setLastLoadedTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
        oprot.writeI64(struct.rubricId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMMUNITY_ID_FIELD_DESC);
        oprot.writeI32(struct.commmunityId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOADED_TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedTopicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopics_argsTupleSchemeFactory implements SchemeFactory {
      public getTopics_argsTupleScheme getScheme() {
        return new getTopics_argsTupleScheme();
      }
    }

    private static class getTopics_argsTupleScheme extends TupleScheme<getTopics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetRubricId()) {
          optionals.set(1);
        }
        if (struct.isSetCommmunityId()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedTopicId()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetRubricId()) {
          oprot.writeI64(struct.rubricId);
        }
        if (struct.isSetCommmunityId()) {
          oprot.writeI32(struct.commmunityId);
        }
        if (struct.isSetLastLoadedTopicId()) {
          oprot.writeI64(struct.lastLoadedTopicId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rubricId = iprot.readI64();
          struct.setRubricIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commmunityId = iprot.readI32();
          struct.setCommmunityIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedTopicId = iprot.readI64();
          struct.setLastLoadedTopicIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getTopics_result implements org.apache.thrift.TBase<getTopics_result, getTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopics_resultTupleSchemeFactory());
    }

    public TopicListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopics_result.class, metaDataMap);
    }

    public getTopics_result() {
    }

    public getTopics_result(
      TopicListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopics_result(getTopics_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopicListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getTopics_result deepCopy() {
      return new getTopics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public TopicListPart getSuccess() {
      return this.success;
    }

    public getTopics_result setSuccess(TopicListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getTopics_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopicListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopics_result)
        return this.equals((getTopics_result)that);
      return false;
    }

    public boolean equals(getTopics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopics_resultStandardSchemeFactory implements SchemeFactory {
      public getTopics_resultStandardScheme getScheme() {
        return new getTopics_resultStandardScheme();
      }
    }

    private static class getTopics_resultStandardScheme extends StandardScheme<getTopics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopicListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopics_resultTupleSchemeFactory implements SchemeFactory {
      public getTopics_resultTupleScheme getScheme() {
        return new getTopics_resultTupleScheme();
      }
    }

    private static class getTopics_resultTupleScheme extends TupleScheme<getTopics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TopicListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getImportantTopics_args implements org.apache.thrift.TBase<getImportantTopics_args, getImportantTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImportantTopics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImportantTopics_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COMMMUNITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commmunityId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getImportantTopics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getImportantTopics_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public long rubricId; // required
    public int commmunityId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      RUBRIC_ID((short)2, "rubricId"),
      COMMMUNITY_ID((short)3, "commmunityId"),
      LENGTH((short)4, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // RUBRIC_ID
            return RUBRIC_ID;
          case 3: // COMMMUNITY_ID
            return COMMMUNITY_ID;
          case 4: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __RUBRICID_ISSET_ID = 1;
    private static final int __COMMMUNITYID_ISSET_ID = 2;
    private static final int __LENGTH_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMMUNITY_ID, new org.apache.thrift.meta_data.FieldMetaData("commmunityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImportantTopics_args.class, metaDataMap);
    }

    public getImportantTopics_args() {
    }

    public getImportantTopics_args(
      long groupId,
      long rubricId,
      int commmunityId,
      int length)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImportantTopics_args(getImportantTopics_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      this.rubricId = other.rubricId;
      this.commmunityId = other.commmunityId;
      this.length = other.length;
    }

    public getImportantTopics_args deepCopy() {
      return new getImportantTopics_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      setRubricIdIsSet(false);
      this.rubricId = 0;
      setCommmunityIdIsSet(false);
      this.commmunityId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getImportantTopics_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public long getRubricId() {
      return this.rubricId;
    }

    public getImportantTopics_args setRubricId(long rubricId) {
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      return this;
    }

    public void unsetRubricId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
    public boolean isSetRubricId() {
      return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    public void setRubricIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
    }

    public int getCommmunityId() {
      return this.commmunityId;
    }

    public getImportantTopics_args setCommmunityId(int commmunityId) {
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      return this;
    }

    public void unsetCommmunityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    /** Returns true if field commmunityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommmunityId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    public void setCommmunityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getImportantTopics_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case RUBRIC_ID:
        if (value == null) {
          unsetRubricId();
        } else {
          setRubricId((Long)value);
        }
        break;

      case COMMMUNITY_ID:
        if (value == null) {
          unsetCommmunityId();
        } else {
          setCommmunityId((Integer)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case RUBRIC_ID:
        return Long.valueOf(getRubricId());

      case COMMMUNITY_ID:
        return Integer.valueOf(getCommmunityId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case RUBRIC_ID:
        return isSetRubricId();
      case COMMMUNITY_ID:
        return isSetCommmunityId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getImportantTopics_args)
        return this.equals((getImportantTopics_args)that);
      return false;
    }

    public boolean equals(getImportantTopics_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_rubricId = true;
      boolean that_present_rubricId = true;
      if (this_present_rubricId || that_present_rubricId) {
        if (!(this_present_rubricId && that_present_rubricId))
          return false;
        if (this.rubricId != that.rubricId)
          return false;
      }

      boolean this_present_commmunityId = true;
      boolean that_present_commmunityId = true;
      if (this_present_commmunityId || that_present_commmunityId) {
        if (!(this_present_commmunityId && that_present_commmunityId))
          return false;
        if (this.commmunityId != that.commmunityId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getImportantTopics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRubricId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommmunityId()).compareTo(other.isSetCommmunityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommmunityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commmunityId, other.commmunityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getImportantTopics_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rubricId:");
      sb.append(this.rubricId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commmunityId:");
      sb.append(this.commmunityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImportantTopics_argsStandardSchemeFactory implements SchemeFactory {
      public getImportantTopics_argsStandardScheme getScheme() {
        return new getImportantTopics_argsStandardScheme();
      }
    }

    private static class getImportantTopics_argsStandardScheme extends StandardScheme<getImportantTopics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImportantTopics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUBRIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rubricId = iprot.readI64();
                struct.setRubricIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMMUNITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commmunityId = iprot.readI32();
                struct.setCommmunityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImportantTopics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
        oprot.writeI64(struct.rubricId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMMUNITY_ID_FIELD_DESC);
        oprot.writeI32(struct.commmunityId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImportantTopics_argsTupleSchemeFactory implements SchemeFactory {
      public getImportantTopics_argsTupleScheme getScheme() {
        return new getImportantTopics_argsTupleScheme();
      }
    }

    private static class getImportantTopics_argsTupleScheme extends TupleScheme<getImportantTopics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImportantTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetRubricId()) {
          optionals.set(1);
        }
        if (struct.isSetCommmunityId()) {
          optionals.set(2);
        }
        if (struct.isSetLength()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetRubricId()) {
          oprot.writeI64(struct.rubricId);
        }
        if (struct.isSetCommmunityId()) {
          oprot.writeI32(struct.commmunityId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImportantTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rubricId = iprot.readI64();
          struct.setRubricIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commmunityId = iprot.readI32();
          struct.setCommmunityIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getImportantTopics_result implements org.apache.thrift.TBase<getImportantTopics_result, getImportantTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImportantTopics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImportantTopics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getImportantTopics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getImportantTopics_resultTupleSchemeFactory());
    }

    public TopicListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImportantTopics_result.class, metaDataMap);
    }

    public getImportantTopics_result() {
    }

    public getImportantTopics_result(
      TopicListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImportantTopics_result(getImportantTopics_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopicListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getImportantTopics_result deepCopy() {
      return new getImportantTopics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public TopicListPart getSuccess() {
      return this.success;
    }

    public getImportantTopics_result setSuccess(TopicListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getImportantTopics_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopicListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getImportantTopics_result)
        return this.equals((getImportantTopics_result)that);
      return false;
    }

    public boolean equals(getImportantTopics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getImportantTopics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getImportantTopics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImportantTopics_resultStandardSchemeFactory implements SchemeFactory {
      public getImportantTopics_resultStandardScheme getScheme() {
        return new getImportantTopics_resultStandardScheme();
      }
    }

    private static class getImportantTopics_resultStandardScheme extends StandardScheme<getImportantTopics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImportantTopics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopicListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImportantTopics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImportantTopics_resultTupleSchemeFactory implements SchemeFactory {
      public getImportantTopics_resultTupleScheme getScheme() {
        return new getImportantTopics_resultTupleScheme();
      }
    }

    private static class getImportantTopics_resultTupleScheme extends TupleScheme<getImportantTopics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImportantTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImportantTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TopicListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getMessages_args implements org.apache.thrift.TBase<getMessages_args, getMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public long groupId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType messageType; // required
    public long lastLoadedId; // required
    public boolean archived; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      GROUP_ID((short)2, "groupId"),
      /**
       * 
       * @see MessageType
       */
      MESSAGE_TYPE((short)3, "messageType"),
      LAST_LOADED_ID((short)4, "lastLoadedId"),
      ARCHIVED((short)5, "archived"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          case 5: // ARCHIVED
            return ARCHIVED;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __LASTLOADEDID_ISSET_ID = 2;
    private static final int __ARCHIVED_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_args.class, metaDataMap);
    }

    public getMessages_args() {
    }

    public getMessages_args(
      long topicId,
      long groupId,
      MessageType messageType,
      long lastLoadedId,
      boolean archived,
      int length)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.messageType = messageType;
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      this.archived = archived;
      setArchivedIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_args(getMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.groupId = other.groupId;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.lastLoadedId = other.lastLoadedId;
      this.archived = other.archived;
      this.length = other.length;
    }

    public getMessages_args deepCopy() {
      return new getMessages_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.messageType = null;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
      setArchivedIsSet(false);
      this.archived = false;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public getMessages_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getMessages_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     * 
     * @see MessageType
     */
    public getMessages_args setMessageType(MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getMessages_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public boolean isArchived() {
      return this.archived;
    }

    public getMessages_args setArchived(boolean archived) {
      this.archived = archived;
      setArchivedIsSet(true);
      return this;
    }

    public void unsetArchived() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    /** Returns true if field archived is set (has been assigned a value) and false otherwise */
    public boolean isSetArchived() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    public void setArchivedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getMessages_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((MessageType)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      case ARCHIVED:
        if (value == null) {
          unsetArchived();
        } else {
          setArchived((Boolean)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case MESSAGE_TYPE:
        return getMessageType();

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      case ARCHIVED:
        return Boolean.valueOf(isArchived());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case GROUP_ID:
        return isSetGroupId();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      case ARCHIVED:
        return isSetArchived();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_args)
        return this.equals((getMessages_args)that);
      return false;
    }

    public boolean equals(getMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      boolean this_present_archived = true;
      boolean that_present_archived = true;
      if (this_present_archived || that_present_archived) {
        if (!(this_present_archived && that_present_archived))
          return false;
        if (this.archived != that.archived)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("archived:");
      sb.append(this.archived);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getMessages_argsStandardScheme getScheme() {
        return new getMessages_argsStandardScheme();
      }
    }

    private static class getMessages_argsStandardScheme extends StandardScheme<getMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.archived = iprot.readBool();
                struct.setArchivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.archived);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getMessages_argsTupleScheme getScheme() {
        return new getMessages_argsTupleScheme();
      }
    }

    private static class getMessages_argsTupleScheme extends TupleScheme<getMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetMessageType()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(3);
        }
        if (struct.isSetArchived()) {
          optionals.set(4);
        }
        if (struct.isSetLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
        if (struct.isSetArchived()) {
          oprot.writeBool(struct.archived);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.messageType = MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.archived = iprot.readBool();
          struct.setArchivedIsSet(true);
        }
        if (incoming.get(5)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getMessages_result implements org.apache.thrift.TBase<getMessages_result, getMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_resultTupleSchemeFactory());
    }

    public MessageListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_result.class, metaDataMap);
    }

    public getMessages_result() {
    }

    public getMessages_result(
      MessageListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_result(getMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getMessages_result deepCopy() {
      return new getMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public MessageListPart getSuccess() {
      return this.success;
    }

    public getMessages_result setSuccess(MessageListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getMessages_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_result)
        return this.equals((getMessages_result)that);
      return false;
    }

    public boolean equals(getMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getMessages_resultStandardScheme getScheme() {
        return new getMessages_resultStandardScheme();
      }
    }

    private static class getMessages_resultStandardScheme extends StandardScheme<getMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getMessages_resultTupleScheme getScheme() {
        return new getMessages_resultTupleScheme();
      }
    }

    private static class getMessages_resultTupleScheme extends TupleScheme<getMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getFirstLevelMessages_args implements org.apache.thrift.TBase<getFirstLevelMessages_args, getFirstLevelMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstLevelMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstLevelMessages_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstLevelMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstLevelMessages_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public long groupId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType messageType; // required
    public long lastLoadedId; // required
    public boolean archived; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      GROUP_ID((short)2, "groupId"),
      /**
       * 
       * @see MessageType
       */
      MESSAGE_TYPE((short)3, "messageType"),
      LAST_LOADED_ID((short)4, "lastLoadedId"),
      ARCHIVED((short)5, "archived"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          case 5: // ARCHIVED
            return ARCHIVED;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __LASTLOADEDID_ISSET_ID = 2;
    private static final int __ARCHIVED_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstLevelMessages_args.class, metaDataMap);
    }

    public getFirstLevelMessages_args() {
    }

    public getFirstLevelMessages_args(
      long topicId,
      long groupId,
      MessageType messageType,
      long lastLoadedId,
      boolean archived,
      int length)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.messageType = messageType;
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      this.archived = archived;
      setArchivedIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstLevelMessages_args(getFirstLevelMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.groupId = other.groupId;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.lastLoadedId = other.lastLoadedId;
      this.archived = other.archived;
      this.length = other.length;
    }

    public getFirstLevelMessages_args deepCopy() {
      return new getFirstLevelMessages_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.messageType = null;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
      setArchivedIsSet(false);
      this.archived = false;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public getFirstLevelMessages_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getFirstLevelMessages_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     * 
     * @see MessageType
     */
    public getFirstLevelMessages_args setMessageType(MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getFirstLevelMessages_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public boolean isArchived() {
      return this.archived;
    }

    public getFirstLevelMessages_args setArchived(boolean archived) {
      this.archived = archived;
      setArchivedIsSet(true);
      return this;
    }

    public void unsetArchived() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    /** Returns true if field archived is set (has been assigned a value) and false otherwise */
    public boolean isSetArchived() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    public void setArchivedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getFirstLevelMessages_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((MessageType)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      case ARCHIVED:
        if (value == null) {
          unsetArchived();
        } else {
          setArchived((Boolean)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case MESSAGE_TYPE:
        return getMessageType();

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      case ARCHIVED:
        return Boolean.valueOf(isArchived());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case GROUP_ID:
        return isSetGroupId();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      case ARCHIVED:
        return isSetArchived();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstLevelMessages_args)
        return this.equals((getFirstLevelMessages_args)that);
      return false;
    }

    public boolean equals(getFirstLevelMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      boolean this_present_archived = true;
      boolean that_present_archived = true;
      if (this_present_archived || that_present_archived) {
        if (!(this_present_archived && that_present_archived))
          return false;
        if (this.archived != that.archived)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFirstLevelMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstLevelMessages_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("archived:");
      sb.append(this.archived);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstLevelMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_argsStandardScheme getScheme() {
        return new getFirstLevelMessages_argsStandardScheme();
      }
    }

    private static class getFirstLevelMessages_argsStandardScheme extends StandardScheme<getFirstLevelMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.archived = iprot.readBool();
                struct.setArchivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.archived);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstLevelMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_argsTupleScheme getScheme() {
        return new getFirstLevelMessages_argsTupleScheme();
      }
    }

    private static class getFirstLevelMessages_argsTupleScheme extends TupleScheme<getFirstLevelMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetMessageType()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(3);
        }
        if (struct.isSetArchived()) {
          optionals.set(4);
        }
        if (struct.isSetLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
        if (struct.isSetArchived()) {
          oprot.writeBool(struct.archived);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.messageType = MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.archived = iprot.readBool();
          struct.setArchivedIsSet(true);
        }
        if (incoming.get(5)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getFirstLevelMessages_result implements org.apache.thrift.TBase<getFirstLevelMessages_result, getFirstLevelMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstLevelMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstLevelMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstLevelMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstLevelMessages_resultTupleSchemeFactory());
    }

    public MessageListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstLevelMessages_result.class, metaDataMap);
    }

    public getFirstLevelMessages_result() {
    }

    public getFirstLevelMessages_result(
      MessageListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstLevelMessages_result(getFirstLevelMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getFirstLevelMessages_result deepCopy() {
      return new getFirstLevelMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public MessageListPart getSuccess() {
      return this.success;
    }

    public getFirstLevelMessages_result setSuccess(MessageListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getFirstLevelMessages_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstLevelMessages_result)
        return this.equals((getFirstLevelMessages_result)that);
      return false;
    }

    public boolean equals(getFirstLevelMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFirstLevelMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstLevelMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstLevelMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_resultStandardScheme getScheme() {
        return new getFirstLevelMessages_resultStandardScheme();
      }
    }

    private static class getFirstLevelMessages_resultStandardScheme extends StandardScheme<getFirstLevelMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstLevelMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_resultTupleScheme getScheme() {
        return new getFirstLevelMessages_resultTupleScheme();
      }
    }

    private static class getFirstLevelMessages_resultTupleScheme extends TupleScheme<getFirstLevelMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getMessagesAsList_args implements org.apache.thrift.TBase<getMessagesAsList_args, getMessagesAsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessagesAsList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessagesAsList_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessagesAsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessagesAsList_argsTupleSchemeFactory());
    }

    public long topicId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType messageType; // required
    public long lastLoadedId; // required
    public boolean archived; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      /**
       * 
       * @see MessageType
       */
      MESSAGE_TYPE((short)3, "messageType"),
      LAST_LOADED_ID((short)4, "lastLoadedId"),
      ARCHIVED((short)5, "archived"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 3: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          case 5: // ARCHIVED
            return ARCHIVED;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __LASTLOADEDID_ISSET_ID = 1;
    private static final int __ARCHIVED_ISSET_ID = 2;
    private static final int __LENGTH_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessagesAsList_args.class, metaDataMap);
    }

    public getMessagesAsList_args() {
    }

    public getMessagesAsList_args(
      long topicId,
      MessageType messageType,
      long lastLoadedId,
      boolean archived,
      int length)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.messageType = messageType;
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      this.archived = archived;
      setArchivedIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessagesAsList_args(getMessagesAsList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.lastLoadedId = other.lastLoadedId;
      this.archived = other.archived;
      this.length = other.length;
    }

    public getMessagesAsList_args deepCopy() {
      return new getMessagesAsList_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      this.messageType = null;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
      setArchivedIsSet(false);
      this.archived = false;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public getMessagesAsList_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     * 
     * @see MessageType
     */
    public getMessagesAsList_args setMessageType(MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getMessagesAsList_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public boolean isArchived() {
      return this.archived;
    }

    public getMessagesAsList_args setArchived(boolean archived) {
      this.archived = archived;
      setArchivedIsSet(true);
      return this;
    }

    public void unsetArchived() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    /** Returns true if field archived is set (has been assigned a value) and false otherwise */
    public boolean isSetArchived() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    public void setArchivedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getMessagesAsList_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((MessageType)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      case ARCHIVED:
        if (value == null) {
          unsetArchived();
        } else {
          setArchived((Boolean)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case MESSAGE_TYPE:
        return getMessageType();

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      case ARCHIVED:
        return Boolean.valueOf(isArchived());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      case ARCHIVED:
        return isSetArchived();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessagesAsList_args)
        return this.equals((getMessagesAsList_args)that);
      return false;
    }

    public boolean equals(getMessagesAsList_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      boolean this_present_archived = true;
      boolean that_present_archived = true;
      if (this_present_archived || that_present_archived) {
        if (!(this_present_archived && that_present_archived))
          return false;
        if (this.archived != that.archived)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessagesAsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessagesAsList_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("archived:");
      sb.append(this.archived);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessagesAsList_argsStandardSchemeFactory implements SchemeFactory {
      public getMessagesAsList_argsStandardScheme getScheme() {
        return new getMessagesAsList_argsStandardScheme();
      }
    }

    private static class getMessagesAsList_argsStandardScheme extends StandardScheme<getMessagesAsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessagesAsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.archived = iprot.readBool();
                struct.setArchivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessagesAsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.archived);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessagesAsList_argsTupleSchemeFactory implements SchemeFactory {
      public getMessagesAsList_argsTupleScheme getScheme() {
        return new getMessagesAsList_argsTupleScheme();
      }
    }

    private static class getMessagesAsList_argsTupleScheme extends TupleScheme<getMessagesAsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessagesAsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetMessageType()) {
          optionals.set(1);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(2);
        }
        if (struct.isSetArchived()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
        if (struct.isSetArchived()) {
          oprot.writeBool(struct.archived);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessagesAsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.messageType = MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.archived = iprot.readBool();
          struct.setArchivedIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getMessagesAsList_result implements org.apache.thrift.TBase<getMessagesAsList_result, getMessagesAsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessagesAsList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessagesAsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessagesAsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessagesAsList_resultTupleSchemeFactory());
    }

    public MessageListPart success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessagesAsList_result.class, metaDataMap);
    }

    public getMessagesAsList_result() {
    }

    public getMessagesAsList_result(
      MessageListPart success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessagesAsList_result(getMessagesAsList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getMessagesAsList_result deepCopy() {
      return new getMessagesAsList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public MessageListPart getSuccess() {
      return this.success;
    }

    public getMessagesAsList_result setSuccess(MessageListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getMessagesAsList_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessagesAsList_result)
        return this.equals((getMessagesAsList_result)that);
      return false;
    }

    public boolean equals(getMessagesAsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessagesAsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessagesAsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessagesAsList_resultStandardSchemeFactory implements SchemeFactory {
      public getMessagesAsList_resultStandardScheme getScheme() {
        return new getMessagesAsList_resultStandardScheme();
      }
    }

    private static class getMessagesAsList_resultStandardScheme extends StandardScheme<getMessagesAsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessagesAsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessagesAsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessagesAsList_resultTupleSchemeFactory implements SchemeFactory {
      public getMessagesAsList_resultTupleScheme getScheme() {
        return new getMessagesAsList_resultTupleScheme();
      }
    }

    private static class getMessagesAsList_resultTupleScheme extends TupleScheme<getMessagesAsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessagesAsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessagesAsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class markMessageImportant_args implements org.apache.thrift.TBase<markMessageImportant_args, markMessageImportant_args._Fields>, java.io.Serializable, Cloneable, Comparable<markMessageImportant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markMessageImportant_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField IS_IMPORTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("isImportant", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markMessageImportant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markMessageImportant_argsTupleSchemeFactory());
    }

    public long messageId; // required
    public boolean isImportant; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      IS_IMPORTANT((short)2, "isImportant");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // IS_IMPORTANT
            return IS_IMPORTANT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private static final int __ISIMPORTANT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IS_IMPORTANT, new org.apache.thrift.meta_data.FieldMetaData("isImportant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markMessageImportant_args.class, metaDataMap);
    }

    public markMessageImportant_args() {
    }

    public markMessageImportant_args(
      long messageId,
      boolean isImportant)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
      this.isImportant = isImportant;
      setIsImportantIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markMessageImportant_args(markMessageImportant_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.messageId = other.messageId;
      this.isImportant = other.isImportant;
    }

    public markMessageImportant_args deepCopy() {
      return new markMessageImportant_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
      setIsImportantIsSet(false);
      this.isImportant = false;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public markMessageImportant_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public boolean isIsImportant() {
      return this.isImportant;
    }

    public markMessageImportant_args setIsImportant(boolean isImportant) {
      this.isImportant = isImportant;
      setIsImportantIsSet(true);
      return this;
    }

    public void unsetIsImportant() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISIMPORTANT_ISSET_ID);
    }

    /** Returns true if field isImportant is set (has been assigned a value) and false otherwise */
    public boolean isSetIsImportant() {
      return EncodingUtils.testBit(__isset_bitfield, __ISIMPORTANT_ISSET_ID);
    }

    public void setIsImportantIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISIMPORTANT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      case IS_IMPORTANT:
        if (value == null) {
          unsetIsImportant();
        } else {
          setIsImportant((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return Long.valueOf(getMessageId());

      case IS_IMPORTANT:
        return Boolean.valueOf(isIsImportant());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case IS_IMPORTANT:
        return isSetIsImportant();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markMessageImportant_args)
        return this.equals((markMessageImportant_args)that);
      return false;
    }

    public boolean equals(markMessageImportant_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      boolean this_present_isImportant = true;
      boolean that_present_isImportant = true;
      if (this_present_isImportant || that_present_isImportant) {
        if (!(this_present_isImportant && that_present_isImportant))
          return false;
        if (this.isImportant != that.isImportant)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markMessageImportant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsImportant()).compareTo(other.isSetIsImportant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsImportant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isImportant, other.isImportant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markMessageImportant_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isImportant:");
      sb.append(this.isImportant);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markMessageImportant_argsStandardSchemeFactory implements SchemeFactory {
      public markMessageImportant_argsStandardScheme getScheme() {
        return new markMessageImportant_argsStandardScheme();
      }
    }

    private static class markMessageImportant_argsStandardScheme extends StandardScheme<markMessageImportant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markMessageImportant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.messageId = iprot.readI64();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_IMPORTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isImportant = iprot.readBool();
                struct.setIsImportantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markMessageImportant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_IMPORTANT_FIELD_DESC);
        oprot.writeBool(struct.isImportant);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markMessageImportant_argsTupleSchemeFactory implements SchemeFactory {
      public markMessageImportant_argsTupleScheme getScheme() {
        return new markMessageImportant_argsTupleScheme();
      }
    }

    private static class markMessageImportant_argsTupleScheme extends TupleScheme<markMessageImportant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markMessageImportant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageId()) {
          optionals.set(0);
        }
        if (struct.isSetIsImportant()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessageId()) {
          oprot.writeI64(struct.messageId);
        }
        if (struct.isSetIsImportant()) {
          oprot.writeBool(struct.isImportant);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markMessageImportant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.messageId = iprot.readI64();
          struct.setMessageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isImportant = iprot.readBool();
          struct.setIsImportantIsSet(true);
        }
      }
    }

  }

  public static class markMessageImportant_result implements org.apache.thrift.TBase<markMessageImportant_result, markMessageImportant_result._Fields>, java.io.Serializable, Cloneable, Comparable<markMessageImportant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markMessageImportant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markMessageImportant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markMessageImportant_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markMessageImportant_result.class, metaDataMap);
    }

    public markMessageImportant_result() {
    }

    public markMessageImportant_result(
      int success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markMessageImportant_result(markMessageImportant_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public markMessageImportant_result deepCopy() {
      return new markMessageImportant_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public markMessageImportant_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public markMessageImportant_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markMessageImportant_result)
        return this.equals((markMessageImportant_result)that);
      return false;
    }

    public boolean equals(markMessageImportant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markMessageImportant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markMessageImportant_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markMessageImportant_resultStandardSchemeFactory implements SchemeFactory {
      public markMessageImportant_resultStandardScheme getScheme() {
        return new markMessageImportant_resultStandardScheme();
      }
    }

    private static class markMessageImportant_resultStandardScheme extends StandardScheme<markMessageImportant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markMessageImportant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markMessageImportant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markMessageImportant_resultTupleSchemeFactory implements SchemeFactory {
      public markMessageImportant_resultTupleScheme getScheme() {
        return new markMessageImportant_resultTupleScheme();
      }
    }

    private static class markMessageImportant_resultTupleScheme extends TupleScheme<markMessageImportant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markMessageImportant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markMessageImportant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class markMessageLike_args implements org.apache.thrift.TBase<markMessageLike_args, markMessageLike_args._Fields>, java.io.Serializable, Cloneable, Comparable<markMessageLike_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markMessageLike_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markMessageLike_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markMessageLike_argsTupleSchemeFactory());
    }

    public long messageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markMessageLike_args.class, metaDataMap);
    }

    public markMessageLike_args() {
    }

    public markMessageLike_args(
      long messageId)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markMessageLike_args(markMessageLike_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.messageId = other.messageId;
    }

    public markMessageLike_args deepCopy() {
      return new markMessageLike_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public markMessageLike_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return Long.valueOf(getMessageId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markMessageLike_args)
        return this.equals((markMessageLike_args)that);
      return false;
    }

    public boolean equals(markMessageLike_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markMessageLike_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markMessageLike_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markMessageLike_argsStandardSchemeFactory implements SchemeFactory {
      public markMessageLike_argsStandardScheme getScheme() {
        return new markMessageLike_argsStandardScheme();
      }
    }

    private static class markMessageLike_argsStandardScheme extends StandardScheme<markMessageLike_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markMessageLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.messageId = iprot.readI64();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markMessageLike_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markMessageLike_argsTupleSchemeFactory implements SchemeFactory {
      public markMessageLike_argsTupleScheme getScheme() {
        return new markMessageLike_argsTupleScheme();
      }
    }

    private static class markMessageLike_argsTupleScheme extends TupleScheme<markMessageLike_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markMessageLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessageId()) {
          oprot.writeI64(struct.messageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markMessageLike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.messageId = iprot.readI64();
          struct.setMessageIdIsSet(true);
        }
      }
    }

  }

  public static class markMessageLike_result implements org.apache.thrift.TBase<markMessageLike_result, markMessageLike_result._Fields>, java.io.Serializable, Cloneable, Comparable<markMessageLike_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markMessageLike_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markMessageLike_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markMessageLike_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markMessageLike_result.class, metaDataMap);
    }

    public markMessageLike_result() {
    }

    public markMessageLike_result(
      int success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markMessageLike_result(markMessageLike_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public markMessageLike_result deepCopy() {
      return new markMessageLike_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public markMessageLike_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public markMessageLike_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markMessageLike_result)
        return this.equals((markMessageLike_result)that);
      return false;
    }

    public boolean equals(markMessageLike_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markMessageLike_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markMessageLike_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markMessageLike_resultStandardSchemeFactory implements SchemeFactory {
      public markMessageLike_resultStandardScheme getScheme() {
        return new markMessageLike_resultStandardScheme();
      }
    }

    private static class markMessageLike_resultStandardScheme extends StandardScheme<markMessageLike_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markMessageLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markMessageLike_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markMessageLike_resultTupleSchemeFactory implements SchemeFactory {
      public markMessageLike_resultTupleScheme getScheme() {
        return new markMessageLike_resultTupleScheme();
      }
    }

    private static class markMessageLike_resultTupleScheme extends TupleScheme<markMessageLike_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markMessageLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markMessageLike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
