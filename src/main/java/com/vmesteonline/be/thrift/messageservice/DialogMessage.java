/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.messageservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DialogMessage implements org.apache.thrift.TBase<DialogMessage, DialogMessage._Fields>, java.io.Serializable, Cloneable, Comparable<DialogMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DialogMessage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DialogMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DialogMessageTupleSchemeFactory());
  }

  public long id; // required
  public long dialogId; // required
  public long author; // required
  public String content; // required
  public int created; // required
  public List<Attach> images; // required
  public List<Attach> documents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DIALOG_ID((short)2, "dialogId"),
    AUTHOR((short)3, "author"),
    CONTENT((short)4, "content"),
    CREATED((short)5, "created"),
    IMAGES((short)6, "images"),
    DOCUMENTS((short)7, "documents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DIALOG_ID
          return DIALOG_ID;
        case 3: // AUTHOR
          return AUTHOR;
        case 4: // CONTENT
          return CONTENT;
        case 5: // CREATED
          return CREATED;
        case 6: // IMAGES
          return IMAGES;
        case 7: // DOCUMENTS
          return DOCUMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DIALOGID_ISSET_ID = 1;
  private static final int __AUTHOR_ISSET_ID = 2;
  private static final int __CREATED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attach.class))));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attach.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DialogMessage.class, metaDataMap);
  }

  public DialogMessage() {
  }

  public DialogMessage(
    long id,
    long dialogId,
    long author,
    String content,
    int created,
    List<Attach> images,
    List<Attach> documents)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.dialogId = dialogId;
    setDialogIdIsSet(true);
    this.author = author;
    setAuthorIsSet(true);
    this.content = content;
    this.created = created;
    setCreatedIsSet(true);
    this.images = images;
    this.documents = documents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DialogMessage(DialogMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.dialogId = other.dialogId;
    this.author = other.author;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.created = other.created;
    if (other.isSetImages()) {
      List<Attach> __this__images = new ArrayList<Attach>(other.images.size());
      for (Attach other_element : other.images) {
        __this__images.add(new Attach(other_element));
      }
      this.images = __this__images;
    }
    if (other.isSetDocuments()) {
      List<Attach> __this__documents = new ArrayList<Attach>(other.documents.size());
      for (Attach other_element : other.documents) {
        __this__documents.add(new Attach(other_element));
      }
      this.documents = __this__documents;
    }
  }

  public DialogMessage deepCopy() {
    return new DialogMessage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDialogIdIsSet(false);
    this.dialogId = 0;
    setAuthorIsSet(false);
    this.author = 0;
    this.content = null;
    setCreatedIsSet(false);
    this.created = 0;
    this.images = null;
    this.documents = null;
  }

  public long getId() {
    return this.id;
  }

  public DialogMessage setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getDialogId() {
    return this.dialogId;
  }

  public DialogMessage setDialogId(long dialogId) {
    this.dialogId = dialogId;
    setDialogIdIsSet(true);
    return this;
  }

  public void unsetDialogId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
  }

  /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
  public boolean isSetDialogId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
  }

  public void setDialogIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
  }

  public long getAuthor() {
    return this.author;
  }

  public DialogMessage setAuthor(long author) {
    this.author = author;
    setAuthorIsSet(true);
    return this;
  }

  public void unsetAuthor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHOR_ISSET_ID);
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHOR_ISSET_ID);
  }

  public void setAuthorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHOR_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public DialogMessage setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getCreated() {
    return this.created;
  }

  public DialogMessage setCreated(int created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<Attach> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(Attach elem) {
    if (this.images == null) {
      this.images = new ArrayList<Attach>();
    }
    this.images.add(elem);
  }

  public List<Attach> getImages() {
    return this.images;
  }

  public DialogMessage setImages(List<Attach> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<Attach> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(Attach elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<Attach>();
    }
    this.documents.add(elem);
  }

  public List<Attach> getDocuments() {
    return this.documents;
  }

  public DialogMessage setDocuments(List<Attach> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case DIALOG_ID:
      if (value == null) {
        unsetDialogId();
      } else {
        setDialogId((Long)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Integer)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<Attach>)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<Attach>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case DIALOG_ID:
      return Long.valueOf(getDialogId());

    case AUTHOR:
      return Long.valueOf(getAuthor());

    case CONTENT:
      return getContent();

    case CREATED:
      return Integer.valueOf(getCreated());

    case IMAGES:
      return getImages();

    case DOCUMENTS:
      return getDocuments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DIALOG_ID:
      return isSetDialogId();
    case AUTHOR:
      return isSetAuthor();
    case CONTENT:
      return isSetContent();
    case CREATED:
      return isSetCreated();
    case IMAGES:
      return isSetImages();
    case DOCUMENTS:
      return isSetDocuments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DialogMessage)
      return this.equals((DialogMessage)that);
    return false;
  }

  public boolean equals(DialogMessage that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_dialogId = true;
    boolean that_present_dialogId = true;
    if (this_present_dialogId || that_present_dialogId) {
      if (!(this_present_dialogId && that_present_dialogId))
        return false;
      if (this.dialogId != that.dialogId)
        return false;
    }

    boolean this_present_author = true;
    boolean that_present_author = true;
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (this.author != that.author)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DialogMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DialogMessage(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialogId:");
    sb.append(this.dialogId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    sb.append(this.author);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documents:");
    if (this.documents == null) {
      sb.append("null");
    } else {
      sb.append(this.documents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DialogMessageStandardSchemeFactory implements SchemeFactory {
    public DialogMessageStandardScheme getScheme() {
      return new DialogMessageStandardScheme();
    }
  }

  private static class DialogMessageStandardScheme extends StandardScheme<DialogMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DialogMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIALOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dialogId = iprot.readI64();
              struct.setDialogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.author = iprot.readI64();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.created = iprot.readI32();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.images = new ArrayList<Attach>(_list84.size);
                for (int _i85 = 0; _i85 < _list84.size; ++_i85)
                {
                  Attach _elem86;
                  _elem86 = new Attach();
                  _elem86.read(iprot);
                  struct.images.add(_elem86);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.documents = new ArrayList<Attach>(_list87.size);
                for (int _i88 = 0; _i88 < _list87.size; ++_i88)
                {
                  Attach _elem89;
                  _elem89 = new Attach();
                  _elem89.read(iprot);
                  struct.documents.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DialogMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
      oprot.writeI64(struct.dialogId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
      oprot.writeI64(struct.author);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI32(struct.created);
      oprot.writeFieldEnd();
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
          for (Attach _iter90 : struct.images)
          {
            _iter90.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
          for (Attach _iter91 : struct.documents)
          {
            _iter91.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DialogMessageTupleSchemeFactory implements SchemeFactory {
    public DialogMessageTupleScheme getScheme() {
      return new DialogMessageTupleScheme();
    }
  }

  private static class DialogMessageTupleScheme extends TupleScheme<DialogMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DialogMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDialogId()) {
        optionals.set(1);
      }
      if (struct.isSetAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetCreated()) {
        optionals.set(4);
      }
      if (struct.isSetImages()) {
        optionals.set(5);
      }
      if (struct.isSetDocuments()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetDialogId()) {
        oprot.writeI64(struct.dialogId);
      }
      if (struct.isSetAuthor()) {
        oprot.writeI64(struct.author);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCreated()) {
        oprot.writeI32(struct.created);
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (Attach _iter92 : struct.images)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSetDocuments()) {
        {
          oprot.writeI32(struct.documents.size());
          for (Attach _iter93 : struct.documents)
          {
            _iter93.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DialogMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dialogId = iprot.readI64();
        struct.setDialogIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.author = iprot.readI64();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.created = iprot.readI32();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.images = new ArrayList<Attach>(_list94.size);
          for (int _i95 = 0; _i95 < _list94.size; ++_i95)
          {
            Attach _elem96;
            _elem96 = new Attach();
            _elem96.read(iprot);
            struct.images.add(_elem96);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.documents = new ArrayList<Attach>(_list97.size);
          for (int _i98 = 0; _i98 < _list97.size; ++_i98)
          {
            Attach _elem99;
            _elem99 = new Attach();
            _elem99.read(iprot);
            struct.documents.add(_elem99);
          }
        }
        struct.setDocumentsIsSet(true);
      }
    }
  }

}

