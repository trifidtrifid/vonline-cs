/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.messageservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Topic implements org.apache.thrift.TBase<Topic, Topic._Fields>, java.io.Serializable, Cloneable, Comparable<Topic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topic");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("messageNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VIEWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("viewers", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USERS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("usersNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdate", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LIKES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("likesNum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UNLIKES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikesNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField COMMUNITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communityId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField USERT_TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("usertTopic", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField POLL_FIELD_DESC = new org.apache.thrift.protocol.TField("poll", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopicTupleSchemeFactory());
  }

  public long id; // required
  public String subject; // required
  public Message message; // required
  public int messageNum; // required
  public int viewers; // required
  public int usersNum; // required
  public int lastUpdate; // required
  public int likesNum; // required
  public int unlikesNum; // required
  public long rubricId; // optional
  public long communityId; // optional
  public UserTopic usertTopic; // required
  public com.vmesteonline.be.thrift.ShortUserInfo userInfo; // required
  public Poll poll; // required
  /**
   * 
   * @see com.vmesteonline.be.thrift.GroupType
   */
  public com.vmesteonline.be.thrift.GroupType groupType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SUBJECT((short)2, "subject"),
    MESSAGE((short)3, "message"),
    MESSAGE_NUM((short)4, "messageNum"),
    VIEWERS((short)5, "viewers"),
    USERS_NUM((short)6, "usersNum"),
    LAST_UPDATE((short)7, "lastUpdate"),
    LIKES_NUM((short)8, "likesNum"),
    UNLIKES_NUM((short)9, "unlikesNum"),
    RUBRIC_ID((short)10, "rubricId"),
    COMMUNITY_ID((short)11, "communityId"),
    USERT_TOPIC((short)12, "usertTopic"),
    USER_INFO((short)13, "userInfo"),
    POLL((short)14, "poll"),
    /**
     * 
     * @see com.vmesteonline.be.thrift.GroupType
     */
    GROUP_TYPE((short)15, "groupType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SUBJECT
          return SUBJECT;
        case 3: // MESSAGE
          return MESSAGE;
        case 4: // MESSAGE_NUM
          return MESSAGE_NUM;
        case 5: // VIEWERS
          return VIEWERS;
        case 6: // USERS_NUM
          return USERS_NUM;
        case 7: // LAST_UPDATE
          return LAST_UPDATE;
        case 8: // LIKES_NUM
          return LIKES_NUM;
        case 9: // UNLIKES_NUM
          return UNLIKES_NUM;
        case 10: // RUBRIC_ID
          return RUBRIC_ID;
        case 11: // COMMUNITY_ID
          return COMMUNITY_ID;
        case 12: // USERT_TOPIC
          return USERT_TOPIC;
        case 13: // USER_INFO
          return USER_INFO;
        case 14: // POLL
          return POLL;
        case 15: // GROUP_TYPE
          return GROUP_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MESSAGENUM_ISSET_ID = 1;
  private static final int __VIEWERS_ISSET_ID = 2;
  private static final int __USERSNUM_ISSET_ID = 3;
  private static final int __LASTUPDATE_ISSET_ID = 4;
  private static final int __LIKESNUM_ISSET_ID = 5;
  private static final int __UNLIKESNUM_ISSET_ID = 6;
  private static final int __RUBRICID_ISSET_ID = 7;
  private static final int __COMMUNITYID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RUBRIC_ID,_Fields.COMMUNITY_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
    tmpMap.put(_Fields.MESSAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("messageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWERS, new org.apache.thrift.meta_data.FieldMetaData("viewers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERS_NUM, new org.apache.thrift.meta_data.FieldMetaData("usersNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("lastUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIKES_NUM, new org.apache.thrift.meta_data.FieldMetaData("likesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIKES_NUM, new org.apache.thrift.meta_data.FieldMetaData("unlikesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMUNITY_ID, new org.apache.thrift.meta_data.FieldMetaData("communityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USERT_TOPIC, new org.apache.thrift.meta_data.FieldMetaData("usertTopic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserTopic.class)));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.thrift.ShortUserInfo.class)));
    tmpMap.put(_Fields.POLL, new org.apache.thrift.meta_data.FieldMetaData("poll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Poll.class)));
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.vmesteonline.be.thrift.GroupType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topic.class, metaDataMap);
  }

  public Topic() {
  }

  public Topic(
    long id,
    String subject,
    Message message,
    int messageNum,
    int viewers,
    int usersNum,
    int lastUpdate,
    int likesNum,
    int unlikesNum,
    UserTopic usertTopic,
    com.vmesteonline.be.thrift.ShortUserInfo userInfo,
    Poll poll,
    com.vmesteonline.be.thrift.GroupType groupType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.subject = subject;
    this.message = message;
    this.messageNum = messageNum;
    setMessageNumIsSet(true);
    this.viewers = viewers;
    setViewersIsSet(true);
    this.usersNum = usersNum;
    setUsersNumIsSet(true);
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    this.likesNum = likesNum;
    setLikesNumIsSet(true);
    this.unlikesNum = unlikesNum;
    setUnlikesNumIsSet(true);
    this.usertTopic = usertTopic;
    this.userInfo = userInfo;
    this.poll = poll;
    this.groupType = groupType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topic(Topic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
    this.messageNum = other.messageNum;
    this.viewers = other.viewers;
    this.usersNum = other.usersNum;
    this.lastUpdate = other.lastUpdate;
    this.likesNum = other.likesNum;
    this.unlikesNum = other.unlikesNum;
    this.rubricId = other.rubricId;
    this.communityId = other.communityId;
    if (other.isSetUsertTopic()) {
      this.usertTopic = new UserTopic(other.usertTopic);
    }
    if (other.isSetUserInfo()) {
      this.userInfo = new com.vmesteonline.be.thrift.ShortUserInfo(other.userInfo);
    }
    if (other.isSetPoll()) {
      this.poll = new Poll(other.poll);
    }
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
  }

  public Topic deepCopy() {
    return new Topic(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.subject = null;
    this.message = null;
    setMessageNumIsSet(false);
    this.messageNum = 0;
    setViewersIsSet(false);
    this.viewers = 0;
    setUsersNumIsSet(false);
    this.usersNum = 0;
    setLastUpdateIsSet(false);
    this.lastUpdate = 0;
    setLikesNumIsSet(false);
    this.likesNum = 0;
    setUnlikesNumIsSet(false);
    this.unlikesNum = 0;
    setRubricIdIsSet(false);
    this.rubricId = 0;
    setCommunityIdIsSet(false);
    this.communityId = 0;
    this.usertTopic = null;
    this.userInfo = null;
    this.poll = null;
    this.groupType = null;
  }

  public long getId() {
    return this.id;
  }

  public Topic setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getSubject() {
    return this.subject;
  }

  public Topic setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public Message getMessage() {
    return this.message;
  }

  public Topic setMessage(Message message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getMessageNum() {
    return this.messageNum;
  }

  public Topic setMessageNum(int messageNum) {
    this.messageNum = messageNum;
    setMessageNumIsSet(true);
    return this;
  }

  public void unsetMessageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGENUM_ISSET_ID);
  }

  /** Returns true if field messageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGENUM_ISSET_ID);
  }

  public void setMessageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGENUM_ISSET_ID, value);
  }

  public int getViewers() {
    return this.viewers;
  }

  public Topic setViewers(int viewers) {
    this.viewers = viewers;
    setViewersIsSet(true);
    return this;
  }

  public void unsetViewers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWERS_ISSET_ID);
  }

  /** Returns true if field viewers is set (has been assigned a value) and false otherwise */
  public boolean isSetViewers() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWERS_ISSET_ID);
  }

  public void setViewersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWERS_ISSET_ID, value);
  }

  public int getUsersNum() {
    return this.usersNum;
  }

  public Topic setUsersNum(int usersNum) {
    this.usersNum = usersNum;
    setUsersNumIsSet(true);
    return this;
  }

  public void unsetUsersNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSNUM_ISSET_ID);
  }

  /** Returns true if field usersNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUsersNum() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSNUM_ISSET_ID);
  }

  public void setUsersNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSNUM_ISSET_ID, value);
  }

  public int getLastUpdate() {
    return this.lastUpdate;
  }

  public Topic setLastUpdate(int lastUpdate) {
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    return this;
  }

  public void unsetLastUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  /** Returns true if field lastUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  public void setLastUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATE_ISSET_ID, value);
  }

  public int getLikesNum() {
    return this.likesNum;
  }

  public Topic setLikesNum(int likesNum) {
    this.likesNum = likesNum;
    setLikesNumIsSet(true);
    return this;
  }

  public void unsetLikesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKESNUM_ISSET_ID);
  }

  /** Returns true if field likesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLikesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKESNUM_ISSET_ID);
  }

  public void setLikesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKESNUM_ISSET_ID, value);
  }

  public int getUnlikesNum() {
    return this.unlikesNum;
  }

  public Topic setUnlikesNum(int unlikesNum) {
    this.unlikesNum = unlikesNum;
    setUnlikesNumIsSet(true);
    return this;
  }

  public void unsetUnlikesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID);
  }

  /** Returns true if field unlikesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID);
  }

  public void setUnlikesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID, value);
  }

  public long getRubricId() {
    return this.rubricId;
  }

  public Topic setRubricId(long rubricId) {
    this.rubricId = rubricId;
    setRubricIdIsSet(true);
    return this;
  }

  public void unsetRubricId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
  }

  /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
  public boolean isSetRubricId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
  }

  public void setRubricIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
  }

  public long getCommunityId() {
    return this.communityId;
  }

  public Topic setCommunityId(long communityId) {
    this.communityId = communityId;
    setCommunityIdIsSet(true);
    return this;
  }

  public void unsetCommunityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMUNITYID_ISSET_ID);
  }

  /** Returns true if field communityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunityId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMUNITYID_ISSET_ID);
  }

  public void setCommunityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMUNITYID_ISSET_ID, value);
  }

  public UserTopic getUsertTopic() {
    return this.usertTopic;
  }

  public Topic setUsertTopic(UserTopic usertTopic) {
    this.usertTopic = usertTopic;
    return this;
  }

  public void unsetUsertTopic() {
    this.usertTopic = null;
  }

  /** Returns true if field usertTopic is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertTopic() {
    return this.usertTopic != null;
  }

  public void setUsertTopicIsSet(boolean value) {
    if (!value) {
      this.usertTopic = null;
    }
  }

  public com.vmesteonline.be.thrift.ShortUserInfo getUserInfo() {
    return this.userInfo;
  }

  public Topic setUserInfo(com.vmesteonline.be.thrift.ShortUserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public Poll getPoll() {
    return this.poll;
  }

  public Topic setPoll(Poll poll) {
    this.poll = poll;
    return this;
  }

  public void unsetPoll() {
    this.poll = null;
  }

  /** Returns true if field poll is set (has been assigned a value) and false otherwise */
  public boolean isSetPoll() {
    return this.poll != null;
  }

  public void setPollIsSet(boolean value) {
    if (!value) {
      this.poll = null;
    }
  }

  /**
   * 
   * @see com.vmesteonline.be.thrift.GroupType
   */
  public com.vmesteonline.be.thrift.GroupType getGroupType() {
    return this.groupType;
  }

  /**
   * 
   * @see com.vmesteonline.be.thrift.GroupType
   */
  public Topic setGroupType(com.vmesteonline.be.thrift.GroupType groupType) {
    this.groupType = groupType;
    return this;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Message)value);
      }
      break;

    case MESSAGE_NUM:
      if (value == null) {
        unsetMessageNum();
      } else {
        setMessageNum((Integer)value);
      }
      break;

    case VIEWERS:
      if (value == null) {
        unsetViewers();
      } else {
        setViewers((Integer)value);
      }
      break;

    case USERS_NUM:
      if (value == null) {
        unsetUsersNum();
      } else {
        setUsersNum((Integer)value);
      }
      break;

    case LAST_UPDATE:
      if (value == null) {
        unsetLastUpdate();
      } else {
        setLastUpdate((Integer)value);
      }
      break;

    case LIKES_NUM:
      if (value == null) {
        unsetLikesNum();
      } else {
        setLikesNum((Integer)value);
      }
      break;

    case UNLIKES_NUM:
      if (value == null) {
        unsetUnlikesNum();
      } else {
        setUnlikesNum((Integer)value);
      }
      break;

    case RUBRIC_ID:
      if (value == null) {
        unsetRubricId();
      } else {
        setRubricId((Long)value);
      }
      break;

    case COMMUNITY_ID:
      if (value == null) {
        unsetCommunityId();
      } else {
        setCommunityId((Long)value);
      }
      break;

    case USERT_TOPIC:
      if (value == null) {
        unsetUsertTopic();
      } else {
        setUsertTopic((UserTopic)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((com.vmesteonline.be.thrift.ShortUserInfo)value);
      }
      break;

    case POLL:
      if (value == null) {
        unsetPoll();
      } else {
        setPoll((Poll)value);
      }
      break;

    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((com.vmesteonline.be.thrift.GroupType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case SUBJECT:
      return getSubject();

    case MESSAGE:
      return getMessage();

    case MESSAGE_NUM:
      return Integer.valueOf(getMessageNum());

    case VIEWERS:
      return Integer.valueOf(getViewers());

    case USERS_NUM:
      return Integer.valueOf(getUsersNum());

    case LAST_UPDATE:
      return Integer.valueOf(getLastUpdate());

    case LIKES_NUM:
      return Integer.valueOf(getLikesNum());

    case UNLIKES_NUM:
      return Integer.valueOf(getUnlikesNum());

    case RUBRIC_ID:
      return Long.valueOf(getRubricId());

    case COMMUNITY_ID:
      return Long.valueOf(getCommunityId());

    case USERT_TOPIC:
      return getUsertTopic();

    case USER_INFO:
      return getUserInfo();

    case POLL:
      return getPoll();

    case GROUP_TYPE:
      return getGroupType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SUBJECT:
      return isSetSubject();
    case MESSAGE:
      return isSetMessage();
    case MESSAGE_NUM:
      return isSetMessageNum();
    case VIEWERS:
      return isSetViewers();
    case USERS_NUM:
      return isSetUsersNum();
    case LAST_UPDATE:
      return isSetLastUpdate();
    case LIKES_NUM:
      return isSetLikesNum();
    case UNLIKES_NUM:
      return isSetUnlikesNum();
    case RUBRIC_ID:
      return isSetRubricId();
    case COMMUNITY_ID:
      return isSetCommunityId();
    case USERT_TOPIC:
      return isSetUsertTopic();
    case USER_INFO:
      return isSetUserInfo();
    case POLL:
      return isSetPoll();
    case GROUP_TYPE:
      return isSetGroupType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Topic)
      return this.equals((Topic)that);
    return false;
  }

  public boolean equals(Topic that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_messageNum = true;
    boolean that_present_messageNum = true;
    if (this_present_messageNum || that_present_messageNum) {
      if (!(this_present_messageNum && that_present_messageNum))
        return false;
      if (this.messageNum != that.messageNum)
        return false;
    }

    boolean this_present_viewers = true;
    boolean that_present_viewers = true;
    if (this_present_viewers || that_present_viewers) {
      if (!(this_present_viewers && that_present_viewers))
        return false;
      if (this.viewers != that.viewers)
        return false;
    }

    boolean this_present_usersNum = true;
    boolean that_present_usersNum = true;
    if (this_present_usersNum || that_present_usersNum) {
      if (!(this_present_usersNum && that_present_usersNum))
        return false;
      if (this.usersNum != that.usersNum)
        return false;
    }

    boolean this_present_lastUpdate = true;
    boolean that_present_lastUpdate = true;
    if (this_present_lastUpdate || that_present_lastUpdate) {
      if (!(this_present_lastUpdate && that_present_lastUpdate))
        return false;
      if (this.lastUpdate != that.lastUpdate)
        return false;
    }

    boolean this_present_likesNum = true;
    boolean that_present_likesNum = true;
    if (this_present_likesNum || that_present_likesNum) {
      if (!(this_present_likesNum && that_present_likesNum))
        return false;
      if (this.likesNum != that.likesNum)
        return false;
    }

    boolean this_present_unlikesNum = true;
    boolean that_present_unlikesNum = true;
    if (this_present_unlikesNum || that_present_unlikesNum) {
      if (!(this_present_unlikesNum && that_present_unlikesNum))
        return false;
      if (this.unlikesNum != that.unlikesNum)
        return false;
    }

    boolean this_present_rubricId = true && this.isSetRubricId();
    boolean that_present_rubricId = true && that.isSetRubricId();
    if (this_present_rubricId || that_present_rubricId) {
      if (!(this_present_rubricId && that_present_rubricId))
        return false;
      if (this.rubricId != that.rubricId)
        return false;
    }

    boolean this_present_communityId = true && this.isSetCommunityId();
    boolean that_present_communityId = true && that.isSetCommunityId();
    if (this_present_communityId || that_present_communityId) {
      if (!(this_present_communityId && that_present_communityId))
        return false;
      if (this.communityId != that.communityId)
        return false;
    }

    boolean this_present_usertTopic = true && this.isSetUsertTopic();
    boolean that_present_usertTopic = true && that.isSetUsertTopic();
    if (this_present_usertTopic || that_present_usertTopic) {
      if (!(this_present_usertTopic && that_present_usertTopic))
        return false;
      if (!this.usertTopic.equals(that.usertTopic))
        return false;
    }

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_poll = true && this.isSetPoll();
    boolean that_present_poll = true && that.isSetPoll();
    if (this_present_poll || that_present_poll) {
      if (!(this_present_poll && that_present_poll))
        return false;
      if (!this.poll.equals(that.poll))
        return false;
    }

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Topic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageNum()).compareTo(other.isSetMessageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageNum, other.messageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewers()).compareTo(other.isSetViewers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewers, other.viewers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsersNum()).compareTo(other.isSetUsersNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsersNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersNum, other.usersNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdate()).compareTo(other.isSetLastUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdate, other.lastUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikesNum()).compareTo(other.isSetLikesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likesNum, other.likesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikesNum()).compareTo(other.isSetUnlikesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikesNum, other.unlikesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRubricId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommunityId()).compareTo(other.isSetCommunityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communityId, other.communityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertTopic()).compareTo(other.isSetUsertTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertTopic, other.usertTopic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoll()).compareTo(other.isSetPoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poll, other.poll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Topic(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageNum:");
    sb.append(this.messageNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewers:");
    sb.append(this.viewers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usersNum:");
    sb.append(this.usersNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdate:");
    sb.append(this.lastUpdate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("likesNum:");
    sb.append(this.likesNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikesNum:");
    sb.append(this.unlikesNum);
    first = false;
    if (isSetRubricId()) {
      if (!first) sb.append(", ");
      sb.append("rubricId:");
      sb.append(this.rubricId);
      first = false;
    }
    if (isSetCommunityId()) {
      if (!first) sb.append(", ");
      sb.append("communityId:");
      sb.append(this.communityId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("usertTopic:");
    if (this.usertTopic == null) {
      sb.append("null");
    } else {
      sb.append(this.usertTopic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userInfo:");
    if (this.userInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("poll:");
    if (this.poll == null) {
      sb.append("null");
    } else {
      sb.append(this.poll);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (message != null) {
      message.validate();
    }
    if (usertTopic != null) {
      usertTopic.validate();
    }
    if (userInfo != null) {
      userInfo.validate();
    }
    if (poll != null) {
      poll.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicStandardSchemeFactory implements SchemeFactory {
    public TopicStandardScheme getScheme() {
      return new TopicStandardScheme();
    }
  }

  private static class TopicStandardScheme extends StandardScheme<Topic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new Message();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageNum = iprot.readI32();
              struct.setMessageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewers = iprot.readI32();
              struct.setViewersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USERS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usersNum = iprot.readI32();
              struct.setUsersNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastUpdate = iprot.readI32();
              struct.setLastUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LIKES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likesNum = iprot.readI32();
              struct.setLikesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UNLIKES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlikesNum = iprot.readI32();
              struct.setUnlikesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RUBRIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rubricId = iprot.readI64();
              struct.setRubricIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMUNITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.communityId = iprot.readI64();
              struct.setCommunityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USERT_TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.usertTopic = new UserTopic();
              struct.usertTopic.read(iprot);
              struct.setUsertTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new com.vmesteonline.be.thrift.ShortUserInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POLL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.poll = new Poll();
              struct.poll.read(iprot);
              struct.setPollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupType = com.vmesteonline.be.thrift.GroupType.findByValue(iprot.readI32());
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        struct.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.messageNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEWERS_FIELD_DESC);
      oprot.writeI32(struct.viewers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USERS_NUM_FIELD_DESC);
      oprot.writeI32(struct.usersNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATE_FIELD_DESC);
      oprot.writeI32(struct.lastUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKES_NUM_FIELD_DESC);
      oprot.writeI32(struct.likesNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_NUM_FIELD_DESC);
      oprot.writeI32(struct.unlikesNum);
      oprot.writeFieldEnd();
      if (struct.isSetRubricId()) {
        oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
        oprot.writeI64(struct.rubricId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommunityId()) {
        oprot.writeFieldBegin(COMMUNITY_ID_FIELD_DESC);
        oprot.writeI64(struct.communityId);
        oprot.writeFieldEnd();
      }
      if (struct.usertTopic != null) {
        oprot.writeFieldBegin(USERT_TOPIC_FIELD_DESC);
        struct.usertTopic.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.userInfo != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        struct.userInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.poll != null) {
        oprot.writeFieldBegin(POLL_FIELD_DESC);
        struct.poll.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.groupType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicTupleSchemeFactory implements SchemeFactory {
    public TopicTupleScheme getScheme() {
      return new TopicTupleScheme();
    }
  }

  private static class TopicTupleScheme extends TupleScheme<Topic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSubject()) {
        optionals.set(1);
      }
      if (struct.isSetMessage()) {
        optionals.set(2);
      }
      if (struct.isSetMessageNum()) {
        optionals.set(3);
      }
      if (struct.isSetViewers()) {
        optionals.set(4);
      }
      if (struct.isSetUsersNum()) {
        optionals.set(5);
      }
      if (struct.isSetLastUpdate()) {
        optionals.set(6);
      }
      if (struct.isSetLikesNum()) {
        optionals.set(7);
      }
      if (struct.isSetUnlikesNum()) {
        optionals.set(8);
      }
      if (struct.isSetRubricId()) {
        optionals.set(9);
      }
      if (struct.isSetCommunityId()) {
        optionals.set(10);
      }
      if (struct.isSetUsertTopic()) {
        optionals.set(11);
      }
      if (struct.isSetUserInfo()) {
        optionals.set(12);
      }
      if (struct.isSetPoll()) {
        optionals.set(13);
      }
      if (struct.isSetGroupType()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
      if (struct.isSetMessageNum()) {
        oprot.writeI32(struct.messageNum);
      }
      if (struct.isSetViewers()) {
        oprot.writeI32(struct.viewers);
      }
      if (struct.isSetUsersNum()) {
        oprot.writeI32(struct.usersNum);
      }
      if (struct.isSetLastUpdate()) {
        oprot.writeI32(struct.lastUpdate);
      }
      if (struct.isSetLikesNum()) {
        oprot.writeI32(struct.likesNum);
      }
      if (struct.isSetUnlikesNum()) {
        oprot.writeI32(struct.unlikesNum);
      }
      if (struct.isSetRubricId()) {
        oprot.writeI64(struct.rubricId);
      }
      if (struct.isSetCommunityId()) {
        oprot.writeI64(struct.communityId);
      }
      if (struct.isSetUsertTopic()) {
        struct.usertTopic.write(oprot);
      }
      if (struct.isSetUserInfo()) {
        struct.userInfo.write(oprot);
      }
      if (struct.isSetPoll()) {
        struct.poll.write(oprot);
      }
      if (struct.isSetGroupType()) {
        oprot.writeI32(struct.groupType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(2)) {
        struct.message = new Message();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messageNum = iprot.readI32();
        struct.setMessageNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.viewers = iprot.readI32();
        struct.setViewersIsSet(true);
      }
      if (incoming.get(5)) {
        struct.usersNum = iprot.readI32();
        struct.setUsersNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastUpdate = iprot.readI32();
        struct.setLastUpdateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.likesNum = iprot.readI32();
        struct.setLikesNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.unlikesNum = iprot.readI32();
        struct.setUnlikesNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rubricId = iprot.readI64();
        struct.setRubricIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.communityId = iprot.readI64();
        struct.setCommunityIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.usertTopic = new UserTopic();
        struct.usertTopic.read(iprot);
        struct.setUsertTopicIsSet(true);
      }
      if (incoming.get(12)) {
        struct.userInfo = new com.vmesteonline.be.thrift.ShortUserInfo();
        struct.userInfo.read(iprot);
        struct.setUserInfoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.poll = new Poll();
        struct.poll.read(iprot);
        struct.setPollIsSet(true);
      }
      if (incoming.get(14)) {
        struct.groupType = com.vmesteonline.be.thrift.GroupType.findByValue(iprot.readI32());
        struct.setGroupTypeIsSet(true);
      }
    }
  }

}

