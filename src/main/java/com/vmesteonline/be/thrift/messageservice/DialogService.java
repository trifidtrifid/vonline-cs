/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.messageservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DialogService {

  public interface Iface {

    public Dialog getDialog(List<Long> users, int after) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public Dialog getDialogById(long dialogId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public List<Dialog> getDialogs(int after) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public List<DialogMessage> getDialogMessages(long dialogID, int afterDate, int tailSize, long lastLoadedId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public DialogMessage postMessage(long dialogId, String content, List<Attach> attachments) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void updateDialogMessage(long dlgMsgId, String content, List<Attach> attachments) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void deleteDialogMessage(long dlgMsgId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void addUserToDialog(long dialogId, long userId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

    public void removeUserFromDialog(long dialogId, long userId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDialog(List<Long> users, int after, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDialogById(long dialogId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDialogs(int after, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDialogMessages(long dialogID, int afterDate, int tailSize, long lastLoadedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postMessage(long dialogId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDialogMessage(long dlgMsgId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteDialogMessage(long dlgMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addUserToDialog(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeUserFromDialog(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Dialog getDialog(List<Long> users, int after) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getDialog(users, after);
      return recv_getDialog();
    }

    public void send_getDialog(List<Long> users, int after) throws org.apache.thrift.TException
    {
      getDialog_args args = new getDialog_args();
      args.setUsers(users);
      args.setAfter(after);
      sendBase("getDialog", args);
    }

    public Dialog recv_getDialog() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getDialog_result result = new getDialog_result();
      receiveBase(result, "getDialog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDialog failed: unknown result");
    }

    public Dialog getDialogById(long dialogId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getDialogById(dialogId);
      return recv_getDialogById();
    }

    public void send_getDialogById(long dialogId) throws org.apache.thrift.TException
    {
      getDialogById_args args = new getDialogById_args();
      args.setDialogId(dialogId);
      sendBase("getDialogById", args);
    }

    public Dialog recv_getDialogById() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getDialogById_result result = new getDialogById_result();
      receiveBase(result, "getDialogById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDialogById failed: unknown result");
    }

    public List<Dialog> getDialogs(int after) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getDialogs(after);
      return recv_getDialogs();
    }

    public void send_getDialogs(int after) throws org.apache.thrift.TException
    {
      getDialogs_args args = new getDialogs_args();
      args.setAfter(after);
      sendBase("getDialogs", args);
    }

    public List<Dialog> recv_getDialogs() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getDialogs_result result = new getDialogs_result();
      receiveBase(result, "getDialogs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDialogs failed: unknown result");
    }

    public List<DialogMessage> getDialogMessages(long dialogID, int afterDate, int tailSize, long lastLoadedId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_getDialogMessages(dialogID, afterDate, tailSize, lastLoadedId);
      return recv_getDialogMessages();
    }

    public void send_getDialogMessages(long dialogID, int afterDate, int tailSize, long lastLoadedId) throws org.apache.thrift.TException
    {
      getDialogMessages_args args = new getDialogMessages_args();
      args.setDialogID(dialogID);
      args.setAfterDate(afterDate);
      args.setTailSize(tailSize);
      args.setLastLoadedId(lastLoadedId);
      sendBase("getDialogMessages", args);
    }

    public List<DialogMessage> recv_getDialogMessages() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      getDialogMessages_result result = new getDialogMessages_result();
      receiveBase(result, "getDialogMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDialogMessages failed: unknown result");
    }

    public DialogMessage postMessage(long dialogId, String content, List<Attach> attachments) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_postMessage(dialogId, content, attachments);
      return recv_postMessage();
    }

    public void send_postMessage(long dialogId, String content, List<Attach> attachments) throws org.apache.thrift.TException
    {
      postMessage_args args = new postMessage_args();
      args.setDialogId(dialogId);
      args.setContent(content);
      args.setAttachments(attachments);
      sendBase("postMessage", args);
    }

    public DialogMessage recv_postMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      postMessage_result result = new postMessage_result();
      receiveBase(result, "postMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postMessage failed: unknown result");
    }

    public void updateDialogMessage(long dlgMsgId, String content, List<Attach> attachments) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_updateDialogMessage(dlgMsgId, content, attachments);
      recv_updateDialogMessage();
    }

    public void send_updateDialogMessage(long dlgMsgId, String content, List<Attach> attachments) throws org.apache.thrift.TException
    {
      updateDialogMessage_args args = new updateDialogMessage_args();
      args.setDlgMsgId(dlgMsgId);
      args.setContent(content);
      args.setAttachments(attachments);
      sendBase("updateDialogMessage", args);
    }

    public void recv_updateDialogMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      updateDialogMessage_result result = new updateDialogMessage_result();
      receiveBase(result, "updateDialogMessage");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void deleteDialogMessage(long dlgMsgId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_deleteDialogMessage(dlgMsgId);
      recv_deleteDialogMessage();
    }

    public void send_deleteDialogMessage(long dlgMsgId) throws org.apache.thrift.TException
    {
      deleteDialogMessage_args args = new deleteDialogMessage_args();
      args.setDlgMsgId(dlgMsgId);
      sendBase("deleteDialogMessage", args);
    }

    public void recv_deleteDialogMessage() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      deleteDialogMessage_result result = new deleteDialogMessage_result();
      receiveBase(result, "deleteDialogMessage");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void addUserToDialog(long dialogId, long userId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_addUserToDialog(dialogId, userId);
      recv_addUserToDialog();
    }

    public void send_addUserToDialog(long dialogId, long userId) throws org.apache.thrift.TException
    {
      addUserToDialog_args args = new addUserToDialog_args();
      args.setDialogId(dialogId);
      args.setUserId(userId);
      sendBase("addUserToDialog", args);
    }

    public void recv_addUserToDialog() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      addUserToDialog_result result = new addUserToDialog_result();
      receiveBase(result, "addUserToDialog");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void removeUserFromDialog(long dialogId, long userId) throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      send_removeUserFromDialog(dialogId, userId);
      recv_removeUserFromDialog();
    }

    public void send_removeUserFromDialog(long dialogId, long userId) throws org.apache.thrift.TException
    {
      removeUserFromDialog_args args = new removeUserFromDialog_args();
      args.setDialogId(dialogId);
      args.setUserId(userId);
      sendBase("removeUserFromDialog", args);
    }

    public void recv_removeUserFromDialog() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException
    {
      removeUserFromDialog_result result = new removeUserFromDialog_result();
      receiveBase(result, "removeUserFromDialog");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDialog(List<Long> users, int after, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDialog_call method_call = new getDialog_call(users, after, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDialog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> users;
      private int after;
      public getDialog_call(List<Long> users, int after, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.users = users;
        this.after = after;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDialog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDialog_args args = new getDialog_args();
        args.setUsers(users);
        args.setAfter(after);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dialog getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDialog();
      }
    }

    public void getDialogById(long dialogId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDialogById_call method_call = new getDialogById_call(dialogId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDialogById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dialogId;
      public getDialogById_call(long dialogId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dialogId = dialogId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDialogById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDialogById_args args = new getDialogById_args();
        args.setDialogId(dialogId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dialog getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDialogById();
      }
    }

    public void getDialogs(int after, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDialogs_call method_call = new getDialogs_call(after, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDialogs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int after;
      public getDialogs_call(int after, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.after = after;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDialogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDialogs_args args = new getDialogs_args();
        args.setAfter(after);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Dialog> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDialogs();
      }
    }

    public void getDialogMessages(long dialogID, int afterDate, int tailSize, long lastLoadedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDialogMessages_call method_call = new getDialogMessages_call(dialogID, afterDate, tailSize, lastLoadedId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDialogMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dialogID;
      private int afterDate;
      private int tailSize;
      private long lastLoadedId;
      public getDialogMessages_call(long dialogID, int afterDate, int tailSize, long lastLoadedId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dialogID = dialogID;
        this.afterDate = afterDate;
        this.tailSize = tailSize;
        this.lastLoadedId = lastLoadedId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDialogMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDialogMessages_args args = new getDialogMessages_args();
        args.setDialogID(dialogID);
        args.setAfterDate(afterDate);
        args.setTailSize(tailSize);
        args.setLastLoadedId(lastLoadedId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DialogMessage> getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDialogMessages();
      }
    }

    public void postMessage(long dialogId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postMessage_call method_call = new postMessage_call(dialogId, content, attachments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dialogId;
      private String content;
      private List<Attach> attachments;
      public postMessage_call(long dialogId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dialogId = dialogId;
        this.content = content;
        this.attachments = attachments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postMessage_args args = new postMessage_args();
        args.setDialogId(dialogId);
        args.setContent(content);
        args.setAttachments(attachments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DialogMessage getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postMessage();
      }
    }

    public void updateDialogMessage(long dlgMsgId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDialogMessage_call method_call = new updateDialogMessage_call(dlgMsgId, content, attachments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDialogMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dlgMsgId;
      private String content;
      private List<Attach> attachments;
      public updateDialogMessage_call(long dlgMsgId, String content, List<Attach> attachments, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dlgMsgId = dlgMsgId;
        this.content = content;
        this.attachments = attachments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDialogMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDialogMessage_args args = new updateDialogMessage_args();
        args.setDlgMsgId(dlgMsgId);
        args.setContent(content);
        args.setAttachments(attachments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateDialogMessage();
      }
    }

    public void deleteDialogMessage(long dlgMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteDialogMessage_call method_call = new deleteDialogMessage_call(dlgMsgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDialogMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dlgMsgId;
      public deleteDialogMessage_call(long dlgMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dlgMsgId = dlgMsgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDialogMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDialogMessage_args args = new deleteDialogMessage_args();
        args.setDlgMsgId(dlgMsgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteDialogMessage();
      }
    }

    public void addUserToDialog(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addUserToDialog_call method_call = new addUserToDialog_call(dialogId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserToDialog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dialogId;
      private long userId;
      public addUserToDialog_call(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dialogId = dialogId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserToDialog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserToDialog_args args = new addUserToDialog_args();
        args.setDialogId(dialogId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addUserToDialog();
      }
    }

    public void removeUserFromDialog(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeUserFromDialog_call method_call = new removeUserFromDialog_call(dialogId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUserFromDialog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dialogId;
      private long userId;
      public removeUserFromDialog_call(long dialogId, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dialogId = dialogId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUserFromDialog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUserFromDialog_args args = new removeUserFromDialog_args();
        args.setDialogId(dialogId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.thrift.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUserFromDialog();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDialog", new getDialog());
      processMap.put("getDialogById", new getDialogById());
      processMap.put("getDialogs", new getDialogs());
      processMap.put("getDialogMessages", new getDialogMessages());
      processMap.put("postMessage", new postMessage());
      processMap.put("updateDialogMessage", new updateDialogMessage());
      processMap.put("deleteDialogMessage", new deleteDialogMessage());
      processMap.put("addUserToDialog", new addUserToDialog());
      processMap.put("removeUserFromDialog", new removeUserFromDialog());
      return processMap;
    }

    public static class getDialog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDialog_args> {
      public getDialog() {
        super("getDialog");
      }

      public getDialog_args getEmptyArgsInstance() {
        return new getDialog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDialog_result getResult(I iface, getDialog_args args) throws org.apache.thrift.TException {
        getDialog_result result = new getDialog_result();
        try {
          result.success = iface.getDialog(args.users, args.after);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getDialogById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDialogById_args> {
      public getDialogById() {
        super("getDialogById");
      }

      public getDialogById_args getEmptyArgsInstance() {
        return new getDialogById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDialogById_result getResult(I iface, getDialogById_args args) throws org.apache.thrift.TException {
        getDialogById_result result = new getDialogById_result();
        try {
          result.success = iface.getDialogById(args.dialogId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getDialogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDialogs_args> {
      public getDialogs() {
        super("getDialogs");
      }

      public getDialogs_args getEmptyArgsInstance() {
        return new getDialogs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDialogs_result getResult(I iface, getDialogs_args args) throws org.apache.thrift.TException {
        getDialogs_result result = new getDialogs_result();
        try {
          result.success = iface.getDialogs(args.after);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getDialogMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDialogMessages_args> {
      public getDialogMessages() {
        super("getDialogMessages");
      }

      public getDialogMessages_args getEmptyArgsInstance() {
        return new getDialogMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDialogMessages_result getResult(I iface, getDialogMessages_args args) throws org.apache.thrift.TException {
        getDialogMessages_result result = new getDialogMessages_result();
        try {
          result.success = iface.getDialogMessages(args.dialogID, args.afterDate, args.tailSize, args.lastLoadedId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class postMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postMessage_args> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postMessage_result getResult(I iface, postMessage_args args) throws org.apache.thrift.TException {
        postMessage_result result = new postMessage_result();
        try {
          result.success = iface.postMessage(args.dialogId, args.content, args.attachments);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class updateDialogMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDialogMessage_args> {
      public updateDialogMessage() {
        super("updateDialogMessage");
      }

      public updateDialogMessage_args getEmptyArgsInstance() {
        return new updateDialogMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDialogMessage_result getResult(I iface, updateDialogMessage_args args) throws org.apache.thrift.TException {
        updateDialogMessage_result result = new updateDialogMessage_result();
        try {
          iface.updateDialogMessage(args.dlgMsgId, args.content, args.attachments);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class deleteDialogMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDialogMessage_args> {
      public deleteDialogMessage() {
        super("deleteDialogMessage");
      }

      public deleteDialogMessage_args getEmptyArgsInstance() {
        return new deleteDialogMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteDialogMessage_result getResult(I iface, deleteDialogMessage_args args) throws org.apache.thrift.TException {
        deleteDialogMessage_result result = new deleteDialogMessage_result();
        try {
          iface.deleteDialogMessage(args.dlgMsgId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class addUserToDialog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserToDialog_args> {
      public addUserToDialog() {
        super("addUserToDialog");
      }

      public addUserToDialog_args getEmptyArgsInstance() {
        return new addUserToDialog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUserToDialog_result getResult(I iface, addUserToDialog_args args) throws org.apache.thrift.TException {
        addUserToDialog_result result = new addUserToDialog_result();
        try {
          iface.addUserToDialog(args.dialogId, args.userId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class removeUserFromDialog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUserFromDialog_args> {
      public removeUserFromDialog() {
        super("removeUserFromDialog");
      }

      public removeUserFromDialog_args getEmptyArgsInstance() {
        return new removeUserFromDialog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUserFromDialog_result getResult(I iface, removeUserFromDialog_args args) throws org.apache.thrift.TException {
        removeUserFromDialog_result result = new removeUserFromDialog_result();
        try {
          iface.removeUserFromDialog(args.dialogId, args.userId);
        } catch (com.vmesteonline.be.thrift.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDialog", new getDialog());
      processMap.put("getDialogById", new getDialogById());
      processMap.put("getDialogs", new getDialogs());
      processMap.put("getDialogMessages", new getDialogMessages());
      processMap.put("postMessage", new postMessage());
      processMap.put("updateDialogMessage", new updateDialogMessage());
      processMap.put("deleteDialogMessage", new deleteDialogMessage());
      processMap.put("addUserToDialog", new addUserToDialog());
      processMap.put("removeUserFromDialog", new removeUserFromDialog());
      return processMap;
    }

    public static class getDialog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDialog_args, Dialog> {
      public getDialog() {
        super("getDialog");
      }

      public getDialog_args getEmptyArgsInstance() {
        return new getDialog_args();
      }

      public AsyncMethodCallback<Dialog> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Dialog>() { 
          public void onComplete(Dialog o) {
            getDialog_result result = new getDialog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDialog_result result = new getDialog_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDialog_args args, org.apache.thrift.async.AsyncMethodCallback<Dialog> resultHandler) throws TException {
        iface.getDialog(args.users, args.after,resultHandler);
      }
    }

    public static class getDialogById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDialogById_args, Dialog> {
      public getDialogById() {
        super("getDialogById");
      }

      public getDialogById_args getEmptyArgsInstance() {
        return new getDialogById_args();
      }

      public AsyncMethodCallback<Dialog> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Dialog>() { 
          public void onComplete(Dialog o) {
            getDialogById_result result = new getDialogById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDialogById_result result = new getDialogById_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDialogById_args args, org.apache.thrift.async.AsyncMethodCallback<Dialog> resultHandler) throws TException {
        iface.getDialogById(args.dialogId,resultHandler);
      }
    }

    public static class getDialogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDialogs_args, List<Dialog>> {
      public getDialogs() {
        super("getDialogs");
      }

      public getDialogs_args getEmptyArgsInstance() {
        return new getDialogs_args();
      }

      public AsyncMethodCallback<List<Dialog>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Dialog>>() { 
          public void onComplete(List<Dialog> o) {
            getDialogs_result result = new getDialogs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDialogs_result result = new getDialogs_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDialogs_args args, org.apache.thrift.async.AsyncMethodCallback<List<Dialog>> resultHandler) throws TException {
        iface.getDialogs(args.after,resultHandler);
      }
    }

    public static class getDialogMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDialogMessages_args, List<DialogMessage>> {
      public getDialogMessages() {
        super("getDialogMessages");
      }

      public getDialogMessages_args getEmptyArgsInstance() {
        return new getDialogMessages_args();
      }

      public AsyncMethodCallback<List<DialogMessage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DialogMessage>>() { 
          public void onComplete(List<DialogMessage> o) {
            getDialogMessages_result result = new getDialogMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDialogMessages_result result = new getDialogMessages_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDialogMessages_args args, org.apache.thrift.async.AsyncMethodCallback<List<DialogMessage>> resultHandler) throws TException {
        iface.getDialogMessages(args.dialogID, args.afterDate, args.tailSize, args.lastLoadedId,resultHandler);
      }
    }

    public static class postMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postMessage_args, DialogMessage> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      public AsyncMethodCallback<DialogMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DialogMessage>() { 
          public void onComplete(DialogMessage o) {
            postMessage_result result = new postMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postMessage_result result = new postMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postMessage_args args, org.apache.thrift.async.AsyncMethodCallback<DialogMessage> resultHandler) throws TException {
        iface.postMessage(args.dialogId, args.content, args.attachments,resultHandler);
      }
    }

    public static class updateDialogMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDialogMessage_args, Void> {
      public updateDialogMessage() {
        super("updateDialogMessage");
      }

      public updateDialogMessage_args getEmptyArgsInstance() {
        return new updateDialogMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateDialogMessage_result result = new updateDialogMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDialogMessage_result result = new updateDialogMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDialogMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateDialogMessage(args.dlgMsgId, args.content, args.attachments,resultHandler);
      }
    }

    public static class deleteDialogMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteDialogMessage_args, Void> {
      public deleteDialogMessage() {
        super("deleteDialogMessage");
      }

      public deleteDialogMessage_args getEmptyArgsInstance() {
        return new deleteDialogMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteDialogMessage_result result = new deleteDialogMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteDialogMessage_result result = new deleteDialogMessage_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteDialogMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteDialogMessage(args.dlgMsgId,resultHandler);
      }
    }

    public static class addUserToDialog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserToDialog_args, Void> {
      public addUserToDialog() {
        super("addUserToDialog");
      }

      public addUserToDialog_args getEmptyArgsInstance() {
        return new addUserToDialog_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addUserToDialog_result result = new addUserToDialog_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addUserToDialog_result result = new addUserToDialog_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUserToDialog_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addUserToDialog(args.dialogId, args.userId,resultHandler);
      }
    }

    public static class removeUserFromDialog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeUserFromDialog_args, Void> {
      public removeUserFromDialog() {
        super("removeUserFromDialog");
      }

      public removeUserFromDialog_args getEmptyArgsInstance() {
        return new removeUserFromDialog_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeUserFromDialog_result result = new removeUserFromDialog_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeUserFromDialog_result result = new removeUserFromDialog_result();
            if (e instanceof com.vmesteonline.be.thrift.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.thrift.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeUserFromDialog_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeUserFromDialog(args.dialogId, args.userId,resultHandler);
      }
    }

  }

  public static class getDialog_args implements org.apache.thrift.TBase<getDialog_args, getDialog_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDialog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialog_args");

    private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("after", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialog_argsTupleSchemeFactory());
    }

    public List<Long> users; // required
    public int after; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERS((short)1, "users"),
      AFTER((short)2, "after");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERS
            return USERS;
          case 2: // AFTER
            return AFTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AFTER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.AFTER, new org.apache.thrift.meta_data.FieldMetaData("after", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialog_args.class, metaDataMap);
    }

    public getDialog_args() {
    }

    public getDialog_args(
      List<Long> users,
      int after)
    {
      this();
      this.users = users;
      this.after = after;
      setAfterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialog_args(getDialog_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUsers()) {
        List<Long> __this__users = new ArrayList<Long>(other.users);
        this.users = __this__users;
      }
      this.after = other.after;
    }

    public getDialog_args deepCopy() {
      return new getDialog_args(this);
    }

    @Override
    public void clear() {
      this.users = null;
      setAfterIsSet(false);
      this.after = 0;
    }

    public int getUsersSize() {
      return (this.users == null) ? 0 : this.users.size();
    }

    public java.util.Iterator<Long> getUsersIterator() {
      return (this.users == null) ? null : this.users.iterator();
    }

    public void addToUsers(long elem) {
      if (this.users == null) {
        this.users = new ArrayList<Long>();
      }
      this.users.add(elem);
    }

    public List<Long> getUsers() {
      return this.users;
    }

    public getDialog_args setUsers(List<Long> users) {
      this.users = users;
      return this;
    }

    public void unsetUsers() {
      this.users = null;
    }

    /** Returns true if field users is set (has been assigned a value) and false otherwise */
    public boolean isSetUsers() {
      return this.users != null;
    }

    public void setUsersIsSet(boolean value) {
      if (!value) {
        this.users = null;
      }
    }

    public int getAfter() {
      return this.after;
    }

    public getDialog_args setAfter(int after) {
      this.after = after;
      setAfterIsSet(true);
      return this;
    }

    public void unsetAfter() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTER_ISSET_ID);
    }

    /** Returns true if field after is set (has been assigned a value) and false otherwise */
    public boolean isSetAfter() {
      return EncodingUtils.testBit(__isset_bitfield, __AFTER_ISSET_ID);
    }

    public void setAfterIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERS:
        if (value == null) {
          unsetUsers();
        } else {
          setUsers((List<Long>)value);
        }
        break;

      case AFTER:
        if (value == null) {
          unsetAfter();
        } else {
          setAfter((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERS:
        return getUsers();

      case AFTER:
        return Integer.valueOf(getAfter());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERS:
        return isSetUsers();
      case AFTER:
        return isSetAfter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialog_args)
        return this.equals((getDialog_args)that);
      return false;
    }

    public boolean equals(getDialog_args that) {
      if (that == null)
        return false;

      boolean this_present_users = true && this.isSetUsers();
      boolean that_present_users = true && that.isSetUsers();
      if (this_present_users || that_present_users) {
        if (!(this_present_users && that_present_users))
          return false;
        if (!this.users.equals(that.users))
          return false;
      }

      boolean this_present_after = true;
      boolean that_present_after = true;
      if (this_present_after || that_present_after) {
        if (!(this_present_after && that_present_after))
          return false;
        if (this.after != that.after)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsers()).compareTo(other.isSetUsers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.users, other.users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAfter()).compareTo(other.isSetAfter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.after, other.after);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialog_args(");
      boolean first = true;

      sb.append("users:");
      if (this.users == null) {
        sb.append("null");
      } else {
        sb.append(this.users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("after:");
      sb.append(this.after);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialog_argsStandardSchemeFactory implements SchemeFactory {
      public getDialog_argsStandardScheme getScheme() {
        return new getDialog_argsStandardScheme();
      }
    }

    private static class getDialog_argsStandardScheme extends StandardScheme<getDialog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.users = new ArrayList<Long>(_list100.size);
                  for (int _i101 = 0; _i101 < _list100.size; ++_i101)
                  {
                    long _elem102;
                    _elem102 = iprot.readI64();
                    struct.users.add(_elem102);
                  }
                  iprot.readListEnd();
                }
                struct.setUsersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AFTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.after = iprot.readI32();
                struct.setAfterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.users != null) {
          oprot.writeFieldBegin(USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.users.size()));
            for (long _iter103 : struct.users)
            {
              oprot.writeI64(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AFTER_FIELD_DESC);
        oprot.writeI32(struct.after);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialog_argsTupleSchemeFactory implements SchemeFactory {
      public getDialog_argsTupleScheme getScheme() {
        return new getDialog_argsTupleScheme();
      }
    }

    private static class getDialog_argsTupleScheme extends TupleScheme<getDialog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsers()) {
          optionals.set(0);
        }
        if (struct.isSetAfter()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsers()) {
          {
            oprot.writeI32(struct.users.size());
            for (long _iter104 : struct.users)
            {
              oprot.writeI64(_iter104);
            }
          }
        }
        if (struct.isSetAfter()) {
          oprot.writeI32(struct.after);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.users = new ArrayList<Long>(_list105.size);
            for (int _i106 = 0; _i106 < _list105.size; ++_i106)
            {
              long _elem107;
              _elem107 = iprot.readI64();
              struct.users.add(_elem107);
            }
          }
          struct.setUsersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.after = iprot.readI32();
          struct.setAfterIsSet(true);
        }
      }
    }

  }

  public static class getDialog_result implements org.apache.thrift.TBase<getDialog_result, getDialog_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDialog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialog_resultTupleSchemeFactory());
    }

    public Dialog success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dialog.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialog_result.class, metaDataMap);
    }

    public getDialog_result() {
    }

    public getDialog_result(
      Dialog success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialog_result(getDialog_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dialog(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getDialog_result deepCopy() {
      return new getDialog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Dialog getSuccess() {
      return this.success;
    }

    public getDialog_result setSuccess(Dialog success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getDialog_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dialog)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialog_result)
        return this.equals((getDialog_result)that);
      return false;
    }

    public boolean equals(getDialog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialog_resultStandardSchemeFactory implements SchemeFactory {
      public getDialog_resultStandardScheme getScheme() {
        return new getDialog_resultStandardScheme();
      }
    }

    private static class getDialog_resultStandardScheme extends StandardScheme<getDialog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dialog();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialog_resultTupleSchemeFactory implements SchemeFactory {
      public getDialog_resultTupleScheme getScheme() {
        return new getDialog_resultTupleScheme();
      }
    }

    private static class getDialog_resultTupleScheme extends TupleScheme<getDialog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Dialog();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getDialogById_args implements org.apache.thrift.TBase<getDialogById_args, getDialogById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogById_args");

    private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogById_argsTupleSchemeFactory());
    }

    public long dialogId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIALOG_ID((short)1, "dialogId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIALOG_ID
            return DIALOG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIALOGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogById_args.class, metaDataMap);
    }

    public getDialogById_args() {
    }

    public getDialogById_args(
      long dialogId)
    {
      this();
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogById_args(getDialogById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dialogId = other.dialogId;
    }

    public getDialogById_args deepCopy() {
      return new getDialogById_args(this);
    }

    @Override
    public void clear() {
      setDialogIdIsSet(false);
      this.dialogId = 0;
    }

    public long getDialogId() {
      return this.dialogId;
    }

    public getDialogById_args setDialogId(long dialogId) {
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      return this;
    }

    public void unsetDialogId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
    public boolean isSetDialogId() {
      return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    public void setDialogIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIALOG_ID:
        if (value == null) {
          unsetDialogId();
        } else {
          setDialogId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIALOG_ID:
        return Long.valueOf(getDialogId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIALOG_ID:
        return isSetDialogId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogById_args)
        return this.equals((getDialogById_args)that);
      return false;
    }

    public boolean equals(getDialogById_args that) {
      if (that == null)
        return false;

      boolean this_present_dialogId = true;
      boolean that_present_dialogId = true;
      if (this_present_dialogId || that_present_dialogId) {
        if (!(this_present_dialogId && that_present_dialogId))
          return false;
        if (this.dialogId != that.dialogId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogById_args(");
      boolean first = true;

      sb.append("dialogId:");
      sb.append(this.dialogId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogById_argsStandardSchemeFactory implements SchemeFactory {
      public getDialogById_argsStandardScheme getScheme() {
        return new getDialogById_argsStandardScheme();
      }
    }

    private static class getDialogById_argsStandardScheme extends StandardScheme<getDialogById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dialogId = iprot.readI64();
                struct.setDialogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeI64(struct.dialogId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogById_argsTupleSchemeFactory implements SchemeFactory {
      public getDialogById_argsTupleScheme getScheme() {
        return new getDialogById_argsTupleScheme();
      }
    }

    private static class getDialogById_argsTupleScheme extends TupleScheme<getDialogById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDialogId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDialogId()) {
          oprot.writeI64(struct.dialogId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dialogId = iprot.readI64();
          struct.setDialogIdIsSet(true);
        }
      }
    }

  }

  public static class getDialogById_result implements org.apache.thrift.TBase<getDialogById_result, getDialogById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogById_resultTupleSchemeFactory());
    }

    public Dialog success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dialog.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogById_result.class, metaDataMap);
    }

    public getDialogById_result() {
    }

    public getDialogById_result(
      Dialog success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogById_result(getDialogById_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dialog(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getDialogById_result deepCopy() {
      return new getDialogById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Dialog getSuccess() {
      return this.success;
    }

    public getDialogById_result setSuccess(Dialog success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getDialogById_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dialog)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogById_result)
        return this.equals((getDialogById_result)that);
      return false;
    }

    public boolean equals(getDialogById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogById_resultStandardSchemeFactory implements SchemeFactory {
      public getDialogById_resultStandardScheme getScheme() {
        return new getDialogById_resultStandardScheme();
      }
    }

    private static class getDialogById_resultStandardScheme extends StandardScheme<getDialogById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dialog();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogById_resultTupleSchemeFactory implements SchemeFactory {
      public getDialogById_resultTupleScheme getScheme() {
        return new getDialogById_resultTupleScheme();
      }
    }

    private static class getDialogById_resultTupleScheme extends TupleScheme<getDialogById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Dialog();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getDialogs_args implements org.apache.thrift.TBase<getDialogs_args, getDialogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogs_args");

    private static final org.apache.thrift.protocol.TField AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("after", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogs_argsTupleSchemeFactory());
    }

    public int after; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AFTER((short)1, "after");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AFTER
            return AFTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AFTER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AFTER, new org.apache.thrift.meta_data.FieldMetaData("after", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogs_args.class, metaDataMap);
    }

    public getDialogs_args() {
    }

    public getDialogs_args(
      int after)
    {
      this();
      this.after = after;
      setAfterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogs_args(getDialogs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.after = other.after;
    }

    public getDialogs_args deepCopy() {
      return new getDialogs_args(this);
    }

    @Override
    public void clear() {
      setAfterIsSet(false);
      this.after = 0;
    }

    public int getAfter() {
      return this.after;
    }

    public getDialogs_args setAfter(int after) {
      this.after = after;
      setAfterIsSet(true);
      return this;
    }

    public void unsetAfter() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTER_ISSET_ID);
    }

    /** Returns true if field after is set (has been assigned a value) and false otherwise */
    public boolean isSetAfter() {
      return EncodingUtils.testBit(__isset_bitfield, __AFTER_ISSET_ID);
    }

    public void setAfterIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AFTER:
        if (value == null) {
          unsetAfter();
        } else {
          setAfter((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AFTER:
        return Integer.valueOf(getAfter());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AFTER:
        return isSetAfter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogs_args)
        return this.equals((getDialogs_args)that);
      return false;
    }

    public boolean equals(getDialogs_args that) {
      if (that == null)
        return false;

      boolean this_present_after = true;
      boolean that_present_after = true;
      if (this_present_after || that_present_after) {
        if (!(this_present_after && that_present_after))
          return false;
        if (this.after != that.after)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAfter()).compareTo(other.isSetAfter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.after, other.after);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogs_args(");
      boolean first = true;

      sb.append("after:");
      sb.append(this.after);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogs_argsStandardSchemeFactory implements SchemeFactory {
      public getDialogs_argsStandardScheme getScheme() {
        return new getDialogs_argsStandardScheme();
      }
    }

    private static class getDialogs_argsStandardScheme extends StandardScheme<getDialogs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AFTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.after = iprot.readI32();
                struct.setAfterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AFTER_FIELD_DESC);
        oprot.writeI32(struct.after);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogs_argsTupleSchemeFactory implements SchemeFactory {
      public getDialogs_argsTupleScheme getScheme() {
        return new getDialogs_argsTupleScheme();
      }
    }

    private static class getDialogs_argsTupleScheme extends TupleScheme<getDialogs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAfter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAfter()) {
          oprot.writeI32(struct.after);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.after = iprot.readI32();
          struct.setAfterIsSet(true);
        }
      }
    }

  }

  public static class getDialogs_result implements org.apache.thrift.TBase<getDialogs_result, getDialogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogs_resultTupleSchemeFactory());
    }

    public List<Dialog> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dialog.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogs_result.class, metaDataMap);
    }

    public getDialogs_result() {
    }

    public getDialogs_result(
      List<Dialog> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogs_result(getDialogs_result other) {
      if (other.isSetSuccess()) {
        List<Dialog> __this__success = new ArrayList<Dialog>(other.success.size());
        for (Dialog other_element : other.success) {
          __this__success.add(new Dialog(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getDialogs_result deepCopy() {
      return new getDialogs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Dialog> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Dialog elem) {
      if (this.success == null) {
        this.success = new ArrayList<Dialog>();
      }
      this.success.add(elem);
    }

    public List<Dialog> getSuccess() {
      return this.success;
    }

    public getDialogs_result setSuccess(List<Dialog> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getDialogs_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Dialog>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogs_result)
        return this.equals((getDialogs_result)that);
      return false;
    }

    public boolean equals(getDialogs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogs_resultStandardSchemeFactory implements SchemeFactory {
      public getDialogs_resultStandardScheme getScheme() {
        return new getDialogs_resultStandardScheme();
      }
    }

    private static class getDialogs_resultStandardScheme extends StandardScheme<getDialogs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.success = new ArrayList<Dialog>(_list108.size);
                  for (int _i109 = 0; _i109 < _list108.size; ++_i109)
                  {
                    Dialog _elem110;
                    _elem110 = new Dialog();
                    _elem110.read(iprot);
                    struct.success.add(_elem110);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Dialog _iter111 : struct.success)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogs_resultTupleSchemeFactory implements SchemeFactory {
      public getDialogs_resultTupleScheme getScheme() {
        return new getDialogs_resultTupleScheme();
      }
    }

    private static class getDialogs_resultTupleScheme extends TupleScheme<getDialogs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Dialog _iter112 : struct.success)
            {
              _iter112.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Dialog>(_list113.size);
            for (int _i114 = 0; _i114 < _list113.size; ++_i114)
            {
              Dialog _elem115;
              _elem115 = new Dialog();
              _elem115.read(iprot);
              struct.success.add(_elem115);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getDialogMessages_args implements org.apache.thrift.TBase<getDialogMessages_args, getDialogMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogMessages_args");

    private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField AFTER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("afterDate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TAIL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tailSize", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogMessages_argsTupleSchemeFactory());
    }

    public long dialogID; // required
    public int afterDate; // required
    public int tailSize; // required
    public long lastLoadedId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIALOG_ID((short)1, "dialogID"),
      AFTER_DATE((short)2, "afterDate"),
      TAIL_SIZE((short)3, "tailSize"),
      LAST_LOADED_ID((short)4, "lastLoadedId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIALOG_ID
            return DIALOG_ID;
          case 2: // AFTER_DATE
            return AFTER_DATE;
          case 3: // TAIL_SIZE
            return TAIL_SIZE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIALOGID_ISSET_ID = 0;
    private static final int __AFTERDATE_ISSET_ID = 1;
    private static final int __TAILSIZE_ISSET_ID = 2;
    private static final int __LASTLOADEDID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AFTER_DATE, new org.apache.thrift.meta_data.FieldMetaData("afterDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAIL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tailSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogMessages_args.class, metaDataMap);
    }

    public getDialogMessages_args() {
    }

    public getDialogMessages_args(
      long dialogID,
      int afterDate,
      int tailSize,
      long lastLoadedId)
    {
      this();
      this.dialogID = dialogID;
      setDialogIDIsSet(true);
      this.afterDate = afterDate;
      setAfterDateIsSet(true);
      this.tailSize = tailSize;
      setTailSizeIsSet(true);
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogMessages_args(getDialogMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dialogID = other.dialogID;
      this.afterDate = other.afterDate;
      this.tailSize = other.tailSize;
      this.lastLoadedId = other.lastLoadedId;
    }

    public getDialogMessages_args deepCopy() {
      return new getDialogMessages_args(this);
    }

    @Override
    public void clear() {
      setDialogIDIsSet(false);
      this.dialogID = 0;
      setAfterDateIsSet(false);
      this.afterDate = 0;
      setTailSizeIsSet(false);
      this.tailSize = 0;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
    }

    public long getDialogID() {
      return this.dialogID;
    }

    public getDialogMessages_args setDialogID(long dialogID) {
      this.dialogID = dialogID;
      setDialogIDIsSet(true);
      return this;
    }

    public void unsetDialogID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    /** Returns true if field dialogID is set (has been assigned a value) and false otherwise */
    public boolean isSetDialogID() {
      return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    public void setDialogIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
    }

    public int getAfterDate() {
      return this.afterDate;
    }

    public getDialogMessages_args setAfterDate(int afterDate) {
      this.afterDate = afterDate;
      setAfterDateIsSet(true);
      return this;
    }

    public void unsetAfterDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERDATE_ISSET_ID);
    }

    /** Returns true if field afterDate is set (has been assigned a value) and false otherwise */
    public boolean isSetAfterDate() {
      return EncodingUtils.testBit(__isset_bitfield, __AFTERDATE_ISSET_ID);
    }

    public void setAfterDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERDATE_ISSET_ID, value);
    }

    public int getTailSize() {
      return this.tailSize;
    }

    public getDialogMessages_args setTailSize(int tailSize) {
      this.tailSize = tailSize;
      setTailSizeIsSet(true);
      return this;
    }

    public void unsetTailSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAILSIZE_ISSET_ID);
    }

    /** Returns true if field tailSize is set (has been assigned a value) and false otherwise */
    public boolean isSetTailSize() {
      return EncodingUtils.testBit(__isset_bitfield, __TAILSIZE_ISSET_ID);
    }

    public void setTailSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAILSIZE_ISSET_ID, value);
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getDialogMessages_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIALOG_ID:
        if (value == null) {
          unsetDialogID();
        } else {
          setDialogID((Long)value);
        }
        break;

      case AFTER_DATE:
        if (value == null) {
          unsetAfterDate();
        } else {
          setAfterDate((Integer)value);
        }
        break;

      case TAIL_SIZE:
        if (value == null) {
          unsetTailSize();
        } else {
          setTailSize((Integer)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIALOG_ID:
        return Long.valueOf(getDialogID());

      case AFTER_DATE:
        return Integer.valueOf(getAfterDate());

      case TAIL_SIZE:
        return Integer.valueOf(getTailSize());

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIALOG_ID:
        return isSetDialogID();
      case AFTER_DATE:
        return isSetAfterDate();
      case TAIL_SIZE:
        return isSetTailSize();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogMessages_args)
        return this.equals((getDialogMessages_args)that);
      return false;
    }

    public boolean equals(getDialogMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_dialogID = true;
      boolean that_present_dialogID = true;
      if (this_present_dialogID || that_present_dialogID) {
        if (!(this_present_dialogID && that_present_dialogID))
          return false;
        if (this.dialogID != that.dialogID)
          return false;
      }

      boolean this_present_afterDate = true;
      boolean that_present_afterDate = true;
      if (this_present_afterDate || that_present_afterDate) {
        if (!(this_present_afterDate && that_present_afterDate))
          return false;
        if (this.afterDate != that.afterDate)
          return false;
      }

      boolean this_present_tailSize = true;
      boolean that_present_tailSize = true;
      if (this_present_tailSize || that_present_tailSize) {
        if (!(this_present_tailSize && that_present_tailSize))
          return false;
        if (this.tailSize != that.tailSize)
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDialogID()).compareTo(other.isSetDialogID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialogID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogID, other.dialogID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAfterDate()).compareTo(other.isSetAfterDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterDate, other.afterDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTailSize()).compareTo(other.isSetTailSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTailSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tailSize, other.tailSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogMessages_args(");
      boolean first = true;

      sb.append("dialogID:");
      sb.append(this.dialogID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterDate:");
      sb.append(this.afterDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tailSize:");
      sb.append(this.tailSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getDialogMessages_argsStandardScheme getScheme() {
        return new getDialogMessages_argsStandardScheme();
      }
    }

    private static class getDialogMessages_argsStandardScheme extends StandardScheme<getDialogMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dialogID = iprot.readI64();
                struct.setDialogIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AFTER_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.afterDate = iprot.readI32();
                struct.setAfterDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAIL_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tailSize = iprot.readI32();
                struct.setTailSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeI64(struct.dialogID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AFTER_DATE_FIELD_DESC);
        oprot.writeI32(struct.afterDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAIL_SIZE_FIELD_DESC);
        oprot.writeI32(struct.tailSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getDialogMessages_argsTupleScheme getScheme() {
        return new getDialogMessages_argsTupleScheme();
      }
    }

    private static class getDialogMessages_argsTupleScheme extends TupleScheme<getDialogMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDialogID()) {
          optionals.set(0);
        }
        if (struct.isSetAfterDate()) {
          optionals.set(1);
        }
        if (struct.isSetTailSize()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDialogID()) {
          oprot.writeI64(struct.dialogID);
        }
        if (struct.isSetAfterDate()) {
          oprot.writeI32(struct.afterDate);
        }
        if (struct.isSetTailSize()) {
          oprot.writeI32(struct.tailSize);
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dialogID = iprot.readI64();
          struct.setDialogIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.afterDate = iprot.readI32();
          struct.setAfterDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tailSize = iprot.readI32();
          struct.setTailSizeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
      }
    }

  }

  public static class getDialogMessages_result implements org.apache.thrift.TBase<getDialogMessages_result, getDialogMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDialogMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDialogMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDialogMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDialogMessages_resultTupleSchemeFactory());
    }

    public List<DialogMessage> success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DialogMessage.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDialogMessages_result.class, metaDataMap);
    }

    public getDialogMessages_result() {
    }

    public getDialogMessages_result(
      List<DialogMessage> success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDialogMessages_result(getDialogMessages_result other) {
      if (other.isSetSuccess()) {
        List<DialogMessage> __this__success = new ArrayList<DialogMessage>(other.success.size());
        for (DialogMessage other_element : other.success) {
          __this__success.add(new DialogMessage(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public getDialogMessages_result deepCopy() {
      return new getDialogMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DialogMessage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DialogMessage elem) {
      if (this.success == null) {
        this.success = new ArrayList<DialogMessage>();
      }
      this.success.add(elem);
    }

    public List<DialogMessage> getSuccess() {
      return this.success;
    }

    public getDialogMessages_result setSuccess(List<DialogMessage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public getDialogMessages_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DialogMessage>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDialogMessages_result)
        return this.equals((getDialogMessages_result)that);
      return false;
    }

    public boolean equals(getDialogMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDialogMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDialogMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDialogMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getDialogMessages_resultStandardScheme getScheme() {
        return new getDialogMessages_resultStandardScheme();
      }
    }

    private static class getDialogMessages_resultStandardScheme extends StandardScheme<getDialogMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDialogMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                  struct.success = new ArrayList<DialogMessage>(_list116.size);
                  for (int _i117 = 0; _i117 < _list116.size; ++_i117)
                  {
                    DialogMessage _elem118;
                    _elem118 = new DialogMessage();
                    _elem118.read(iprot);
                    struct.success.add(_elem118);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDialogMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DialogMessage _iter119 : struct.success)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDialogMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getDialogMessages_resultTupleScheme getScheme() {
        return new getDialogMessages_resultTupleScheme();
      }
    }

    private static class getDialogMessages_resultTupleScheme extends TupleScheme<getDialogMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDialogMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DialogMessage _iter120 : struct.success)
            {
              _iter120.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDialogMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DialogMessage>(_list121.size);
            for (int _i122 = 0; _i122 < _list121.size; ++_i122)
            {
              DialogMessage _elem123;
              _elem123 = new DialogMessage();
              _elem123.read(iprot);
              struct.success.add(_elem123);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class postMessage_args implements org.apache.thrift.TBase<postMessage_args, postMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_args");

    private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_argsTupleSchemeFactory());
    }

    public long dialogId; // required
    public String content; // required
    public List<Attach> attachments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIALOG_ID((short)1, "dialogId"),
      CONTENT((short)2, "content"),
      ATTACHMENTS((short)3, "attachments");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIALOG_ID
            return DIALOG_ID;
          case 2: // CONTENT
            return CONTENT;
          case 3: // ATTACHMENTS
            return ATTACHMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIALOGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attach.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_args.class, metaDataMap);
    }

    public postMessage_args() {
    }

    public postMessage_args(
      long dialogId,
      String content,
      List<Attach> attachments)
    {
      this();
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      this.content = content;
      this.attachments = attachments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_args(postMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dialogId = other.dialogId;
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetAttachments()) {
        List<Attach> __this__attachments = new ArrayList<Attach>(other.attachments.size());
        for (Attach other_element : other.attachments) {
          __this__attachments.add(new Attach(other_element));
        }
        this.attachments = __this__attachments;
      }
    }

    public postMessage_args deepCopy() {
      return new postMessage_args(this);
    }

    @Override
    public void clear() {
      setDialogIdIsSet(false);
      this.dialogId = 0;
      this.content = null;
      this.attachments = null;
    }

    public long getDialogId() {
      return this.dialogId;
    }

    public postMessage_args setDialogId(long dialogId) {
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      return this;
    }

    public void unsetDialogId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
    public boolean isSetDialogId() {
      return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    public void setDialogIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
    }

    public String getContent() {
      return this.content;
    }

    public postMessage_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getAttachmentsSize() {
      return (this.attachments == null) ? 0 : this.attachments.size();
    }

    public java.util.Iterator<Attach> getAttachmentsIterator() {
      return (this.attachments == null) ? null : this.attachments.iterator();
    }

    public void addToAttachments(Attach elem) {
      if (this.attachments == null) {
        this.attachments = new ArrayList<Attach>();
      }
      this.attachments.add(elem);
    }

    public List<Attach> getAttachments() {
      return this.attachments;
    }

    public postMessage_args setAttachments(List<Attach> attachments) {
      this.attachments = attachments;
      return this;
    }

    public void unsetAttachments() {
      this.attachments = null;
    }

    /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
    public boolean isSetAttachments() {
      return this.attachments != null;
    }

    public void setAttachmentsIsSet(boolean value) {
      if (!value) {
        this.attachments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIALOG_ID:
        if (value == null) {
          unsetDialogId();
        } else {
          setDialogId((Long)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case ATTACHMENTS:
        if (value == null) {
          unsetAttachments();
        } else {
          setAttachments((List<Attach>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIALOG_ID:
        return Long.valueOf(getDialogId());

      case CONTENT:
        return getContent();

      case ATTACHMENTS:
        return getAttachments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIALOG_ID:
        return isSetDialogId();
      case CONTENT:
        return isSetContent();
      case ATTACHMENTS:
        return isSetAttachments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_args)
        return this.equals((postMessage_args)that);
      return false;
    }

    public boolean equals(postMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_dialogId = true;
      boolean that_present_dialogId = true;
      if (this_present_dialogId || that_present_dialogId) {
        if (!(this_present_dialogId && that_present_dialogId))
          return false;
        if (this.dialogId != that.dialogId)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_attachments = true && this.isSetAttachments();
      boolean that_present_attachments = true && that.isSetAttachments();
      if (this_present_attachments || that_present_attachments) {
        if (!(this_present_attachments && that_present_attachments))
          return false;
        if (!this.attachments.equals(that.attachments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttachments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_args(");
      boolean first = true;

      sb.append("dialogId:");
      sb.append(this.dialogId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attachments:");
      if (this.attachments == null) {
        sb.append("null");
      } else {
        sb.append(this.attachments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postMessage_argsStandardScheme getScheme() {
        return new postMessage_argsStandardScheme();
      }
    }

    private static class postMessage_argsStandardScheme extends StandardScheme<postMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dialogId = iprot.readI64();
                struct.setDialogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTACHMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.attachments = new ArrayList<Attach>(_list124.size);
                  for (int _i125 = 0; _i125 < _list124.size; ++_i125)
                  {
                    Attach _elem126;
                    _elem126 = new Attach();
                    _elem126.read(iprot);
                    struct.attachments.add(_elem126);
                  }
                  iprot.readListEnd();
                }
                struct.setAttachmentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeI64(struct.dialogId);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.attachments != null) {
          oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
            for (Attach _iter127 : struct.attachments)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postMessage_argsTupleScheme getScheme() {
        return new postMessage_argsTupleScheme();
      }
    }

    private static class postMessage_argsTupleScheme extends TupleScheme<postMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDialogId()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetAttachments()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDialogId()) {
          oprot.writeI64(struct.dialogId);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetAttachments()) {
          {
            oprot.writeI32(struct.attachments.size());
            for (Attach _iter128 : struct.attachments)
            {
              _iter128.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dialogId = iprot.readI64();
          struct.setDialogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.attachments = new ArrayList<Attach>(_list129.size);
            for (int _i130 = 0; _i130 < _list129.size; ++_i130)
            {
              Attach _elem131;
              _elem131 = new Attach();
              _elem131.read(iprot);
              struct.attachments.add(_elem131);
            }
          }
          struct.setAttachmentsIsSet(true);
        }
      }
    }

  }

  public static class postMessage_result implements org.apache.thrift.TBase<postMessage_result, postMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_resultTupleSchemeFactory());
    }

    public DialogMessage success; // required
    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DialogMessage.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_result.class, metaDataMap);
    }

    public postMessage_result() {
    }

    public postMessage_result(
      DialogMessage success,
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_result(postMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new DialogMessage(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public postMessage_result deepCopy() {
      return new postMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public DialogMessage getSuccess() {
      return this.success;
    }

    public postMessage_result setSuccess(DialogMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public postMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DialogMessage)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_result)
        return this.equals((postMessage_result)that);
      return false;
    }

    public boolean equals(postMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postMessage_resultStandardScheme getScheme() {
        return new postMessage_resultStandardScheme();
      }
    }

    private static class postMessage_resultStandardScheme extends StandardScheme<postMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DialogMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postMessage_resultTupleScheme getScheme() {
        return new postMessage_resultTupleScheme();
      }
    }

    private static class postMessage_resultTupleScheme extends TupleScheme<postMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DialogMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class updateDialogMessage_args implements org.apache.thrift.TBase<updateDialogMessage_args, updateDialogMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDialogMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDialogMessage_args");

    private static final org.apache.thrift.protocol.TField DLG_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dlgMsgId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDialogMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDialogMessage_argsTupleSchemeFactory());
    }

    public long dlgMsgId; // required
    public String content; // required
    public List<Attach> attachments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DLG_MSG_ID((short)1, "dlgMsgId"),
      CONTENT((short)2, "content"),
      ATTACHMENTS((short)3, "attachments");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DLG_MSG_ID
            return DLG_MSG_ID;
          case 2: // CONTENT
            return CONTENT;
          case 3: // ATTACHMENTS
            return ATTACHMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DLGMSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DLG_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("dlgMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attach.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDialogMessage_args.class, metaDataMap);
    }

    public updateDialogMessage_args() {
    }

    public updateDialogMessage_args(
      long dlgMsgId,
      String content,
      List<Attach> attachments)
    {
      this();
      this.dlgMsgId = dlgMsgId;
      setDlgMsgIdIsSet(true);
      this.content = content;
      this.attachments = attachments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDialogMessage_args(updateDialogMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dlgMsgId = other.dlgMsgId;
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetAttachments()) {
        List<Attach> __this__attachments = new ArrayList<Attach>(other.attachments.size());
        for (Attach other_element : other.attachments) {
          __this__attachments.add(new Attach(other_element));
        }
        this.attachments = __this__attachments;
      }
    }

    public updateDialogMessage_args deepCopy() {
      return new updateDialogMessage_args(this);
    }

    @Override
    public void clear() {
      setDlgMsgIdIsSet(false);
      this.dlgMsgId = 0;
      this.content = null;
      this.attachments = null;
    }

    public long getDlgMsgId() {
      return this.dlgMsgId;
    }

    public updateDialogMessage_args setDlgMsgId(long dlgMsgId) {
      this.dlgMsgId = dlgMsgId;
      setDlgMsgIdIsSet(true);
      return this;
    }

    public void unsetDlgMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DLGMSGID_ISSET_ID);
    }

    /** Returns true if field dlgMsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetDlgMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __DLGMSGID_ISSET_ID);
    }

    public void setDlgMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DLGMSGID_ISSET_ID, value);
    }

    public String getContent() {
      return this.content;
    }

    public updateDialogMessage_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getAttachmentsSize() {
      return (this.attachments == null) ? 0 : this.attachments.size();
    }

    public java.util.Iterator<Attach> getAttachmentsIterator() {
      return (this.attachments == null) ? null : this.attachments.iterator();
    }

    public void addToAttachments(Attach elem) {
      if (this.attachments == null) {
        this.attachments = new ArrayList<Attach>();
      }
      this.attachments.add(elem);
    }

    public List<Attach> getAttachments() {
      return this.attachments;
    }

    public updateDialogMessage_args setAttachments(List<Attach> attachments) {
      this.attachments = attachments;
      return this;
    }

    public void unsetAttachments() {
      this.attachments = null;
    }

    /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
    public boolean isSetAttachments() {
      return this.attachments != null;
    }

    public void setAttachmentsIsSet(boolean value) {
      if (!value) {
        this.attachments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DLG_MSG_ID:
        if (value == null) {
          unsetDlgMsgId();
        } else {
          setDlgMsgId((Long)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case ATTACHMENTS:
        if (value == null) {
          unsetAttachments();
        } else {
          setAttachments((List<Attach>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DLG_MSG_ID:
        return Long.valueOf(getDlgMsgId());

      case CONTENT:
        return getContent();

      case ATTACHMENTS:
        return getAttachments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DLG_MSG_ID:
        return isSetDlgMsgId();
      case CONTENT:
        return isSetContent();
      case ATTACHMENTS:
        return isSetAttachments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDialogMessage_args)
        return this.equals((updateDialogMessage_args)that);
      return false;
    }

    public boolean equals(updateDialogMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_dlgMsgId = true;
      boolean that_present_dlgMsgId = true;
      if (this_present_dlgMsgId || that_present_dlgMsgId) {
        if (!(this_present_dlgMsgId && that_present_dlgMsgId))
          return false;
        if (this.dlgMsgId != that.dlgMsgId)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_attachments = true && this.isSetAttachments();
      boolean that_present_attachments = true && that.isSetAttachments();
      if (this_present_attachments || that_present_attachments) {
        if (!(this_present_attachments && that_present_attachments))
          return false;
        if (!this.attachments.equals(that.attachments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDialogMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDlgMsgId()).compareTo(other.isSetDlgMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDlgMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dlgMsgId, other.dlgMsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttachments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDialogMessage_args(");
      boolean first = true;

      sb.append("dlgMsgId:");
      sb.append(this.dlgMsgId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attachments:");
      if (this.attachments == null) {
        sb.append("null");
      } else {
        sb.append(this.attachments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDialogMessage_argsStandardSchemeFactory implements SchemeFactory {
      public updateDialogMessage_argsStandardScheme getScheme() {
        return new updateDialogMessage_argsStandardScheme();
      }
    }

    private static class updateDialogMessage_argsStandardScheme extends StandardScheme<updateDialogMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDialogMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DLG_MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dlgMsgId = iprot.readI64();
                struct.setDlgMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTACHMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.attachments = new ArrayList<Attach>(_list132.size);
                  for (int _i133 = 0; _i133 < _list132.size; ++_i133)
                  {
                    Attach _elem134;
                    _elem134 = new Attach();
                    _elem134.read(iprot);
                    struct.attachments.add(_elem134);
                  }
                  iprot.readListEnd();
                }
                struct.setAttachmentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDialogMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DLG_MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.dlgMsgId);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.attachments != null) {
          oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
            for (Attach _iter135 : struct.attachments)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDialogMessage_argsTupleSchemeFactory implements SchemeFactory {
      public updateDialogMessage_argsTupleScheme getScheme() {
        return new updateDialogMessage_argsTupleScheme();
      }
    }

    private static class updateDialogMessage_argsTupleScheme extends TupleScheme<updateDialogMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDialogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDlgMsgId()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetAttachments()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDlgMsgId()) {
          oprot.writeI64(struct.dlgMsgId);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetAttachments()) {
          {
            oprot.writeI32(struct.attachments.size());
            for (Attach _iter136 : struct.attachments)
            {
              _iter136.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDialogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dlgMsgId = iprot.readI64();
          struct.setDlgMsgIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.attachments = new ArrayList<Attach>(_list137.size);
            for (int _i138 = 0; _i138 < _list137.size; ++_i138)
            {
              Attach _elem139;
              _elem139 = new Attach();
              _elem139.read(iprot);
              struct.attachments.add(_elem139);
            }
          }
          struct.setAttachmentsIsSet(true);
        }
      }
    }

  }

  public static class updateDialogMessage_result implements org.apache.thrift.TBase<updateDialogMessage_result, updateDialogMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDialogMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDialogMessage_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDialogMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDialogMessage_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDialogMessage_result.class, metaDataMap);
    }

    public updateDialogMessage_result() {
    }

    public updateDialogMessage_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDialogMessage_result(updateDialogMessage_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public updateDialogMessage_result deepCopy() {
      return new updateDialogMessage_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public updateDialogMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDialogMessage_result)
        return this.equals((updateDialogMessage_result)that);
      return false;
    }

    public boolean equals(updateDialogMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDialogMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDialogMessage_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDialogMessage_resultStandardSchemeFactory implements SchemeFactory {
      public updateDialogMessage_resultStandardScheme getScheme() {
        return new updateDialogMessage_resultStandardScheme();
      }
    }

    private static class updateDialogMessage_resultStandardScheme extends StandardScheme<updateDialogMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDialogMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDialogMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDialogMessage_resultTupleSchemeFactory implements SchemeFactory {
      public updateDialogMessage_resultTupleScheme getScheme() {
        return new updateDialogMessage_resultTupleScheme();
      }
    }

    private static class updateDialogMessage_resultTupleScheme extends TupleScheme<updateDialogMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDialogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDialogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class deleteDialogMessage_args implements org.apache.thrift.TBase<deleteDialogMessage_args, deleteDialogMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDialogMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDialogMessage_args");

    private static final org.apache.thrift.protocol.TField DLG_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dlgMsgId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDialogMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDialogMessage_argsTupleSchemeFactory());
    }

    public long dlgMsgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DLG_MSG_ID((short)1, "dlgMsgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DLG_MSG_ID
            return DLG_MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DLGMSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DLG_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("dlgMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDialogMessage_args.class, metaDataMap);
    }

    public deleteDialogMessage_args() {
    }

    public deleteDialogMessage_args(
      long dlgMsgId)
    {
      this();
      this.dlgMsgId = dlgMsgId;
      setDlgMsgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDialogMessage_args(deleteDialogMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dlgMsgId = other.dlgMsgId;
    }

    public deleteDialogMessage_args deepCopy() {
      return new deleteDialogMessage_args(this);
    }

    @Override
    public void clear() {
      setDlgMsgIdIsSet(false);
      this.dlgMsgId = 0;
    }

    public long getDlgMsgId() {
      return this.dlgMsgId;
    }

    public deleteDialogMessage_args setDlgMsgId(long dlgMsgId) {
      this.dlgMsgId = dlgMsgId;
      setDlgMsgIdIsSet(true);
      return this;
    }

    public void unsetDlgMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DLGMSGID_ISSET_ID);
    }

    /** Returns true if field dlgMsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetDlgMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __DLGMSGID_ISSET_ID);
    }

    public void setDlgMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DLGMSGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DLG_MSG_ID:
        if (value == null) {
          unsetDlgMsgId();
        } else {
          setDlgMsgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DLG_MSG_ID:
        return Long.valueOf(getDlgMsgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DLG_MSG_ID:
        return isSetDlgMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDialogMessage_args)
        return this.equals((deleteDialogMessage_args)that);
      return false;
    }

    public boolean equals(deleteDialogMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_dlgMsgId = true;
      boolean that_present_dlgMsgId = true;
      if (this_present_dlgMsgId || that_present_dlgMsgId) {
        if (!(this_present_dlgMsgId && that_present_dlgMsgId))
          return false;
        if (this.dlgMsgId != that.dlgMsgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteDialogMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDlgMsgId()).compareTo(other.isSetDlgMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDlgMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dlgMsgId, other.dlgMsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDialogMessage_args(");
      boolean first = true;

      sb.append("dlgMsgId:");
      sb.append(this.dlgMsgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDialogMessage_argsStandardSchemeFactory implements SchemeFactory {
      public deleteDialogMessage_argsStandardScheme getScheme() {
        return new deleteDialogMessage_argsStandardScheme();
      }
    }

    private static class deleteDialogMessage_argsStandardScheme extends StandardScheme<deleteDialogMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDialogMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DLG_MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dlgMsgId = iprot.readI64();
                struct.setDlgMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDialogMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DLG_MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.dlgMsgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDialogMessage_argsTupleSchemeFactory implements SchemeFactory {
      public deleteDialogMessage_argsTupleScheme getScheme() {
        return new deleteDialogMessage_argsTupleScheme();
      }
    }

    private static class deleteDialogMessage_argsTupleScheme extends TupleScheme<deleteDialogMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDialogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDlgMsgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDlgMsgId()) {
          oprot.writeI64(struct.dlgMsgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDialogMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dlgMsgId = iprot.readI64();
          struct.setDlgMsgIdIsSet(true);
        }
      }
    }

  }

  public static class deleteDialogMessage_result implements org.apache.thrift.TBase<deleteDialogMessage_result, deleteDialogMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDialogMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDialogMessage_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDialogMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDialogMessage_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDialogMessage_result.class, metaDataMap);
    }

    public deleteDialogMessage_result() {
    }

    public deleteDialogMessage_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDialogMessage_result(deleteDialogMessage_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public deleteDialogMessage_result deepCopy() {
      return new deleteDialogMessage_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public deleteDialogMessage_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDialogMessage_result)
        return this.equals((deleteDialogMessage_result)that);
      return false;
    }

    public boolean equals(deleteDialogMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteDialogMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDialogMessage_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDialogMessage_resultStandardSchemeFactory implements SchemeFactory {
      public deleteDialogMessage_resultStandardScheme getScheme() {
        return new deleteDialogMessage_resultStandardScheme();
      }
    }

    private static class deleteDialogMessage_resultStandardScheme extends StandardScheme<deleteDialogMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDialogMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDialogMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDialogMessage_resultTupleSchemeFactory implements SchemeFactory {
      public deleteDialogMessage_resultTupleScheme getScheme() {
        return new deleteDialogMessage_resultTupleScheme();
      }
    }

    private static class deleteDialogMessage_resultTupleScheme extends TupleScheme<deleteDialogMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDialogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDialogMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class addUserToDialog_args implements org.apache.thrift.TBase<addUserToDialog_args, addUserToDialog_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserToDialog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserToDialog_args");

    private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserToDialog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserToDialog_argsTupleSchemeFactory());
    }

    public long dialogId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIALOG_ID((short)1, "dialogId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIALOG_ID
            return DIALOG_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIALOGID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserToDialog_args.class, metaDataMap);
    }

    public addUserToDialog_args() {
    }

    public addUserToDialog_args(
      long dialogId,
      long userId)
    {
      this();
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserToDialog_args(addUserToDialog_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dialogId = other.dialogId;
      this.userId = other.userId;
    }

    public addUserToDialog_args deepCopy() {
      return new addUserToDialog_args(this);
    }

    @Override
    public void clear() {
      setDialogIdIsSet(false);
      this.dialogId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getDialogId() {
      return this.dialogId;
    }

    public addUserToDialog_args setDialogId(long dialogId) {
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      return this;
    }

    public void unsetDialogId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
    public boolean isSetDialogId() {
      return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    public void setDialogIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public addUserToDialog_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIALOG_ID:
        if (value == null) {
          unsetDialogId();
        } else {
          setDialogId((Long)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIALOG_ID:
        return Long.valueOf(getDialogId());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIALOG_ID:
        return isSetDialogId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserToDialog_args)
        return this.equals((addUserToDialog_args)that);
      return false;
    }

    public boolean equals(addUserToDialog_args that) {
      if (that == null)
        return false;

      boolean this_present_dialogId = true;
      boolean that_present_dialogId = true;
      if (this_present_dialogId || that_present_dialogId) {
        if (!(this_present_dialogId && that_present_dialogId))
          return false;
        if (this.dialogId != that.dialogId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserToDialog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserToDialog_args(");
      boolean first = true;

      sb.append("dialogId:");
      sb.append(this.dialogId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserToDialog_argsStandardSchemeFactory implements SchemeFactory {
      public addUserToDialog_argsStandardScheme getScheme() {
        return new addUserToDialog_argsStandardScheme();
      }
    }

    private static class addUserToDialog_argsStandardScheme extends StandardScheme<addUserToDialog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserToDialog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dialogId = iprot.readI64();
                struct.setDialogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserToDialog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeI64(struct.dialogId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserToDialog_argsTupleSchemeFactory implements SchemeFactory {
      public addUserToDialog_argsTupleScheme getScheme() {
        return new addUserToDialog_argsTupleScheme();
      }
    }

    private static class addUserToDialog_argsTupleScheme extends TupleScheme<addUserToDialog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserToDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDialogId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDialogId()) {
          oprot.writeI64(struct.dialogId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserToDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dialogId = iprot.readI64();
          struct.setDialogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class addUserToDialog_result implements org.apache.thrift.TBase<addUserToDialog_result, addUserToDialog_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserToDialog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserToDialog_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserToDialog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserToDialog_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserToDialog_result.class, metaDataMap);
    }

    public addUserToDialog_result() {
    }

    public addUserToDialog_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserToDialog_result(addUserToDialog_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public addUserToDialog_result deepCopy() {
      return new addUserToDialog_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public addUserToDialog_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserToDialog_result)
        return this.equals((addUserToDialog_result)that);
      return false;
    }

    public boolean equals(addUserToDialog_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addUserToDialog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserToDialog_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserToDialog_resultStandardSchemeFactory implements SchemeFactory {
      public addUserToDialog_resultStandardScheme getScheme() {
        return new addUserToDialog_resultStandardScheme();
      }
    }

    private static class addUserToDialog_resultStandardScheme extends StandardScheme<addUserToDialog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserToDialog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserToDialog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserToDialog_resultTupleSchemeFactory implements SchemeFactory {
      public addUserToDialog_resultTupleScheme getScheme() {
        return new addUserToDialog_resultTupleScheme();
      }
    }

    private static class addUserToDialog_resultTupleScheme extends TupleScheme<addUserToDialog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserToDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserToDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class removeUserFromDialog_args implements org.apache.thrift.TBase<removeUserFromDialog_args, removeUserFromDialog_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeUserFromDialog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromDialog_args");

    private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromDialog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromDialog_argsTupleSchemeFactory());
    }

    public long dialogId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIALOG_ID((short)1, "dialogId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIALOG_ID
            return DIALOG_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIALOGID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromDialog_args.class, metaDataMap);
    }

    public removeUserFromDialog_args() {
    }

    public removeUserFromDialog_args(
      long dialogId,
      long userId)
    {
      this();
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromDialog_args(removeUserFromDialog_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dialogId = other.dialogId;
      this.userId = other.userId;
    }

    public removeUserFromDialog_args deepCopy() {
      return new removeUserFromDialog_args(this);
    }

    @Override
    public void clear() {
      setDialogIdIsSet(false);
      this.dialogId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getDialogId() {
      return this.dialogId;
    }

    public removeUserFromDialog_args setDialogId(long dialogId) {
      this.dialogId = dialogId;
      setDialogIdIsSet(true);
      return this;
    }

    public void unsetDialogId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
    public boolean isSetDialogId() {
      return EncodingUtils.testBit(__isset_bitfield, __DIALOGID_ISSET_ID);
    }

    public void setDialogIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIALOGID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public removeUserFromDialog_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIALOG_ID:
        if (value == null) {
          unsetDialogId();
        } else {
          setDialogId((Long)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIALOG_ID:
        return Long.valueOf(getDialogId());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIALOG_ID:
        return isSetDialogId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromDialog_args)
        return this.equals((removeUserFromDialog_args)that);
      return false;
    }

    public boolean equals(removeUserFromDialog_args that) {
      if (that == null)
        return false;

      boolean this_present_dialogId = true;
      boolean that_present_dialogId = true;
      if (this_present_dialogId || that_present_dialogId) {
        if (!(this_present_dialogId && that_present_dialogId))
          return false;
        if (this.dialogId != that.dialogId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeUserFromDialog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialogId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromDialog_args(");
      boolean first = true;

      sb.append("dialogId:");
      sb.append(this.dialogId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromDialog_argsStandardSchemeFactory implements SchemeFactory {
      public removeUserFromDialog_argsStandardScheme getScheme() {
        return new removeUserFromDialog_argsStandardScheme();
      }
    }

    private static class removeUserFromDialog_argsStandardScheme extends StandardScheme<removeUserFromDialog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromDialog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIALOG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dialogId = iprot.readI64();
                struct.setDialogIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromDialog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeI64(struct.dialogId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromDialog_argsTupleSchemeFactory implements SchemeFactory {
      public removeUserFromDialog_argsTupleScheme getScheme() {
        return new removeUserFromDialog_argsTupleScheme();
      }
    }

    private static class removeUserFromDialog_argsTupleScheme extends TupleScheme<removeUserFromDialog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDialogId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDialogId()) {
          oprot.writeI64(struct.dialogId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromDialog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dialogId = iprot.readI64();
          struct.setDialogIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class removeUserFromDialog_result implements org.apache.thrift.TBase<removeUserFromDialog_result, removeUserFromDialog_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeUserFromDialog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromDialog_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromDialog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromDialog_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.thrift.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromDialog_result.class, metaDataMap);
    }

    public removeUserFromDialog_result() {
    }

    public removeUserFromDialog_result(
      com.vmesteonline.be.thrift.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromDialog_result(removeUserFromDialog_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.thrift.InvalidOperation(other.exc);
      }
    }

    public removeUserFromDialog_result deepCopy() {
      return new removeUserFromDialog_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.thrift.InvalidOperation getExc() {
      return this.exc;
    }

    public removeUserFromDialog_result setExc(com.vmesteonline.be.thrift.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.thrift.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromDialog_result)
        return this.equals((removeUserFromDialog_result)that);
      return false;
    }

    public boolean equals(removeUserFromDialog_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeUserFromDialog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromDialog_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromDialog_resultStandardSchemeFactory implements SchemeFactory {
      public removeUserFromDialog_resultStandardScheme getScheme() {
        return new removeUserFromDialog_resultStandardScheme();
      }
    }

    private static class removeUserFromDialog_resultStandardScheme extends StandardScheme<removeUserFromDialog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromDialog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromDialog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromDialog_resultTupleSchemeFactory implements SchemeFactory {
      public removeUserFromDialog_resultTupleScheme getScheme() {
        return new removeUserFromDialog_resultTupleScheme();
      }
    }

    private static class removeUserFromDialog_resultTupleScheme extends TupleScheme<removeUserFromDialog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromDialog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.thrift.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
