/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.messageservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Poll implements org.apache.thrift.TBase<Poll, Poll._Fields>, java.io.Serializable, Cloneable, Comparable<Poll> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Poll");

  private static final org.apache.thrift.protocol.TField POLL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pollId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALREADY_POLL_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyPoll", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PollStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PollTupleSchemeFactory());
  }

  public long pollId; // required
  public List<String> names; // required
  public List<Integer> values; // required
  public String subject; // required
  public boolean alreadyPoll; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLL_ID((short)1, "pollId"),
    NAMES((short)2, "names"),
    VALUES((short)3, "values"),
    SUBJECT((short)4, "subject"),
    ALREADY_POLL((short)5, "alreadyPoll");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLL_ID
          return POLL_ID;
        case 2: // NAMES
          return NAMES;
        case 3: // VALUES
          return VALUES;
        case 4: // SUBJECT
          return SUBJECT;
        case 5: // ALREADY_POLL
          return ALREADY_POLL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POLLID_ISSET_ID = 0;
  private static final int __ALREADYPOLL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLL_ID, new org.apache.thrift.meta_data.FieldMetaData("pollId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALREADY_POLL, new org.apache.thrift.meta_data.FieldMetaData("alreadyPoll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Poll.class, metaDataMap);
  }

  public Poll() {
  }

  public Poll(
    long pollId,
    List<String> names,
    List<Integer> values,
    String subject,
    boolean alreadyPoll)
  {
    this();
    this.pollId = pollId;
    setPollIdIsSet(true);
    this.names = names;
    this.values = values;
    this.subject = subject;
    this.alreadyPoll = alreadyPoll;
    setAlreadyPollIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Poll(Poll other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pollId = other.pollId;
    if (other.isSetNames()) {
      List<String> __this__names = new ArrayList<String>(other.names);
      this.names = __this__names;
    }
    if (other.isSetValues()) {
      List<Integer> __this__values = new ArrayList<Integer>(other.values);
      this.values = __this__values;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    this.alreadyPoll = other.alreadyPoll;
  }

  public Poll deepCopy() {
    return new Poll(this);
  }

  @Override
  public void clear() {
    setPollIdIsSet(false);
    this.pollId = 0;
    this.names = null;
    this.values = null;
    this.subject = null;
    setAlreadyPollIsSet(false);
    this.alreadyPoll = false;
  }

  public long getPollId() {
    return this.pollId;
  }

  public Poll setPollId(long pollId) {
    this.pollId = pollId;
    setPollIdIsSet(true);
    return this;
  }

  public void unsetPollId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLLID_ISSET_ID);
  }

  /** Returns true if field pollId is set (has been assigned a value) and false otherwise */
  public boolean isSetPollId() {
    return EncodingUtils.testBit(__isset_bitfield, __POLLID_ISSET_ID);
  }

  public void setPollIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLLID_ISSET_ID, value);
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  public java.util.Iterator<String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(String elem) {
    if (this.names == null) {
      this.names = new ArrayList<String>();
    }
    this.names.add(elem);
  }

  public List<String> getNames() {
    return this.names;
  }

  public Poll setNames(List<String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<Integer> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(int elem) {
    if (this.values == null) {
      this.values = new ArrayList<Integer>();
    }
    this.values.add(elem);
  }

  public List<Integer> getValues() {
    return this.values;
  }

  public Poll setValues(List<Integer> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public Poll setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public boolean isAlreadyPoll() {
    return this.alreadyPoll;
  }

  public Poll setAlreadyPoll(boolean alreadyPoll) {
    this.alreadyPoll = alreadyPoll;
    setAlreadyPollIsSet(true);
    return this;
  }

  public void unsetAlreadyPoll() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALREADYPOLL_ISSET_ID);
  }

  /** Returns true if field alreadyPoll is set (has been assigned a value) and false otherwise */
  public boolean isSetAlreadyPoll() {
    return EncodingUtils.testBit(__isset_bitfield, __ALREADYPOLL_ISSET_ID);
  }

  public void setAlreadyPollIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALREADYPOLL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POLL_ID:
      if (value == null) {
        unsetPollId();
      } else {
        setPollId((Long)value);
      }
      break;

    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((List<String>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<Integer>)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case ALREADY_POLL:
      if (value == null) {
        unsetAlreadyPoll();
      } else {
        setAlreadyPoll((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POLL_ID:
      return Long.valueOf(getPollId());

    case NAMES:
      return getNames();

    case VALUES:
      return getValues();

    case SUBJECT:
      return getSubject();

    case ALREADY_POLL:
      return Boolean.valueOf(isAlreadyPoll());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POLL_ID:
      return isSetPollId();
    case NAMES:
      return isSetNames();
    case VALUES:
      return isSetValues();
    case SUBJECT:
      return isSetSubject();
    case ALREADY_POLL:
      return isSetAlreadyPoll();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Poll)
      return this.equals((Poll)that);
    return false;
  }

  public boolean equals(Poll that) {
    if (that == null)
      return false;

    boolean this_present_pollId = true;
    boolean that_present_pollId = true;
    if (this_present_pollId || that_present_pollId) {
      if (!(this_present_pollId && that_present_pollId))
        return false;
      if (this.pollId != that.pollId)
        return false;
    }

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_alreadyPoll = true;
    boolean that_present_alreadyPoll = true;
    if (this_present_alreadyPoll || that_present_alreadyPoll) {
      if (!(this_present_alreadyPoll && that_present_alreadyPoll))
        return false;
      if (this.alreadyPoll != that.alreadyPoll)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Poll other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPollId()).compareTo(other.isSetPollId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollId, other.pollId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, other.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlreadyPoll()).compareTo(other.isSetAlreadyPoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlreadyPoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyPoll, other.alreadyPoll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Poll(");
    boolean first = true;

    sb.append("pollId:");
    sb.append(this.pollId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("names:");
    if (this.names == null) {
      sb.append("null");
    } else {
      sb.append(this.names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alreadyPoll:");
    sb.append(this.alreadyPoll);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PollStandardSchemeFactory implements SchemeFactory {
    public PollStandardScheme getScheme() {
      return new PollStandardScheme();
    }
  }

  private static class PollStandardScheme extends StandardScheme<Poll> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Poll struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pollId = iprot.readI64();
              struct.setPollIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.names = new ArrayList<String>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  String _elem38;
                  _elem38 = iprot.readString();
                  struct.names.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.values = new ArrayList<Integer>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  int _elem41;
                  _elem41 = iprot.readI32();
                  struct.values.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALREADY_POLL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.alreadyPoll = iprot.readBool();
              struct.setAlreadyPollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Poll struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POLL_ID_FIELD_DESC);
      oprot.writeI64(struct.pollId);
      oprot.writeFieldEnd();
      if (struct.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
          for (String _iter42 : struct.names)
          {
            oprot.writeString(_iter42);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.values.size()));
          for (int _iter43 : struct.values)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALREADY_POLL_FIELD_DESC);
      oprot.writeBool(struct.alreadyPoll);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PollTupleSchemeFactory implements SchemeFactory {
    public PollTupleScheme getScheme() {
      return new PollTupleScheme();
    }
  }

  private static class PollTupleScheme extends TupleScheme<Poll> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Poll struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPollId()) {
        optionals.set(0);
      }
      if (struct.isSetNames()) {
        optionals.set(1);
      }
      if (struct.isSetValues()) {
        optionals.set(2);
      }
      if (struct.isSetSubject()) {
        optionals.set(3);
      }
      if (struct.isSetAlreadyPoll()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPollId()) {
        oprot.writeI64(struct.pollId);
      }
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (String _iter44 : struct.names)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (int _iter45 : struct.values)
          {
            oprot.writeI32(_iter45);
          }
        }
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetAlreadyPoll()) {
        oprot.writeBool(struct.alreadyPoll);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Poll struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pollId = iprot.readI64();
        struct.setPollIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new ArrayList<String>(_list46.size);
          for (int _i47 = 0; _i47 < _list46.size; ++_i47)
          {
            String _elem48;
            _elem48 = iprot.readString();
            struct.names.add(_elem48);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.values = new ArrayList<Integer>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            int _elem51;
            _elem51 = iprot.readI32();
            struct.values.add(_elem51);
          }
        }
        struct.setValuesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.alreadyPoll = iprot.readBool();
        struct.setAlreadyPollIsSet(true);
      }
    }
  }

}

