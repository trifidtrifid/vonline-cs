/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift.userservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FullAddressCatalogue implements org.apache.thrift.TBase<FullAddressCatalogue, FullAddressCatalogue._Fields>, java.io.Serializable, Cloneable, Comparable<FullAddressCatalogue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FullAddressCatalogue");

  private static final org.apache.thrift.protocol.TField COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("countries", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cities", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STREETS_FIELD_DESC = new org.apache.thrift.protocol.TField("streets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BUILDINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("buildings", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FullAddressCatalogueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FullAddressCatalogueTupleSchemeFactory());
  }

  public Set<com.vmesteonline.be.thrift.Country> countries; // required
  public List<com.vmesteonline.be.thrift.City> cities; // required
  public List<com.vmesteonline.be.thrift.Street> streets; // required
  public List<com.vmesteonline.be.thrift.Building> buildings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNTRIES((short)1, "countries"),
    CITIES((short)2, "cities"),
    STREETS((short)3, "streets"),
    BUILDINGS((short)4, "buildings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNTRIES
          return COUNTRIES;
        case 2: // CITIES
          return CITIES;
        case 3: // STREETS
          return STREETS;
        case 4: // BUILDINGS
          return BUILDINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("countries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.thrift.Country.class))));
    tmpMap.put(_Fields.CITIES, new org.apache.thrift.meta_data.FieldMetaData("cities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.thrift.City.class))));
    tmpMap.put(_Fields.STREETS, new org.apache.thrift.meta_data.FieldMetaData("streets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.thrift.Street.class))));
    tmpMap.put(_Fields.BUILDINGS, new org.apache.thrift.meta_data.FieldMetaData("buildings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.thrift.Building.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FullAddressCatalogue.class, metaDataMap);
  }

  public FullAddressCatalogue() {
  }

  public FullAddressCatalogue(
    Set<com.vmesteonline.be.thrift.Country> countries,
    List<com.vmesteonline.be.thrift.City> cities,
    List<com.vmesteonline.be.thrift.Street> streets,
    List<com.vmesteonline.be.thrift.Building> buildings)
  {
    this();
    this.countries = countries;
    this.cities = cities;
    this.streets = streets;
    this.buildings = buildings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FullAddressCatalogue(FullAddressCatalogue other) {
    if (other.isSetCountries()) {
      Set<com.vmesteonline.be.thrift.Country> __this__countries = new HashSet<com.vmesteonline.be.thrift.Country>(other.countries.size());
      for (com.vmesteonline.be.thrift.Country other_element : other.countries) {
        __this__countries.add(new com.vmesteonline.be.thrift.Country(other_element));
      }
      this.countries = __this__countries;
    }
    if (other.isSetCities()) {
      List<com.vmesteonline.be.thrift.City> __this__cities = new ArrayList<com.vmesteonline.be.thrift.City>(other.cities.size());
      for (com.vmesteonline.be.thrift.City other_element : other.cities) {
        __this__cities.add(new com.vmesteonline.be.thrift.City(other_element));
      }
      this.cities = __this__cities;
    }
    if (other.isSetStreets()) {
      List<com.vmesteonline.be.thrift.Street> __this__streets = new ArrayList<com.vmesteonline.be.thrift.Street>(other.streets.size());
      for (com.vmesteonline.be.thrift.Street other_element : other.streets) {
        __this__streets.add(new com.vmesteonline.be.thrift.Street(other_element));
      }
      this.streets = __this__streets;
    }
    if (other.isSetBuildings()) {
      List<com.vmesteonline.be.thrift.Building> __this__buildings = new ArrayList<com.vmesteonline.be.thrift.Building>(other.buildings.size());
      for (com.vmesteonline.be.thrift.Building other_element : other.buildings) {
        __this__buildings.add(new com.vmesteonline.be.thrift.Building(other_element));
      }
      this.buildings = __this__buildings;
    }
  }

  public FullAddressCatalogue deepCopy() {
    return new FullAddressCatalogue(this);
  }

  @Override
  public void clear() {
    this.countries = null;
    this.cities = null;
    this.streets = null;
    this.buildings = null;
  }

  public int getCountriesSize() {
    return (this.countries == null) ? 0 : this.countries.size();
  }

  public java.util.Iterator<com.vmesteonline.be.thrift.Country> getCountriesIterator() {
    return (this.countries == null) ? null : this.countries.iterator();
  }

  public void addToCountries(com.vmesteonline.be.thrift.Country elem) {
    if (this.countries == null) {
      this.countries = new HashSet<com.vmesteonline.be.thrift.Country>();
    }
    this.countries.add(elem);
  }

  public Set<com.vmesteonline.be.thrift.Country> getCountries() {
    return this.countries;
  }

  public FullAddressCatalogue setCountries(Set<com.vmesteonline.be.thrift.Country> countries) {
    this.countries = countries;
    return this;
  }

  public void unsetCountries() {
    this.countries = null;
  }

  /** Returns true if field countries is set (has been assigned a value) and false otherwise */
  public boolean isSetCountries() {
    return this.countries != null;
  }

  public void setCountriesIsSet(boolean value) {
    if (!value) {
      this.countries = null;
    }
  }

  public int getCitiesSize() {
    return (this.cities == null) ? 0 : this.cities.size();
  }

  public java.util.Iterator<com.vmesteonline.be.thrift.City> getCitiesIterator() {
    return (this.cities == null) ? null : this.cities.iterator();
  }

  public void addToCities(com.vmesteonline.be.thrift.City elem) {
    if (this.cities == null) {
      this.cities = new ArrayList<com.vmesteonline.be.thrift.City>();
    }
    this.cities.add(elem);
  }

  public List<com.vmesteonline.be.thrift.City> getCities() {
    return this.cities;
  }

  public FullAddressCatalogue setCities(List<com.vmesteonline.be.thrift.City> cities) {
    this.cities = cities;
    return this;
  }

  public void unsetCities() {
    this.cities = null;
  }

  /** Returns true if field cities is set (has been assigned a value) and false otherwise */
  public boolean isSetCities() {
    return this.cities != null;
  }

  public void setCitiesIsSet(boolean value) {
    if (!value) {
      this.cities = null;
    }
  }

  public int getStreetsSize() {
    return (this.streets == null) ? 0 : this.streets.size();
  }

  public java.util.Iterator<com.vmesteonline.be.thrift.Street> getStreetsIterator() {
    return (this.streets == null) ? null : this.streets.iterator();
  }

  public void addToStreets(com.vmesteonline.be.thrift.Street elem) {
    if (this.streets == null) {
      this.streets = new ArrayList<com.vmesteonline.be.thrift.Street>();
    }
    this.streets.add(elem);
  }

  public List<com.vmesteonline.be.thrift.Street> getStreets() {
    return this.streets;
  }

  public FullAddressCatalogue setStreets(List<com.vmesteonline.be.thrift.Street> streets) {
    this.streets = streets;
    return this;
  }

  public void unsetStreets() {
    this.streets = null;
  }

  /** Returns true if field streets is set (has been assigned a value) and false otherwise */
  public boolean isSetStreets() {
    return this.streets != null;
  }

  public void setStreetsIsSet(boolean value) {
    if (!value) {
      this.streets = null;
    }
  }

  public int getBuildingsSize() {
    return (this.buildings == null) ? 0 : this.buildings.size();
  }

  public java.util.Iterator<com.vmesteonline.be.thrift.Building> getBuildingsIterator() {
    return (this.buildings == null) ? null : this.buildings.iterator();
  }

  public void addToBuildings(com.vmesteonline.be.thrift.Building elem) {
    if (this.buildings == null) {
      this.buildings = new ArrayList<com.vmesteonline.be.thrift.Building>();
    }
    this.buildings.add(elem);
  }

  public List<com.vmesteonline.be.thrift.Building> getBuildings() {
    return this.buildings;
  }

  public FullAddressCatalogue setBuildings(List<com.vmesteonline.be.thrift.Building> buildings) {
    this.buildings = buildings;
    return this;
  }

  public void unsetBuildings() {
    this.buildings = null;
  }

  /** Returns true if field buildings is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildings() {
    return this.buildings != null;
  }

  public void setBuildingsIsSet(boolean value) {
    if (!value) {
      this.buildings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNTRIES:
      if (value == null) {
        unsetCountries();
      } else {
        setCountries((Set<com.vmesteonline.be.thrift.Country>)value);
      }
      break;

    case CITIES:
      if (value == null) {
        unsetCities();
      } else {
        setCities((List<com.vmesteonline.be.thrift.City>)value);
      }
      break;

    case STREETS:
      if (value == null) {
        unsetStreets();
      } else {
        setStreets((List<com.vmesteonline.be.thrift.Street>)value);
      }
      break;

    case BUILDINGS:
      if (value == null) {
        unsetBuildings();
      } else {
        setBuildings((List<com.vmesteonline.be.thrift.Building>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNTRIES:
      return getCountries();

    case CITIES:
      return getCities();

    case STREETS:
      return getStreets();

    case BUILDINGS:
      return getBuildings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNTRIES:
      return isSetCountries();
    case CITIES:
      return isSetCities();
    case STREETS:
      return isSetStreets();
    case BUILDINGS:
      return isSetBuildings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FullAddressCatalogue)
      return this.equals((FullAddressCatalogue)that);
    return false;
  }

  public boolean equals(FullAddressCatalogue that) {
    if (that == null)
      return false;

    boolean this_present_countries = true && this.isSetCountries();
    boolean that_present_countries = true && that.isSetCountries();
    if (this_present_countries || that_present_countries) {
      if (!(this_present_countries && that_present_countries))
        return false;
      if (!this.countries.equals(that.countries))
        return false;
    }

    boolean this_present_cities = true && this.isSetCities();
    boolean that_present_cities = true && that.isSetCities();
    if (this_present_cities || that_present_cities) {
      if (!(this_present_cities && that_present_cities))
        return false;
      if (!this.cities.equals(that.cities))
        return false;
    }

    boolean this_present_streets = true && this.isSetStreets();
    boolean that_present_streets = true && that.isSetStreets();
    if (this_present_streets || that_present_streets) {
      if (!(this_present_streets && that_present_streets))
        return false;
      if (!this.streets.equals(that.streets))
        return false;
    }

    boolean this_present_buildings = true && this.isSetBuildings();
    boolean that_present_buildings = true && that.isSetBuildings();
    if (this_present_buildings || that_present_buildings) {
      if (!(this_present_buildings && that_present_buildings))
        return false;
      if (!this.buildings.equals(that.buildings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FullAddressCatalogue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCountries()).compareTo(other.isSetCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countries, other.countries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCities()).compareTo(other.isSetCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cities, other.cities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreets()).compareTo(other.isSetStreets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streets, other.streets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuildings()).compareTo(other.isSetBuildings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildings, other.buildings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FullAddressCatalogue(");
    boolean first = true;

    sb.append("countries:");
    if (this.countries == null) {
      sb.append("null");
    } else {
      sb.append(this.countries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cities:");
    if (this.cities == null) {
      sb.append("null");
    } else {
      sb.append(this.cities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("streets:");
    if (this.streets == null) {
      sb.append("null");
    } else {
      sb.append(this.streets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buildings:");
    if (this.buildings == null) {
      sb.append("null");
    } else {
      sb.append(this.buildings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FullAddressCatalogueStandardSchemeFactory implements SchemeFactory {
    public FullAddressCatalogueStandardScheme getScheme() {
      return new FullAddressCatalogueStandardScheme();
    }
  }

  private static class FullAddressCatalogueStandardScheme extends StandardScheme<FullAddressCatalogue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FullAddressCatalogue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.countries = new HashSet<com.vmesteonline.be.thrift.Country>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  com.vmesteonline.be.thrift.Country _elem2;
                  _elem2 = new com.vmesteonline.be.thrift.Country();
                  _elem2.read(iprot);
                  struct.countries.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.cities = new ArrayList<com.vmesteonline.be.thrift.City>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.vmesteonline.be.thrift.City _elem5;
                  _elem5 = new com.vmesteonline.be.thrift.City();
                  _elem5.read(iprot);
                  struct.cities.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STREETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.streets = new ArrayList<com.vmesteonline.be.thrift.Street>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  com.vmesteonline.be.thrift.Street _elem8;
                  _elem8 = new com.vmesteonline.be.thrift.Street();
                  _elem8.read(iprot);
                  struct.streets.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setStreetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUILDINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.buildings = new ArrayList<com.vmesteonline.be.thrift.Building>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  com.vmesteonline.be.thrift.Building _elem11;
                  _elem11 = new com.vmesteonline.be.thrift.Building();
                  _elem11.read(iprot);
                  struct.buildings.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setBuildingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FullAddressCatalogue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.countries != null) {
        oprot.writeFieldBegin(COUNTRIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.countries.size()));
          for (com.vmesteonline.be.thrift.Country _iter12 : struct.countries)
          {
            _iter12.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cities != null) {
        oprot.writeFieldBegin(CITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cities.size()));
          for (com.vmesteonline.be.thrift.City _iter13 : struct.cities)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.streets != null) {
        oprot.writeFieldBegin(STREETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.streets.size()));
          for (com.vmesteonline.be.thrift.Street _iter14 : struct.streets)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.buildings != null) {
        oprot.writeFieldBegin(BUILDINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.buildings.size()));
          for (com.vmesteonline.be.thrift.Building _iter15 : struct.buildings)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FullAddressCatalogueTupleSchemeFactory implements SchemeFactory {
    public FullAddressCatalogueTupleScheme getScheme() {
      return new FullAddressCatalogueTupleScheme();
    }
  }

  private static class FullAddressCatalogueTupleScheme extends TupleScheme<FullAddressCatalogue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FullAddressCatalogue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCountries()) {
        optionals.set(0);
      }
      if (struct.isSetCities()) {
        optionals.set(1);
      }
      if (struct.isSetStreets()) {
        optionals.set(2);
      }
      if (struct.isSetBuildings()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCountries()) {
        {
          oprot.writeI32(struct.countries.size());
          for (com.vmesteonline.be.thrift.Country _iter16 : struct.countries)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetCities()) {
        {
          oprot.writeI32(struct.cities.size());
          for (com.vmesteonline.be.thrift.City _iter17 : struct.cities)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetStreets()) {
        {
          oprot.writeI32(struct.streets.size());
          for (com.vmesteonline.be.thrift.Street _iter18 : struct.streets)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetBuildings()) {
        {
          oprot.writeI32(struct.buildings.size());
          for (com.vmesteonline.be.thrift.Building _iter19 : struct.buildings)
          {
            _iter19.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FullAddressCatalogue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.countries = new HashSet<com.vmesteonline.be.thrift.Country>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            com.vmesteonline.be.thrift.Country _elem22;
            _elem22 = new com.vmesteonline.be.thrift.Country();
            _elem22.read(iprot);
            struct.countries.add(_elem22);
          }
        }
        struct.setCountriesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cities = new ArrayList<com.vmesteonline.be.thrift.City>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            com.vmesteonline.be.thrift.City _elem25;
            _elem25 = new com.vmesteonline.be.thrift.City();
            _elem25.read(iprot);
            struct.cities.add(_elem25);
          }
        }
        struct.setCitiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.streets = new ArrayList<com.vmesteonline.be.thrift.Street>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            com.vmesteonline.be.thrift.Street _elem28;
            _elem28 = new com.vmesteonline.be.thrift.Street();
            _elem28.read(iprot);
            struct.streets.add(_elem28);
          }
        }
        struct.setStreetsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.buildings = new ArrayList<com.vmesteonline.be.thrift.Building>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.vmesteonline.be.thrift.Building _elem31;
            _elem31 = new com.vmesteonline.be.thrift.Building();
            _elem31.read(iprot);
            struct.buildings.add(_elem31);
          }
        }
        struct.setBuildingsIsSet(true);
      }
    }
  }

}

