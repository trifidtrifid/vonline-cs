/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserFamily implements org.apache.thrift.TBase<UserFamily, UserFamily._Fields>, java.io.Serializable, Cloneable, Comparable<UserFamily> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserFamily");

  private static final org.apache.thrift.protocol.TField RELATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("relations", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHILDS_FIELD_DESC = new org.apache.thrift.protocol.TField("childs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PETS_FIELD_DESC = new org.apache.thrift.protocol.TField("pets", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserFamilyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserFamilyTupleSchemeFactory());
  }

  /**
   * 
   * @see RelationsType
   */
  public RelationsType relations; // required
  public List<Children> childs; // required
  public List<Pet> pets; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RelationsType
     */
    RELATIONS((short)2, "relations"),
    CHILDS((short)3, "childs"),
    PETS((short)4, "pets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // RELATIONS
          return RELATIONS;
        case 3: // CHILDS
          return CHILDS;
        case 4: // PETS
          return PETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATIONS, new org.apache.thrift.meta_data.FieldMetaData("relations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RelationsType.class)));
    tmpMap.put(_Fields.CHILDS, new org.apache.thrift.meta_data.FieldMetaData("childs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Children.class))));
    tmpMap.put(_Fields.PETS, new org.apache.thrift.meta_data.FieldMetaData("pets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pet.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserFamily.class, metaDataMap);
  }

  public UserFamily() {
  }

  public UserFamily(
    RelationsType relations,
    List<Children> childs,
    List<Pet> pets)
  {
    this();
    this.relations = relations;
    this.childs = childs;
    this.pets = pets;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserFamily(UserFamily other) {
    if (other.isSetRelations()) {
      this.relations = other.relations;
    }
    if (other.isSetChilds()) {
      List<Children> __this__childs = new ArrayList<Children>(other.childs.size());
      for (Children other_element : other.childs) {
        __this__childs.add(new Children(other_element));
      }
      this.childs = __this__childs;
    }
    if (other.isSetPets()) {
      List<Pet> __this__pets = new ArrayList<Pet>(other.pets.size());
      for (Pet other_element : other.pets) {
        __this__pets.add(new Pet(other_element));
      }
      this.pets = __this__pets;
    }
  }

  public UserFamily deepCopy() {
    return new UserFamily(this);
  }

  @Override
  public void clear() {
    this.relations = null;
    this.childs = null;
    this.pets = null;
  }

  /**
   * 
   * @see RelationsType
   */
  public RelationsType getRelations() {
    return this.relations;
  }

  /**
   * 
   * @see RelationsType
   */
  public UserFamily setRelations(RelationsType relations) {
    this.relations = relations;
    return this;
  }

  public void unsetRelations() {
    this.relations = null;
  }

  /** Returns true if field relations is set (has been assigned a value) and false otherwise */
  public boolean isSetRelations() {
    return this.relations != null;
  }

  public void setRelationsIsSet(boolean value) {
    if (!value) {
      this.relations = null;
    }
  }

  public int getChildsSize() {
    return (this.childs == null) ? 0 : this.childs.size();
  }

  public java.util.Iterator<Children> getChildsIterator() {
    return (this.childs == null) ? null : this.childs.iterator();
  }

  public void addToChilds(Children elem) {
    if (this.childs == null) {
      this.childs = new ArrayList<Children>();
    }
    this.childs.add(elem);
  }

  public List<Children> getChilds() {
    return this.childs;
  }

  public UserFamily setChilds(List<Children> childs) {
    this.childs = childs;
    return this;
  }

  public void unsetChilds() {
    this.childs = null;
  }

  /** Returns true if field childs is set (has been assigned a value) and false otherwise */
  public boolean isSetChilds() {
    return this.childs != null;
  }

  public void setChildsIsSet(boolean value) {
    if (!value) {
      this.childs = null;
    }
  }

  public int getPetsSize() {
    return (this.pets == null) ? 0 : this.pets.size();
  }

  public java.util.Iterator<Pet> getPetsIterator() {
    return (this.pets == null) ? null : this.pets.iterator();
  }

  public void addToPets(Pet elem) {
    if (this.pets == null) {
      this.pets = new ArrayList<Pet>();
    }
    this.pets.add(elem);
  }

  public List<Pet> getPets() {
    return this.pets;
  }

  public UserFamily setPets(List<Pet> pets) {
    this.pets = pets;
    return this;
  }

  public void unsetPets() {
    this.pets = null;
  }

  /** Returns true if field pets is set (has been assigned a value) and false otherwise */
  public boolean isSetPets() {
    return this.pets != null;
  }

  public void setPetsIsSet(boolean value) {
    if (!value) {
      this.pets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATIONS:
      if (value == null) {
        unsetRelations();
      } else {
        setRelations((RelationsType)value);
      }
      break;

    case CHILDS:
      if (value == null) {
        unsetChilds();
      } else {
        setChilds((List<Children>)value);
      }
      break;

    case PETS:
      if (value == null) {
        unsetPets();
      } else {
        setPets((List<Pet>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATIONS:
      return getRelations();

    case CHILDS:
      return getChilds();

    case PETS:
      return getPets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATIONS:
      return isSetRelations();
    case CHILDS:
      return isSetChilds();
    case PETS:
      return isSetPets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserFamily)
      return this.equals((UserFamily)that);
    return false;
  }

  public boolean equals(UserFamily that) {
    if (that == null)
      return false;

    boolean this_present_relations = true && this.isSetRelations();
    boolean that_present_relations = true && that.isSetRelations();
    if (this_present_relations || that_present_relations) {
      if (!(this_present_relations && that_present_relations))
        return false;
      if (!this.relations.equals(that.relations))
        return false;
    }

    boolean this_present_childs = true && this.isSetChilds();
    boolean that_present_childs = true && that.isSetChilds();
    if (this_present_childs || that_present_childs) {
      if (!(this_present_childs && that_present_childs))
        return false;
      if (!this.childs.equals(that.childs))
        return false;
    }

    boolean this_present_pets = true && this.isSetPets();
    boolean that_present_pets = true && that.isSetPets();
    if (this_present_pets || that_present_pets) {
      if (!(this_present_pets && that_present_pets))
        return false;
      if (!this.pets.equals(that.pets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserFamily other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelations()).compareTo(other.isSetRelations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relations, other.relations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChilds()).compareTo(other.isSetChilds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChilds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childs, other.childs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPets()).compareTo(other.isSetPets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pets, other.pets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserFamily(");
    boolean first = true;

    sb.append("relations:");
    if (this.relations == null) {
      sb.append("null");
    } else {
      sb.append(this.relations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childs:");
    if (this.childs == null) {
      sb.append("null");
    } else {
      sb.append(this.childs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pets:");
    if (this.pets == null) {
      sb.append("null");
    } else {
      sb.append(this.pets);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserFamilyStandardSchemeFactory implements SchemeFactory {
    public UserFamilyStandardScheme getScheme() {
      return new UserFamilyStandardScheme();
    }
  }

  private static class UserFamilyStandardScheme extends StandardScheme<UserFamily> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserFamily struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // RELATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relations = RelationsType.findByValue(iprot.readI32());
              struct.setRelationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHILDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.childs = new ArrayList<Children>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Children _elem18;
                  _elem18 = new Children();
                  _elem18.read(iprot);
                  struct.childs.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setChildsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.pets = new ArrayList<Pet>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  Pet _elem21;
                  _elem21 = new Pet();
                  _elem21.read(iprot);
                  struct.pets.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setPetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserFamily struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relations != null) {
        oprot.writeFieldBegin(RELATIONS_FIELD_DESC);
        oprot.writeI32(struct.relations.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.childs != null) {
        oprot.writeFieldBegin(CHILDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.childs.size()));
          for (Children _iter22 : struct.childs)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pets != null) {
        oprot.writeFieldBegin(PETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pets.size()));
          for (Pet _iter23 : struct.pets)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserFamilyTupleSchemeFactory implements SchemeFactory {
    public UserFamilyTupleScheme getScheme() {
      return new UserFamilyTupleScheme();
    }
  }

  private static class UserFamilyTupleScheme extends TupleScheme<UserFamily> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelations()) {
        optionals.set(0);
      }
      if (struct.isSetChilds()) {
        optionals.set(1);
      }
      if (struct.isSetPets()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRelations()) {
        oprot.writeI32(struct.relations.getValue());
      }
      if (struct.isSetChilds()) {
        {
          oprot.writeI32(struct.childs.size());
          for (Children _iter24 : struct.childs)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetPets()) {
        {
          oprot.writeI32(struct.pets.size());
          for (Pet _iter25 : struct.pets)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.relations = RelationsType.findByValue(iprot.readI32());
        struct.setRelationsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.childs = new ArrayList<Children>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            Children _elem28;
            _elem28 = new Children();
            _elem28.read(iprot);
            struct.childs.add(_elem28);
          }
        }
        struct.setChildsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pets = new ArrayList<Pet>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            Pet _elem31;
            _elem31 = new Pet();
            _elem31.read(iprot);
            struct.pets.add(_elem31);
          }
        }
        struct.setPetsIsSet(true);
      }
    }
  }

}

