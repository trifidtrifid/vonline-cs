/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserProfile implements org.apache.thrift.TBase<UserProfile, UserProfile._Fields>, java.io.Serializable, Cloneable, Comparable<UserProfile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserProfile");

  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contacts", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PRIVACY_FIELD_DESC = new org.apache.thrift.protocol.TField("privacy", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField INTERESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("interests", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifications", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField IMPORTANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("importancy", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField POPULATITY_FIELD_DESC = new org.apache.thrift.protocol.TField("populatity", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserProfileTupleSchemeFactory());
  }

  public UserInfo userInfo; // required
  public UserContacts contacts; // required
  public UserFamily family; // required
  public UserPrivacy privacy; // required
  public UserInterests interests; // required
  public Notifications notifications; // required
  public int importancy; // required
  public int populatity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_INFO((short)1, "userInfo"),
    CONTACTS((short)2, "contacts"),
    FAMILY((short)3, "family"),
    PRIVACY((short)4, "privacy"),
    INTERESTS((short)5, "interests"),
    NOTIFICATIONS((short)6, "notifications"),
    IMPORTANCY((short)7, "importancy"),
    POPULATITY((short)8, "populatity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_INFO
          return USER_INFO;
        case 2: // CONTACTS
          return CONTACTS;
        case 3: // FAMILY
          return FAMILY;
        case 4: // PRIVACY
          return PRIVACY;
        case 5: // INTERESTS
          return INTERESTS;
        case 6: // NOTIFICATIONS
          return NOTIFICATIONS;
        case 7: // IMPORTANCY
          return IMPORTANCY;
        case 8: // POPULATITY
          return POPULATITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMPORTANCY_ISSET_ID = 0;
  private static final int __POPULATITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("contacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserContacts.class)));
    tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserFamily.class)));
    tmpMap.put(_Fields.PRIVACY, new org.apache.thrift.meta_data.FieldMetaData("privacy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPrivacy.class)));
    tmpMap.put(_Fields.INTERESTS, new org.apache.thrift.meta_data.FieldMetaData("interests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInterests.class)));
    tmpMap.put(_Fields.NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("notifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Notifications.class)));
    tmpMap.put(_Fields.IMPORTANCY, new org.apache.thrift.meta_data.FieldMetaData("importancy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULATITY, new org.apache.thrift.meta_data.FieldMetaData("populatity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserProfile.class, metaDataMap);
  }

  public UserProfile() {
  }

  public UserProfile(
    UserInfo userInfo,
    UserContacts contacts,
    UserFamily family,
    UserPrivacy privacy,
    UserInterests interests,
    Notifications notifications,
    int importancy,
    int populatity)
  {
    this();
    this.userInfo = userInfo;
    this.contacts = contacts;
    this.family = family;
    this.privacy = privacy;
    this.interests = interests;
    this.notifications = notifications;
    this.importancy = importancy;
    setImportancyIsSet(true);
    this.populatity = populatity;
    setPopulatityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserProfile(UserProfile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserInfo()) {
      this.userInfo = new UserInfo(other.userInfo);
    }
    if (other.isSetContacts()) {
      this.contacts = new UserContacts(other.contacts);
    }
    if (other.isSetFamily()) {
      this.family = new UserFamily(other.family);
    }
    if (other.isSetPrivacy()) {
      this.privacy = new UserPrivacy(other.privacy);
    }
    if (other.isSetInterests()) {
      this.interests = new UserInterests(other.interests);
    }
    if (other.isSetNotifications()) {
      this.notifications = new Notifications(other.notifications);
    }
    this.importancy = other.importancy;
    this.populatity = other.populatity;
  }

  public UserProfile deepCopy() {
    return new UserProfile(this);
  }

  @Override
  public void clear() {
    this.userInfo = null;
    this.contacts = null;
    this.family = null;
    this.privacy = null;
    this.interests = null;
    this.notifications = null;
    setImportancyIsSet(false);
    this.importancy = 0;
    setPopulatityIsSet(false);
    this.populatity = 0;
  }

  public UserInfo getUserInfo() {
    return this.userInfo;
  }

  public UserProfile setUserInfo(UserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public UserContacts getContacts() {
    return this.contacts;
  }

  public UserProfile setContacts(UserContacts contacts) {
    this.contacts = contacts;
    return this;
  }

  public void unsetContacts() {
    this.contacts = null;
  }

  /** Returns true if field contacts is set (has been assigned a value) and false otherwise */
  public boolean isSetContacts() {
    return this.contacts != null;
  }

  public void setContactsIsSet(boolean value) {
    if (!value) {
      this.contacts = null;
    }
  }

  public UserFamily getFamily() {
    return this.family;
  }

  public UserProfile setFamily(UserFamily family) {
    this.family = family;
    return this;
  }

  public void unsetFamily() {
    this.family = null;
  }

  /** Returns true if field family is set (has been assigned a value) and false otherwise */
  public boolean isSetFamily() {
    return this.family != null;
  }

  public void setFamilyIsSet(boolean value) {
    if (!value) {
      this.family = null;
    }
  }

  public UserPrivacy getPrivacy() {
    return this.privacy;
  }

  public UserProfile setPrivacy(UserPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  public void unsetPrivacy() {
    this.privacy = null;
  }

  /** Returns true if field privacy is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacy() {
    return this.privacy != null;
  }

  public void setPrivacyIsSet(boolean value) {
    if (!value) {
      this.privacy = null;
    }
  }

  public UserInterests getInterests() {
    return this.interests;
  }

  public UserProfile setInterests(UserInterests interests) {
    this.interests = interests;
    return this;
  }

  public void unsetInterests() {
    this.interests = null;
  }

  /** Returns true if field interests is set (has been assigned a value) and false otherwise */
  public boolean isSetInterests() {
    return this.interests != null;
  }

  public void setInterestsIsSet(boolean value) {
    if (!value) {
      this.interests = null;
    }
  }

  public Notifications getNotifications() {
    return this.notifications;
  }

  public UserProfile setNotifications(Notifications notifications) {
    this.notifications = notifications;
    return this;
  }

  public void unsetNotifications() {
    this.notifications = null;
  }

  /** Returns true if field notifications is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifications() {
    return this.notifications != null;
  }

  public void setNotificationsIsSet(boolean value) {
    if (!value) {
      this.notifications = null;
    }
  }

  public int getImportancy() {
    return this.importancy;
  }

  public UserProfile setImportancy(int importancy) {
    this.importancy = importancy;
    setImportancyIsSet(true);
    return this;
  }

  public void unsetImportancy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPORTANCY_ISSET_ID);
  }

  /** Returns true if field importancy is set (has been assigned a value) and false otherwise */
  public boolean isSetImportancy() {
    return EncodingUtils.testBit(__isset_bitfield, __IMPORTANCY_ISSET_ID);
  }

  public void setImportancyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPORTANCY_ISSET_ID, value);
  }

  public int getPopulatity() {
    return this.populatity;
  }

  public UserProfile setPopulatity(int populatity) {
    this.populatity = populatity;
    setPopulatityIsSet(true);
    return this;
  }

  public void unsetPopulatity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULATITY_ISSET_ID);
  }

  /** Returns true if field populatity is set (has been assigned a value) and false otherwise */
  public boolean isSetPopulatity() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULATITY_ISSET_ID);
  }

  public void setPopulatityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULATITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((UserInfo)value);
      }
      break;

    case CONTACTS:
      if (value == null) {
        unsetContacts();
      } else {
        setContacts((UserContacts)value);
      }
      break;

    case FAMILY:
      if (value == null) {
        unsetFamily();
      } else {
        setFamily((UserFamily)value);
      }
      break;

    case PRIVACY:
      if (value == null) {
        unsetPrivacy();
      } else {
        setPrivacy((UserPrivacy)value);
      }
      break;

    case INTERESTS:
      if (value == null) {
        unsetInterests();
      } else {
        setInterests((UserInterests)value);
      }
      break;

    case NOTIFICATIONS:
      if (value == null) {
        unsetNotifications();
      } else {
        setNotifications((Notifications)value);
      }
      break;

    case IMPORTANCY:
      if (value == null) {
        unsetImportancy();
      } else {
        setImportancy((Integer)value);
      }
      break;

    case POPULATITY:
      if (value == null) {
        unsetPopulatity();
      } else {
        setPopulatity((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_INFO:
      return getUserInfo();

    case CONTACTS:
      return getContacts();

    case FAMILY:
      return getFamily();

    case PRIVACY:
      return getPrivacy();

    case INTERESTS:
      return getInterests();

    case NOTIFICATIONS:
      return getNotifications();

    case IMPORTANCY:
      return Integer.valueOf(getImportancy());

    case POPULATITY:
      return Integer.valueOf(getPopulatity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_INFO:
      return isSetUserInfo();
    case CONTACTS:
      return isSetContacts();
    case FAMILY:
      return isSetFamily();
    case PRIVACY:
      return isSetPrivacy();
    case INTERESTS:
      return isSetInterests();
    case NOTIFICATIONS:
      return isSetNotifications();
    case IMPORTANCY:
      return isSetImportancy();
    case POPULATITY:
      return isSetPopulatity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserProfile)
      return this.equals((UserProfile)that);
    return false;
  }

  public boolean equals(UserProfile that) {
    if (that == null)
      return false;

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_contacts = true && this.isSetContacts();
    boolean that_present_contacts = true && that.isSetContacts();
    if (this_present_contacts || that_present_contacts) {
      if (!(this_present_contacts && that_present_contacts))
        return false;
      if (!this.contacts.equals(that.contacts))
        return false;
    }

    boolean this_present_family = true && this.isSetFamily();
    boolean that_present_family = true && that.isSetFamily();
    if (this_present_family || that_present_family) {
      if (!(this_present_family && that_present_family))
        return false;
      if (!this.family.equals(that.family))
        return false;
    }

    boolean this_present_privacy = true && this.isSetPrivacy();
    boolean that_present_privacy = true && that.isSetPrivacy();
    if (this_present_privacy || that_present_privacy) {
      if (!(this_present_privacy && that_present_privacy))
        return false;
      if (!this.privacy.equals(that.privacy))
        return false;
    }

    boolean this_present_interests = true && this.isSetInterests();
    boolean that_present_interests = true && that.isSetInterests();
    if (this_present_interests || that_present_interests) {
      if (!(this_present_interests && that_present_interests))
        return false;
      if (!this.interests.equals(that.interests))
        return false;
    }

    boolean this_present_notifications = true && this.isSetNotifications();
    boolean that_present_notifications = true && that.isSetNotifications();
    if (this_present_notifications || that_present_notifications) {
      if (!(this_present_notifications && that_present_notifications))
        return false;
      if (!this.notifications.equals(that.notifications))
        return false;
    }

    boolean this_present_importancy = true;
    boolean that_present_importancy = true;
    if (this_present_importancy || that_present_importancy) {
      if (!(this_present_importancy && that_present_importancy))
        return false;
      if (this.importancy != that.importancy)
        return false;
    }

    boolean this_present_populatity = true;
    boolean that_present_populatity = true;
    if (this_present_populatity || that_present_populatity) {
      if (!(this_present_populatity && that_present_populatity))
        return false;
      if (this.populatity != that.populatity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContacts()).compareTo(other.isSetContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contacts, other.contacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacy()).compareTo(other.isSetPrivacy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacy, other.privacy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterests()).compareTo(other.isSetInterests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interests, other.interests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifications()).compareTo(other.isSetNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifications, other.notifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportancy()).compareTo(other.isSetImportancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importancy, other.importancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopulatity()).compareTo(other.isSetPopulatity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulatity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.populatity, other.populatity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserProfile(");
    boolean first = true;

    sb.append("userInfo:");
    if (this.userInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contacts:");
    if (this.contacts == null) {
      sb.append("null");
    } else {
      sb.append(this.contacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("family:");
    if (this.family == null) {
      sb.append("null");
    } else {
      sb.append(this.family);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacy:");
    if (this.privacy == null) {
      sb.append("null");
    } else {
      sb.append(this.privacy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interests:");
    if (this.interests == null) {
      sb.append("null");
    } else {
      sb.append(this.interests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifications:");
    if (this.notifications == null) {
      sb.append("null");
    } else {
      sb.append(this.notifications);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("importancy:");
    sb.append(this.importancy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("populatity:");
    sb.append(this.populatity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userInfo != null) {
      userInfo.validate();
    }
    if (contacts != null) {
      contacts.validate();
    }
    if (family != null) {
      family.validate();
    }
    if (privacy != null) {
      privacy.validate();
    }
    if (interests != null) {
      interests.validate();
    }
    if (notifications != null) {
      notifications.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserProfileStandardSchemeFactory implements SchemeFactory {
    public UserProfileStandardScheme getScheme() {
      return new UserProfileStandardScheme();
    }
  }

  private static class UserProfileStandardScheme extends StandardScheme<UserProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new UserInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contacts = new UserContacts();
              struct.contacts.read(iprot);
              struct.setContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.family = new UserFamily();
              struct.family.read(iprot);
              struct.setFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIVACY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.privacy = new UserPrivacy();
              struct.privacy.read(iprot);
              struct.setPrivacyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.interests = new UserInterests();
              struct.interests.read(iprot);
              struct.setInterestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.notifications = new Notifications();
              struct.notifications.read(iprot);
              struct.setNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMPORTANCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.importancy = iprot.readI32();
              struct.setImportancyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POPULATITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.populatity = iprot.readI32();
              struct.setPopulatityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userInfo != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        struct.userInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.contacts != null) {
        oprot.writeFieldBegin(CONTACTS_FIELD_DESC);
        struct.contacts.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.family != null) {
        oprot.writeFieldBegin(FAMILY_FIELD_DESC);
        struct.family.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.privacy != null) {
        oprot.writeFieldBegin(PRIVACY_FIELD_DESC);
        struct.privacy.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.interests != null) {
        oprot.writeFieldBegin(INTERESTS_FIELD_DESC);
        struct.interests.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.notifications != null) {
        oprot.writeFieldBegin(NOTIFICATIONS_FIELD_DESC);
        struct.notifications.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMPORTANCY_FIELD_DESC);
      oprot.writeI32(struct.importancy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULATITY_FIELD_DESC);
      oprot.writeI32(struct.populatity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserProfileTupleSchemeFactory implements SchemeFactory {
    public UserProfileTupleScheme getScheme() {
      return new UserProfileTupleScheme();
    }
  }

  private static class UserProfileTupleScheme extends TupleScheme<UserProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserInfo()) {
        optionals.set(0);
      }
      if (struct.isSetContacts()) {
        optionals.set(1);
      }
      if (struct.isSetFamily()) {
        optionals.set(2);
      }
      if (struct.isSetPrivacy()) {
        optionals.set(3);
      }
      if (struct.isSetInterests()) {
        optionals.set(4);
      }
      if (struct.isSetNotifications()) {
        optionals.set(5);
      }
      if (struct.isSetImportancy()) {
        optionals.set(6);
      }
      if (struct.isSetPopulatity()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUserInfo()) {
        struct.userInfo.write(oprot);
      }
      if (struct.isSetContacts()) {
        struct.contacts.write(oprot);
      }
      if (struct.isSetFamily()) {
        struct.family.write(oprot);
      }
      if (struct.isSetPrivacy()) {
        struct.privacy.write(oprot);
      }
      if (struct.isSetInterests()) {
        struct.interests.write(oprot);
      }
      if (struct.isSetNotifications()) {
        struct.notifications.write(oprot);
      }
      if (struct.isSetImportancy()) {
        oprot.writeI32(struct.importancy);
      }
      if (struct.isSetPopulatity()) {
        oprot.writeI32(struct.populatity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.userInfo = new UserInfo();
        struct.userInfo.read(iprot);
        struct.setUserInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contacts = new UserContacts();
        struct.contacts.read(iprot);
        struct.setContactsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.family = new UserFamily();
        struct.family.read(iprot);
        struct.setFamilyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.privacy = new UserPrivacy();
        struct.privacy.read(iprot);
        struct.setPrivacyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interests = new UserInterests();
        struct.interests.read(iprot);
        struct.setInterestsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notifications = new Notifications();
        struct.notifications.read(iprot);
        struct.setNotificationsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.importancy = iprot.readI32();
        struct.setImportancyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.populatity = iprot.readI32();
        struct.setPopulatityIsSet(true);
      }
    }
  }

}

