(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\node_modules\\angular-file-upload\\dist\\angular-file-upload.min.js":[function(require,module,exports){
/*! 1.6.4 */
!function(){var a=angular.module("angularFileUpload",[]);a.service("$upload",["$http","$q","$timeout",function(a,b,c){function d(d){d.method=d.method||"POST",d.headers=d.headers||{},d.transformRequest=d.transformRequest||function(b,c){return window.ArrayBuffer&&b instanceof window.ArrayBuffer?b:a.defaults.transformRequest[0](b,c)};var e=b.defer();window.XMLHttpRequest.__isShim&&(d.headers.__setXHR_=function(){return function(a){a&&(d.__XHR=a,d.xhrFn&&d.xhrFn(a),a.upload.addEventListener("progress",function(a){e.notify(a)},!1),a.upload.addEventListener("load",function(a){a.lengthComputable&&e.notify(a)},!1))}}),a(d).then(function(a){e.resolve(a)},function(a){e.reject(a)},function(a){e.notify(a)});var f=e.promise;return f.success=function(a){return f.then(function(b){a(b.data,b.status,b.headers,d)}),f},f.error=function(a){return f.then(null,function(b){a(b.data,b.status,b.headers,d)}),f},f.progress=function(a){return f.then(null,null,function(b){a(b)}),f},f.abort=function(){return d.__XHR&&c(function(){d.__XHR.abort()}),f},f.xhr=function(a){return d.xhrFn=function(b){return function(){b&&b.apply(f,arguments),a.apply(f,arguments)}}(d.xhrFn),f},f}this.upload=function(b){b.headers=b.headers||{},b.headers["Content-Type"]=void 0,b.transformRequest=b.transformRequest||a.defaults.transformRequest;var c=new FormData,e=b.transformRequest,f=b.data;return b.transformRequest=function(a,c){if(f)if(b.formDataAppender)for(var d in f){var g=f[d];b.formDataAppender(a,d,g)}else for(var d in f){var g=f[d];if("function"==typeof e)g=e(g,c);else for(var h=0;h<e.length;h++){var i=e[h];"function"==typeof i&&(g=i(g,c))}a.append(d,g)}if(null!=b.file){var j=b.fileFormDataName||"file";if("[object Array]"===Object.prototype.toString.call(b.file))for(var k="[object String]"===Object.prototype.toString.call(j),h=0;h<b.file.length;h++)a.append(k?j:j[h],b.file[h],b.fileName&&b.fileName[h]||b.file[h].name);else a.append(j,b.file,b.fileName||b.file.name)}return a},b.data=c,d(b)},this.http=function(a){return d(a)}}]),a.directive("ngFileSelect",["$parse","$timeout",function(a,b){return function(c,d,e){var f=a(e.ngFileSelect);if("input"!==d[0].tagName.toLowerCase()||"file"!==(d.attr("type")&&d.attr("type").toLowerCase())){for(var g=angular.element('<input type="file">'),h=0;h<d[0].attributes.length;h++)g.attr(d[0].attributes[h].name,d[0].attributes[h].value);d.attr("data-multiple")&&g.attr("multiple","true"),g.css("top",0).css("bottom",0).css("left",0).css("right",0).css("width","100%").css("opacity",0).css("position","absolute").css("filter","alpha(opacity=0)"),d.append(g),(""===d.css("position")||"static"===d.css("position"))&&d.css("position","relative"),d=g}d.bind("change",function(a){var d,e,g=[];if(d=a.__files_||a.target.files,null!=d)for(e=0;e<d.length;e++)g.push(d.item(e));b(function(){f(c,{$files:g,$event:a})})})}}]),a.directive("ngFileDropAvailable",["$parse","$timeout",function(a,b){return function(c,d,e){if("draggable"in document.createElement("span")){var f=a(e.ngFileDropAvailable);b(function(){f(c)})}}}]),a.directive("ngFileDrop",["$parse","$timeout","$location",function(a,b,c){return function(d,e,f){function g(a){return/^[\000-\177]*$/.test(a)}function h(a,d){var e=[],f=a.dataTransfer.items;if(f&&f.length>0&&f[0].webkitGetAsEntry&&"file"!=c.protocol()&&f[0].webkitGetAsEntry().isDirectory)for(var h=0;h<f.length;h++){var j=f[h].webkitGetAsEntry();null!=j&&(g(j.name)?i(e,j):e.push(f[h].getAsFile()))}else{var k=a.dataTransfer.files;if(null!=k)for(var h=0;h<k.length;h++)e.push(k.item(h))}!function m(a){b(function(){l?m(10):d(e)},a||0)}()}function i(a,b){if(null!=b)if(b.isDirectory){var c=b.createReader();l++,c.readEntries(function(b){for(var c=0;c<b.length;c++)i(a,b[c]);l--})}else l++,b.file(function(b){l--,a.push(b)})}if("draggable"in document.createElement("span")){var j=null;e[0].addEventListener("dragover",function(c){if(c.stopPropagation(),c.preventDefault(),b.cancel(j),!e[0].__drag_over_class_)if(f.ngFileDragOverClass.search(/\) *$/)>-1){dragOverClassFn=a(f.ngFileDragOverClass);var g=dragOverClassFn(d,{$event:c});e[0].__drag_over_class_=g}else e[0].__drag_over_class_=f.ngFileDragOverClass||"dragover";e.addClass(e[0].__drag_over_class_)},!1),e[0].addEventListener("dragenter",function(a){a.stopPropagation(),a.preventDefault()},!1),e[0].addEventListener("dragleave",function(){j=b(function(){e.removeClass(e[0].__drag_over_class_),e[0].__drag_over_class_=null},f.ngFileDragOverDelay||1)},!1);var k=a(f.ngFileDrop);e[0].addEventListener("drop",function(a){a.stopPropagation(),a.preventDefault(),e.removeClass(e[0].__drag_over_class_),e[0].__drag_over_class_=null,h(a,function(b){k(d,{$files:b,$event:a})})},!1);var l=0}}}])}();
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\node_modules\\angular-ui-router\\release\\angular-ui-router.js":[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  angular.forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * Examples:
 * 
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when 
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')'];   break;
      case true:  surroundPattern = ['?(', ')?']; break;
      default:    surroundPattern = ['(' + squash + "|", ')?'];  break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp) });
    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    var param = this.params[paramName];
    var paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * 
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
  return new ArrayType(this, mode);

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$arrayMode = mode;
  }
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }
//  TODO: in 1.0, make string .is() return false if value is undefined by default.
//  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
  function regexpMatches(val) { /*jshint validthis:true */ return this.pattern.test(val); }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    string: {
      encode: valToString,
      decode: valFromString,
      is: regexpMatches,
      pattern: /[^/]*/
    },
    int: {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    bool: {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    date: {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    json: {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    any: { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      is: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);
      return config.type instanceof Type ? config.type : new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      return injector.invoke(config.$$fn);
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return isDefined(value) ? self.type.decode(value) : $$getDefaultValue();
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var result = true, isOptional, val, param, self = this;

      forEach(this.$$keys(), function(key) {
        param = self[key];
        val = paramValues[key];
        isOptional = !val && param.isOptional;
        result = result && (isOptional || !!param.type.is(val));
      });
      return result;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
  function $get(   $location,   $rootScope,   $injector,   $browser) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
        $location.url(urlMatcher.format(params || {}));
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }
        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"</pre>
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload() {
      return $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: true });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldTriggerReload(to, from, locals, options)) {
        if (to.self.reloadOnSearch !== false) $urlRouter.update();
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
          $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys(), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      // Resolve template and dependencies for all views.
      forEach(state.views, function (view, name) {
        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
        injectables.$template = [ function () {
          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: options.notify }) || '';
        }];

        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
          // References to the controller (only instantiated at link time)
          if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
            var injectLocals = angular.extend({}, injectables, locals);
            result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
          } else {
            result.$$controller = view.controller;
          }
          // Provide access to the state itself for internal use
          result.$$state = state;
          result.$$controllerAs = view.controllerAs;
          dst[name] = result;
        }));
      });

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldTriggerReload(to, from, locals, options) {
    if (to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          var promise = $animate.enter(element, null, target, cb);
          if (promise && promise.then) promise.then(cb);
        },
        leave: function(element, cb) {
          var promise = $animate.leave(element, cb);
          if (promise && promise.then) promise.then(cb);
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var inherited = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload'];

  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref, $state.current.name);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      var newHref = null, isAnchor = element.prop("tagName") === "A";
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : "href", nav = true;

      var options = { relative: base, inherit: true };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = angular.copy(newVal);
        if (!nav) return;

        newHref = $state.href(ref.state, params, options);

        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
        if (activeDirective) {
          activeDirective.$$setStateInfo(ref.state, params);
        }
        if (newHref === null) {
          nav = false;
          return false;
        }
        attrs.$set(attr, newHref);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          var transition = $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();

          // if the state has no URL, ignore one preventDefault from the <a> directive.
          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
          e.preventDefault = function() {
            if (ignorePreventDefaultCount-- <= 0)
              $timeout.cancel(transition);
          };
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      var state, params, activeClass;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$setStateInfo = function (newState, newParams) {
        state = $state.get(newState, stateContext($element));
        params = newParams;
        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if (isMatch()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function isMatch() {
        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
          return state && $state.is(state.name, params);
        } else {
          return state && $state.includes(state.name, params);
        }
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state) {
    return $state.is(state);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state) {
    return $state.includes(state);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\app.js":[function(require,module,exports){
'use strict';

/*require('./thrift.js');
require('../../gen-js/bedata_types.js');
require('../../gen-js/messageservice_types.js');
require('../../gen-js/MessageService.js');
require('../../gen-js/DialogService.js');
require('../../gen-js/userservice_types.js');
require('../../gen-js/UserService.js');
require('../../gen-js/authservice_types.js');
require('../../gen-js/AuthService.js');
require('../../gen-js/utilityservces_types.js');
require('../../gen-js/UtilityService.js');
require('../../gen-js/fileutils_types.js');
require('../../gen-js/FileService.js');
require('../../gen-js/business_types.js');
require('../../gen-js/BusinessService.js');*/

var c = require('./common.js')();
console.log('c2',c);

require('./directives.js');
require('./services.js');
require('./controllers');

require('angular-ui-router');
require('angular-file-upload');

var main = angular.module('forum', [
  //'ngRoute',
  'ui.router',
 /* 'forum.filters',*/
  'forum.services',
  'forum.directives',
  //'forum.controllers',
  'VOControllers',
  'angularFileUpload'
])
    .config(require('./config'));


},{"./common.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\common.js","./config":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\config.js","./controllers":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\index.js","./directives.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\directives.js","./services.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\services.js","angular-file-upload":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\node_modules\\angular-file-upload\\dist\\angular-file-upload.min.js","angular-ui-router":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\node_modules\\angular-ui-router\\release\\angular-ui-router.js"}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\common.js":[function(require,module,exports){

module.exports = function() {

    console.log('common');
    /* const */
    var TEXT_DEFAULT_1 = "Написать сообщение";
    var TEXT_DEFAULT_2 = "Ваш ответ";
    var TEXT_DEFAULT_3 = "Сообщение";
    var TEXT_DEFAULT_4 = "Заголовок";

    var MAP_COLOR = "6FB3E040";

    var TEXTAREA_DEFAULT_HEIGHT = 54;

    /* functions */

    var transport = new Thrift.Transport("/thrift/MessageService");
    var protocol = new Thrift.Protocol(transport);
    var messageClient = new com.vmesteonline.be.thrift.messageservice.MessageServiceClient(protocol);

    transport = new Thrift.Transport("/thrift/AuthService");
    protocol = new Thrift.Protocol(transport);
    var authClient = new com.vmesteonline.be.thrift.authservice.AuthServiceClient(protocol);

    var isLogin = authClient.checkIfAuthorized();
    var path = document.location.pathname;
    if (!isLogin && path != '/blog' && path != '/about' && path != '/contacts') document.location.replace('/login');

    transport = new Thrift.Transport("/thrift/DialogService");
    protocol = new Thrift.Protocol(transport);
    var dialogClient = new com.vmesteonline.be.thrift.messageservice.DialogServiceClient(protocol);

    transport = new Thrift.Transport("/thrift/UserService");
    protocol = new Thrift.Protocol(transport);
    var userClient = new com.vmesteonline.be.thrift.userservice.UserServiceClient(protocol);

    transport = new Thrift.Transport("/thrift/BusinessService");
    protocol = new Thrift.Protocol(transport);
    businessClient = new com.vmesteonline.be.thrift.businesservice.BusinessServiceClient(protocol);
    //BusinessServiceClient(protocol);

    if (isLogin) { //path != '/blog' && path != '/about' && path != '/contacts'
        var userClientGroups = userClient.getUserGroups(),
            userClientRubrics = userClient.getUserRubrics();

        //console.log('111',userClientRubrics,userClientGroups);
        if (userClientGroups.length == 0) document.location.replace('/login');

        var shortUserInfo = userClient.getShortUserInfo();
        console.log('0', shortUserInfo);

        var servicesStr = shortUserInfo.services.join(';');

        console.log(shortUserInfo);
        if (servicesStr.indexOf('10') != -1) shortUserInfo.countersEnabled = true;
        if (servicesStr.indexOf('11') != -1) shortUserInfo.countersConfirmed = true;
        if (servicesStr.indexOf('12') != -1) shortUserInfo.countersNotification = true;
    }
//console.log('333',userClientGroups);

    transport = new Thrift.Transport("/thrift/UtilityService");
    protocol = new Thrift.Protocol(transport);
    var utilityClient = new com.vmesteonline.be.thrift.utilityservice.UtilityServiceClient(protocol);

    transport = new Thrift.Transport("/thrift/fs");
    protocol = new Thrift.Protocol(transport);
    var fileClient = new com.vmesteonline.be.thrift.fileservice.FileServiceClient(protocol);

    function withTags(str) {
        var result = str.replace(/&#10;/g, '<br>'); // пробел после <br> специально, чтобы не слипался с ссылками
        result = result.replace(/\n/g, '<br>');
        /*var strArr = result.split(" "),

         len = strArr.length,
         tempStr;

         result = "";
         for(var i = 0; i < len; i++){
         if(strArr[i].indexOf("http://") != -1 || strArr[i].indexOf("https://") != -1){
         //tempStr = "<a href='"+ strArr[i] +"' target='_blank'>"+strArr[i]+"</a>";
         tempStr = strArr[i].link(strArr[i]);

         strArr[i] = tempStr;
         }

         result += strArr[i]+" ";
         }*/


        return result;

    }

    function withoutTags(str) {
        var result = str.replace(/<br>/g, '\n');
        result = result.replace(/<[^>]+>/g, '');
        return result;
    }

    function getStrFromHTMLCode(str) {
        //alert(str);
        var strArr = str.split(';'),
            len = strArr.length,
            symb = [], counter = 0, result = "";


        for (var i = 0; i < len; i++) {
            var strArr2 = strArr[i].split(" "),
                len2 = strArr2.length;

            if (len2 == 1) {
                if (strArr2[0].indexOf('&') != -1) {
                    //alert(strArr2[0].substr(-4) == '&#10');
                    if (strArr2[0].substr(-4) != '&#10') {
                        symb[counter] = String.fromCharCode(strArr2[0].substring(2));
                        //alert("0 "+strArr2[0].substring(2)+" "+String.fromCharCode(strArr2[0].substring(2))+" "+symb[counter]);
                    } else {
                        symb[counter] = strArr2[0].substring(0, strArr2[0].length - 4) + '\n';
                        //alert("1 "+strArr2[0].substring(2)+" "+String.fromCharCode(strArr2[0].substring(2))+" "+symb[counter]);
                    }
                } else {
                    symb[counter] = strArr[i];
                }
                result += symb[counter++];
            } else {
                for (var j = 0; j < len2; j++) {
                    if (strArr2[j].indexOf('&') != -1) {
                        if (strArr2[0].substr(-4) != '&#10') {
                            symb[counter] = String.fromCharCode(strArr2[j].substring(2));
                        } else {
                            symb[counter] = strArr2[j].substring(0, strArr2[j].length - 4) + '\n';
                        }
                    } else {
                        symb[counter] = strArr2[j];
                    }
                    (j == len2 - 1) ? result += symb[counter++] : result += symb[counter++] + " ";
                }
            }
        }

        //return symb.join('');
        return result;
    }

    function getDefaultGroup(groups) {
        var len = groups.length;
        for (var i = 0; i < len; i++) {
            if (groups[i].type == 5) return groups[i];
        }

        return groups[0];
    }

    function showGroupOverBuilding(groups, currentGroup) {
        var len = groups.length;
        for (var i = 0; i < len; i++) {
            if (groups[i].type < 4) {
                groups[i].isShow = false;
            } //4 = BUILDING
        }
    }

    function getBuildingGroup(currentGroup) {
        var len = userClientGroups.length,
            group;
        if (currentGroup.type < 4) {
            for (var j = 0; j < len; j++) {
                if (userClientGroups[j].type == 4) {
                    group = userClientGroups[j];
                }
            }
            return group;
        } else {
            return currentGroup;
        }

    }

    function getCorrectDate(str) {
        var arrDate = str.split(/[./]/),
            month = arrDate[1],
            monthStr;

        switch (month) {
            case "01":
                monthStr = "Jan";
                break;
            case "02":
                monthStr = "Feb";
                break;
            case "03":
                monthStr = "Mar";
                break;
            case "04":
                monthStr = "Apr";
                break;
            case "05":
                monthStr = "May";
                break;
            case "06":
                monthStr = "June";
                break;
            case "07":
                monthStr = "July";
                break;
            case "08":
                monthStr = "Aug";
                break;
            case "09":
                monthStr = "Sep";
                break;
            case "10":
                monthStr = "Oct";
                break;
            case "11":
                monthStr = "Nov";
                break;
            case "12":
                monthStr = "Dec";
                break;
        }

        return arrDate[0] + " " + monthStr + " " + arrDate[2];

    }

    function resetPages(base) {
        base.neighboursIsActive = false;
        base.privateMessagesIsActive = false;
        base.mapsIsActive = false;
        base.profileIsActive = false;
        base.settingsIsActive = false;
        base.talksIsActive = false;
        base.lentaIsActive = false;
        base.advertsIsActive = false;
    }

    function resetAceNavBtns(navbar) {
        navbar.neighboursBtnStatus = "";
        navbar.privateMessagesBtnStatus = "";
        navbar.mapsBtnStatus = "";
    }

    function initAttachImage(selector, attachAreaSelector) {
        var title;
        // на случай если будет прикрепляться не файл
        docsBase64[attachAreaSelector] = [];
        docsInd[attachAreaSelector] = 0;

        selector.ace_file_input({
            style: 'well',
            btn_choose: 'Изображение',
            btn_change: null,
            no_icon: '',
            droppable: true,
            thumbnail: 'large',
            icon_remove: null,
            before_change: function (files, dropped) {
                title = $(this).find('+.file-label').data('title');
                return true;
            }
        }).on('change', function () {
            var fileLabel = $(this).find('+.file-label');
            fileLabel.attr('data-title', title).removeClass('hide-placeholder');
            fileLabel.find('.file-name').hide();

            var type = selector[0].files[0].type;

            if (type.indexOf('image') != -1) {
                //если картинка
                attachAreaSelector.find('.loading').removeClass('hidden');


                var myArea = attachAreaSelector;
                if (attachAreaSelector.selector.indexOf('doc-area') != -1)
                    myArea = $(attachAreaSelector.selector.replace('doc-area', 'area'));

                setTimeout(copyImage, 200, myArea, fileLabel, type);
            } else {
                // если другой файл

                var myArea = attachAreaSelector;
                if (attachAreaSelector.selector.indexOf('doc-area') == -1)
                    myArea = $(attachAreaSelector.selector.replace('area', 'doc-area'));

                setTimeout(insertDoc, 200, selector, myArea, fileLabel);

            }

        });
    }

    var docsBase64 = [],
        docsInd = [];

    function initAttachDoc(selector, attachAreaSelector) {
        var title;
        docsBase64[attachAreaSelector] = [];
        docsInd[attachAreaSelector] = 0;

        selector.ace_file_input({
            style: 'well',
            btn_choose: 'Документ',
            btn_change: null,
            no_icon: '',
            droppable: true,
            thumbnail: 'large',
            icon_remove: null,
            before_change: function (files, dropped) {
                title = $(this).find('+.file-label').data('title');
                return true;
            }
        }).on('change', function () {
            var fileLabel = $(this).find('+.file-label');
            fileLabel.attr('data-title', title).removeClass('hide-placeholder');
            fileLabel.find('.file-name').hide();

            //setTimeout(insertDoc,200,selector,attachAreaSelector,fileLabel);

            var type = selector[0].files[0].type;

            if (type.indexOf('image') != -1) {
                //если картинка
                attachAreaSelector.find('.loading').removeClass('hidden');

                var myArea = attachAreaSelector;
                if (attachAreaSelector.selector.indexOf('doc-area') != -1)
                    myArea = $(attachAreaSelector.selector.replace('doc-area', 'area'));

                setTimeout(copyImage, 200, myArea, fileLabel, type);
            } else {
                // если другой файл

                var myArea = attachAreaSelector;
                if (attachAreaSelector.selector.indexOf('doc-area') == -1)
                    myArea = $(attachAreaSelector.selector.replace('area', 'doc-area'));

                setTimeout(insertDoc, 200, selector, myArea, fileLabel);
            }

        });
    }

    function copyImage(attachAreaSelector, fileLabel, type) {
        var copyImgSrc = fileLabel.find('.file-name img').css('background-image');

        if (copyImgSrc == 'none' || !copyImgSrc) {
            setTimeout(copyImage, 200, attachAreaSelector, fileLabel, type);
        } else {

            var url = fileClient.saveFileContent(copyImgSrc, true),
                fileName = fileLabel.find('.file-name').attr('data-title');

            attachAreaSelector.find('.loading').addClass('hidden');

            attachAreaSelector.find('.loading').before("<span class='attach-item new-attached'>" +
                "<a href='#' title='Не прикреплять' class='remove-attach-img'>&times;</a>" +
                "<img data-title='" + fileName + "' data-type='" + type + "' class='attached-img' style='background-image:url(" + url + ")'></span>");

            $('.new-attached .remove-attach-img').click(function (e) {
                e.preventDefault();
                $(this).closest('.attach-item').hide().detach();
                fileClient.deleteFile(url);
            });

            $('.new-attached').removeClass('new-attached');
        }
    }

    function insertDoc(selector, attachAreaSelector, fileLabel) {
        var docName = fileLabel.find('.file-name').attr('data-title');

        var reader = new FileReader();
        reader.readAsBinaryString(selector[0].files[0]);
        var dataType = selector[0].files[0].type;

        reader.onload = function (e) {
            docsBase64[attachAreaSelector][docsInd[attachAreaSelector]] = new com.vmesteonline.be.thrift.messageservice.Attach();
            docsBase64[attachAreaSelector][docsInd[attachAreaSelector]].fileName = docName;
            docsBase64[attachAreaSelector][docsInd[attachAreaSelector]].contentType = dataType;
            var url = docsBase64[attachAreaSelector][docsInd[attachAreaSelector]].URL = fileClient.saveFileContent(base64encode(reader.result));
            docsInd[attachAreaSelector]++;

            attachAreaSelector.append("<span class='attach-item new-attached' data-href='" + url + "' data-type='" + dataType + "'>" +
                "<a href='#' title='Не прикреплять' class='remove-attach-img'>&times;</a>" +
                '<span>' + docName + '</span>' +
                "</span>");

            $('.new-attached .remove-attach-img').click(function (e) {
                e.preventDefault();
                var attachItem = $(this).closest('.attach-item');
                var ind = attachItem.index();
                attachItem.hide().detach();
                docsBase64[attachAreaSelector].splice(ind, 1);
                fileClient.deleteFile(url);
            });

            $('.new-attached').removeClass('new-attached');
        };


    }

    function selectGroupInDropdown(groupId) {
        var groupsLength = userClientGroups.length,
            selectedGroup;
        for (var i = 0; i < groupsLength; i++) {
            if (groupId == userClientGroups[i].id) {
                selectedGroup = userClientGroups[i];
            }
        }
        return selectedGroup;
    }

    function getTiming(messageObjDate) {
        var minute = 60 * 1000,
            hour = minute * 60,
            day = hour * 24,
            threeDays = day * 3,
            now = Date.parse(new Date()),
            timing = (now - messageObjDate * 1000),
            timeTemp;

        if (timing < minute) {
            timing = "только что";
        } else if (timing < hour) {
            timing = new Date(timing);
            //timing = timing.getMinutes()+" мин назад";
            timing = (timing / minute).toFixed(0) + " мин назад";
        } else if (timing < day) {
            timing = new Date(timing);
            //timeTemp = timing.getHours();
            timeTemp = (timing / hour).toFixed(0);

            if (timeTemp == 1 || timeTemp == 0) {
                timing = "1 час назад";
            } else if (timeTemp > 1 && timeTemp < 5) {
                timing = timeTemp + " часа назад";
            } else {
                timing = timeTemp + " часов назад";
            }
        } else if (timing < threeDays) {
            timing = new Date(timing);
            //timeTemp = timing.getDate();
            timeTemp = (timing / day).toFixed(0);
            if (timeTemp == 1) {
                timing = timeTemp + " день назад";
            } else {
                timing = timeTemp + " дня назад";
            }
        } else {
            timeTemp = new Date(messageObjDate * 1000).toLocaleDateString();

            var arr = timeTemp.split(/[./]/);
            if (arr[0].length == 1) arr[0] = "0" + arr[0];
            if (arr[1].length == 1) arr[1] = "0" + arr[1];
            timing = arr[0] + "." + arr[1] + "." + arr[2];
        }

        return timing;
    }

    function getLabel(groupsArray, groupType) {
        var groupsArrayLen = groupsArray.length;
        var label = "";
        for (var i = 0; i < groupsArrayLen; i++) {

            if (groupsArray[i].type == groupType) {
                label = groupsArray[i].visibleName;
            }
        }

        return label;
    }

    function getAuthorName(userInfo) {
        var userInf = userInfo;
        if (!userInfo) {
            userInf = shortUserInfo;
        }

        return userInf.firstName + " " + userInf.lastName;
    }

    function getTagColor(labelName) {
        var color,
            len = userClientGroups.length;

        for (var i = 0; i < len; i++) {
            if (labelName == userClientGroups[i].visibleName) {
                if (i == 0) {
                    color = 'label-pink';
                } else if (i == 1) {
                    color = 'label-success'; // green
                } else if (i == 2) {
                    color = 'label-yellow';
                } else if (i == 3) {
                    color = 'label-purple';
                }
            }
        }
        return color;
    }

    function getTopicRubric(topic) {
        var len = userClientRubrics.length,
            rubric;

        for (var i = 0; i < len; i++) {
            if (userClientRubrics[i].id == topic.rubricId) {
                rubric = userClientRubrics[i];
            }
        }

        return rubric
    };

    function postTopic(obj, isWall, isAdverts, $filter) {
        if (obj.id) {
            // значит редактирование
            if (obj.isPollShow) {
                // с опросом
                if (obj.poll && obj.poll.pollId) {
                    // редактирование опроса
                    obj.poll.subject = obj.pollSubject;
                    obj.poll.names = [];

                    setPoll(obj.poll, obj.pollInputs);

                } else {
                    // создание опроса
                    poll = new com.vmesteonline.be.thrift.messageservice.Poll();
                    poll.pollId = 0;
                    poll.editNames = [];
                    poll.names = [];
                    poll.subject = obj.pollSubject;
                    poll.alreadyPoll = false;

                    setPoll(poll, obj.pollInputs);

                    obj.poll = poll;
                    obj.metaType = "poll";
                }
            } else {
                obj.poll = null;
            }

            obj.message.images = obj.attachedImages;
            obj.message.documents = obj.attachedDocs;
            obj.message.groupId = obj.selectedGroup.id;
            //obj.message.content = withTags(obj.message.content);

            obj.message.content = $filter('linky')(obj.message.content, 'blank');
            obj.message.content = withTags(obj.message.content);

            obj.label = getLabel(userClientGroups, obj.selectedGroup.type);
            obj.tagColor = getTagColor(obj.label);
            obj.selectedRubric.id ? obj.rubricId = obj.selectedRubric.id : obj.rubricId = 0;

            console.log('postTopic-2', obj.rubricId);

            var newTopic = messageClient.postTopic(obj);
        } else {
            // значит создание

            var messageType,
                messageContent,
                subject;
            if (isWall) {
                messageType = 5; // wall
                messageContent = obj.message.content;
                obj.message.content = TEXT_DEFAULT_1;
                subject = "";
            } else {
                if (!isAdverts) {
                    messageType = 1; // talks
                } else {
                    messageType = 6; // adverts
                }
                messageContent = obj.message.content;
                obj.message.content = TEXT_DEFAULT_3;
                subject = obj.subject;

            }
            //console.log(messageContent + " " + messageType + " " + subject);

            newTopic = new com.vmesteonline.be.thrift.messageservice.Topic();
            newTopic.message = new com.vmesteonline.be.thrift.messageservice.Message();
            newTopic.message.groupId = obj.selectedGroup.id;
            newTopic.message.type = messageType;

            messageContent = $filter('linky')(messageContent, 'blank');
            newTopic.message.content = withTags(messageContent);

            newTopic.message.images = obj.attachedImages;
            newTopic.message.documents = obj.attachedDocs;
            newTopic.message.id = 0;
            newTopic.message.created = Date.parse(new Date()) / 1000;

            newTopic.subject = subject;
            newTopic.id = 0;
            newTopic.metaType = "message";
            newTopic.messageNum = 0;

            if (obj.id) {
                // значит редактирование
                newTopic.id = obj.id;
                newTopic.message.id = obj.message.id;
            }

            var poll;
            if (obj.isPollShow) {
                poll = new com.vmesteonline.be.thrift.messageservice.Poll();
                poll.pollId = 0;
                poll.editNames = [];
                poll.names = [];
                poll.subject = obj.pollSubject;
                poll.alreadyPoll = false;

                setPoll(poll, obj.pollInputs);

                newTopic.poll = poll;
                newTopic.metaType = "poll";
            }
            //newTopic.rubricId = obj.selectedRubric.id;
            obj.selectedRubric.id ? newTopic.rubricId = obj.selectedRubric.id : newTopic.rubricId = 0;

            //alert(newTopic.message.content);
            var tempTopic = messageClient.postTopic(newTopic);
            newTopic.id = tempTopic.id;
            newTopic.message.images = tempTopic.message.images;
            newTopic.message.documents = tempTopic.message.documents;
            newTopic.userInfo = tempTopic.userInfo;

            if (obj.isPollShow) {
                newTopic.poll.pollId = tempTopic.poll.pollId;
                obj.isPollShow = false;
                obj.pollSubject = "";
                obj.isPollAvailable = true;
            }
            if (isWall) {
                newTopic.message.createdEdit = getTiming(newTopic.message.created);
            } else {
                newTopic.lastUpdateEdit = getTiming(newTopic.message.created);
            }

        }

        return newTopic;

    }

    function postMessageMy(obj, isWall, isFirstLevel, $filter) {

        if ((obj.id && obj.isEdit) || (obj.message && obj.message.isEdit)) {
            // значит редактирование
            var message;
            if (obj.message && obj.message.isEdit) {
                message = obj.message;
                message.content = obj.commentText;
            } else {
                obj.content = obj.commentText;
                message = obj;
            }

            var attachId;
            if (!obj.id || isFirstLevel) {
                attachId = obj.topicId + "-" + obj.messageId;
            } else {
                attachId = obj.id;
            }

            message.images = getAttachedImages($('#attach-area-edit-' + attachId));
            message.documents = getAttachedDocs($('#attach-doc-area-edit-' + attachId), true);

            if (message.content == "" && message.images.length == 0 && (message.documents === undefined || message.documents.length == 0)) {

                return 0;

            } else {
                try {
                    // try на случай если топик был удален создателем, а юзер пытается
                    // его комментировать

                    message.content = $filter('linky')(message.content, 'blank');
                    message.content = withTags(message.content);

                    var newMessage = messageClient.postMessage(message);
                } catch (e) {
                    document.location.replace('/');
                }

                cleanAttached($('#attach-area-edit-' + attachId));
                cleanAttached($('#attach-doc-area-edit-' + attachId));

                obj.isEdit = false;

                return newMessage;
            }

        } else {
            // значит создание
            var message = new com.vmesteonline.be.thrift.messageservice.Message(),
                attachId, isEmptyText = false;

            if (isWall) {
                message.type = com.vmesteonline.be.thrift.messageservice.MessageType.WALL;//5;
                attachId = message.topicId = obj.topic.id;
                message.groupId = obj.groupId;
                message.content = obj.commentText;
                message.parentId = 0;
                isEmptyText = (obj.commentText == TEXT_DEFAULT_2 || obj.commentText == "");
            } else {
                message.type = com.vmesteonline.be.thrift.messageservice.MessageType.BASE;//1;
                attachId = message.topicId = obj.topicId;
                message.groupId = obj.selectedGroup.id;

                if (isFirstLevel) {
                    //message.content = obj.answerFirstMessage;
                    message.content = obj.commentText;
                    message.parentId = 0;
                } else {
                    message.content = obj.commentText;
                    message.parentId = obj.parentId;
                    attachId = attachId + "-" + obj.messageId;
                }

                isEmptyText = (message.content == TEXT_DEFAULT_2 || message.content == "" || message.content === undefined);
            }

            message.id = 0;
            message.images = getAttachedImages($('#attach-area-' + attachId));

            message.documents = getAttachedDocs($('#attach-doc-area-' + attachId));
            for (var p in message.documents[0]) {
                alert(p + " " + message.documents[0][p]);
            }
            cleanAttached($('#attach-area-' + attachId));
            cleanAttached($('#attach-doc-area-' + attachId));
            //message.images = obj.attachedImages;
            message.created = Date.parse(new Date) / 1000;

            if (isEmptyText && message.images.length == 0 && (message.documents === undefined || message.documents.length == 0)) {

                return 0;

            } else {
                if (message.content == TEXT_DEFAULT_2 && (message.images.length != 0 || message.documents.length != 0)) {
                    message.content = "";
                }

                message.content = $filter('linky')(message.content, 'blank');
                message.content = withTags(message.content);

                try {
                    newMessage = messageClient.postMessage(message);
                } catch (e) {
                    document.location.replace('/');
                }

                obj.commentText = TEXT_DEFAULT_2;
                message.createdEdit = getTiming(newMessage.created);
                console.log(newMessage.created);
                message.authorName = getAuthorName();
                message.userInfo = newMessage.userInfo;
                message.images = newMessage.images;
                message.documents = newMessage.documents;
                message.id = newMessage.id;

                return message;
            }
        }
    }

    function setPollEditNames(poll) {
        // obj.wallItems[i].topic
        poll.editNames = [];
        var namesLength,
            amount = 0,
            votersNum = 0,
            votersPercent = 0;
        poll.names ?
            namesLength = poll.names.length :
            namesLength = 0;
        //console.log(poll.alreadyPoll);

        // нужно знать полный amount для вычисления процентной длины
        for (var j = 0; j < namesLength; j++) {
            if (poll && poll.values && poll.values[j]) {
                amount += poll.values[j];
            }
        }

        for (var j = 0; j < namesLength; j++) {
            if (poll && poll.values && poll.values[j]) {
                votersNum = poll.values[j];
                votersPercent = votersNum * 100 / amount;
            } else {
                votersNum = votersPercent = 0;
            }

            poll.editNames[j] = {
                id: j,
                value: 0,
                name: poll.names[j],
                votersNum: votersNum,
                votersPercent: votersPercent.toFixed(1) + "%"
            };

        }
        poll.amount = amount;
    }

    function setPoll(poll, pollInputs) {
        var counterForPoll = 0,
            pollInputsLength = pollInputs.length;

        for (var i = 0; i < pollInputsLength; i++) {
            if (pollInputs[i].name != "") {
                poll.names[counterForPoll] = pollInputs[i].name;
                poll.editNames[counterForPoll] = {
                    id: counterForPoll++,
                    name: pollInputs[i].name
                };
            }
        }

    }

    function getAttachedImages(selector) {
        var imgList = [], ind = 0;

        selector.find('.attach-item').each(function () {
            //значит картинка
            var bgImg = $(this).find('img').css('background-image'),
                name = $(this).find('img').attr('data-title'),
                type = $(this).find('img').attr('data-type'),
                result, content;

            var i = bgImg.indexOf('base64,');
            content = bgImg.slice(4, bgImg.length - 1);

            result = new com.vmesteonline.be.thrift.messageservice.Attach();
            result.fileName = name;
            result.contentType = type;

            var indexFile = content.indexOf('/file');
            content = content.substring(indexFile);

            result.URL = content;
            //console.log(content);
            //result = 'obj(name:'+ base64encode(name) +';data:'+ type +';content:'+content+")";

            imgList[ind++] = result;

        });

        return imgList;
    }

    function getAttachedDocs(selector, isEdit) {
        if (isEdit) {
            var docList = [], ind = 0;
            docsBase64[selector] = [];

            selector.find('.attach-item').each(function () {
                docsBase64[selector][ind] = new com.vmesteonline.be.thrift.messageservice.Attach();
                docsBase64[selector][ind].fileName = $(this).find('span').text();
                docsBase64[selector][ind].contentType = $(this).attr('data-type');
                docsBase64[selector][ind].URL = $(this).attr('data-href');

                ind++;
            });
        }

        return docsBase64[selector];


    }

    function cleanAttached(selector) {
        //selector.html('').append('<div class="loading hidden"><img src="i/loading2.gif"></div>');
        selector.find('.attach-item').detach();
        //docsBase64 = [];
        docsInd[selector] = 0;
        docsBase64[selector] = [];
    }

    function initFancyBox(selector) {
        selector.find(".fancybox").fancybox({
            'transitionIn': 'elastic',
            'transitionOut': 'elastic',
            'speedIn': 600,
            'speedOut': 200,
            'overlayShow': false
        });
    }

    function clone(obj) {
        if (obj == null || typeof(obj) != 'object')
            return obj;
        var temp = new obj.constructor();
        for (var key in obj)
            temp[key] = clone(obj[key]);
        return temp;
    }

    function base64encode(str) {
        // Символы для base64-преобразования
        var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg' +
            'hijklmnopqrstuvwxyz0123456789+/=';
        var b64encoded = '';
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;

        for (var i = 0; i < str.length;) {
            chr1 = str.charCodeAt(i++);
            chr2 = str.charCodeAt(i++);
            chr3 = str.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);

            enc3 = isNaN(chr2) ? 64 : (((chr2 & 15) << 2) | (chr3 >> 6));
            enc4 = isNaN(chr3) ? 64 : (chr3 & 63);

            b64encoded += b64chars.charAt(enc1) + b64chars.charAt(enc2) +
                b64chars.charAt(enc3) + b64chars.charAt(enc4);
        }
        return b64encoded;
    }

    $.widget("custom.catcomplete", $.ui.autocomplete, {
        _renderMenu: function (ul, items) {
            var that = this,
                currentCategory = "";
            $.each(items, function (index, item) {
                if (item.category != currentCategory) {
                    ul.append("<li class='ui-autocomplete-category'>" + item.category + "</li>");
                    currentCategory = item.category;
                }
                that._renderItemData(ul, item);
            });
        }
    });

    bootbox.setDefaults({locale: "ru"});

    return "123";

}
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\config.js":[function(require,module,exports){
'use strict';

var config = function($stateProvider, $urlRouterProvider,$locationProvider) {

    $urlRouterProvider.otherwise("/main");

    $stateProvider
        .state('main', {
            url: "/main",
            templateUrl: "/static/partials/main.html",
            controller: 'wallCtrl as lenta'
        })
        .state('wall-single', {
            url: "/wall-single/:topicId",
            templateUrl: "/static/partials/wall-single.html",
            controller: 'wallSingleCtrl as wallSingle'
        })
        .state('talks', {
            url: "/talks",
            templateUrl: "/static/partials/talks.html",
            controller: 'talksCtrl as talks'
        })
        .state('talks-single', {
            url: "/talks-single/:talkId",
            templateUrl: "/static/partials/talks-single.html",
            controller: 'talksSingleCtrl as talks'
        })
        .state('profit', {
            url: "/profit",
            templateUrl: "/static/partials/profit.html",
            controller: 'advertsCtrl as adverts'
        })
        .state('profit-single', {
            url: "/profit-single/:advertId",
            templateUrl: "/static/partials/profit-single.html",
            controller: 'advertsSingleCtrl as adverts'
        })
        .state('dialogs', {
            url: "/dialogs",
            templateUrl: "/static/partials/dialogs.html",
            controller: 'dialogsCtrl as dialogs'
        })
        .state('dialog-single', {
            url: "/dialog-single/:dialogId",
            templateUrl: "/static/partials/dialog-single.html",
            controller: 'dialogCtrl as dialog'
        })
        .state('neighbours', {
            url: "/neighbours",
            templateUrl: "/static/partials/neighbours.html",
            controller: 'neighboursCtrl as neighbours'
        })
        .state('profile', {
            url: "/profile/:userId",
            templateUrl: "/static/partials/profile.html",
            controller: 'profileCtrl as profile'
        })
        .state('profile.change-avatar', {
            url: "/change-avatar",
            templateUrl: "/static/partials/profile.changeAvatar.html",
            controller: 'changeAvatarCtrl as changeAvatar'
        })
        .state('settings', {
            url: "/settings",
            templateUrl: "/static/partials/settings.html",
            controller: 'settingsCtrl as settings'
        })
        .state('maps', {
            url: "/maps",
            templateUrl: "/static/partials/maps.html",
            controller: 'mapsCtrl as maps'
        })
        .state('set-info', {
            url: "/set-info",
            templateUrl: "/static/partials/set-info.html",
            controller: 'setInfoCtrl as setInfo'
        })
        .state('counters', {
            url: "/counters",
            templateUrl: "/static/partials/counters.html",
            controller: 'countersCtrl as counters'
        })
        .state('counters-history', {
            url: "/counters-history/:counterId",
            templateUrl: "/static/partials/counters-history.html",
            controller: 'countersHistoryCtrl as countersHistory'
        })
        .state('important', {
            url: "/important",
            templateUrl: "/static/partials/important.html",
            controller: 'importantCtrl as important'
        })
        .state('nearby', {
            url: "/nearby",
            templateUrl: "/static/partials/nearby.html",
            controller: 'nearbyCtrl as nearby'
        })
        .state('nearby-single', {
            url: "/nearby-single/:nearbyId",
            templateUrl: "/static/partials/nearby-single.html",
            controller: 'nearbySingleCtrl as nearby'
        })
        .state('rubrics', {
            url: "/rubrics/:rubricId",
            templateUrl: "/static/partials/rubrics.html",
            controller: 'rubricsCtrl as talks'
        })
        .state('rubrics-single', {
            url: "/rubric-single/:rubricId",
            templateUrl: "/static/partials/rubrics-single.html",
            controller: 'rubricsSingleCtrl as talks'
        })
        .state('blog', {
            url: "/blog"
        })
        .state('about', {
            url: "/about"
        })
        .state('contacts', {
            url: "/contacts"
        })
        .state('cabinet', {
            url: "/cabinet",
            templateUrl: "/static/partials/business/cabinet.html",
            controller: 'cabinetCtrl as nearby'
        })
        .state('edit', {
            url: "/edit",
            templateUrl: "/static/partials/business/edit.html",
            controller: 'editCtrl as edit'
        })
        .state('statistic', {
            url: "/statistic",
            templateUrl: "/static/partials/business/statistic.html",
            controller: 'statisticCtrl as maps'
        });

    $locationProvider.html5Mode(true);
};

module.exports = [ '$stateProvider','$urlRouterProvider','$locationProvider', config ];

/*main.config(function($locationProvider){
    $locationProvider.html5Mode(true);
});*/

},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\about.js":[function(require,module,exports){
'use strict';

var aboutCtrl = function($rootScope) {

    $rootScope.base.isFooterBottom = true;

    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', aboutCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\adverts.js":[function(require,module,exports){

var advertsCtrl = function($rootScope) {
        var adverts = this;

        adverts.attachId = "00000";
        $rootScope.setTab(3);
        $rootScope.base.showAllGroups();
        $rootScope.base.isFooterBottom = false;
        showGroupOverBuilding($rootScope.groups);

        /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

        /*initAttachImage($('#attachImage-00000'), $('#attach-area-00000')); // для обсуждений
        initAttachDoc($('#attachDoc-00000'), $('#attach-doc-area-00000')); // для обсуждений*/
        initFancyBox($('.adverts'));

        $rootScope.base.createTopicIsHide = true;
        adverts.isAdvertsLoaded = false;
        adverts.groups = userClientGroups;

        adverts.isTalk = true;
        adverts.isAdvert = true;

        adverts.message = {};
        adverts.message.content = adverts.message.default = TEXT_DEFAULT_3;
        adverts.subject = TEXT_DEFAULT_4;

        $rootScope.base.bufferSelectedGroup = adverts.selectedGroup =
        $rootScope.currentGroup = userClientGroups[3];

        $rootScope.currentRubric = null;

        $rootScope.base.initStartParamsForCreateTopic(adverts);

        adverts.answerFirstMessage = TEXT_DEFAULT_2;

        adverts.topics = messageClient.getAdverts(adverts.selectedGroup.id, 0, 1000).topics;

        initAdverts();

        if (!adverts.topics) adverts.topics = [];

        $rootScope.selectGroupInDropdown_adverts = function(groupId){
            adverts.selectedGroup = $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
        };

        function initAdverts(){
            var topicLength;
            adverts.topics ? topicLength = adverts.topics.length : topicLength = 0;

            for(var i = 0; i < topicLength;i++){
                adverts.topics[i].lastUpdateEdit = getTiming(adverts.topics[i].lastUpdate);
                adverts.topics[i].label = getLabel(adverts.groups,adverts.topics[i].groupType);
                adverts.topics[i].tagColor = getTagColor(adverts.topics[i].label);
            }
        }

        $rootScope.advertsChangeGroup = function(groupId){

            adverts.topics = messageClient.getAdverts(groupId,0,1000).topics;

            if(adverts.topics) {
                initAdverts();
            }

        };

        $rootScope.selectGroup(getBuildingGroup($rootScope.currentGroup));

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope', advertsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\advertsSingle.js":[function(require,module,exports){

var advertsSingleCtrl = function($rootScope,$stateParams) {
        var advert = this,
            fullTalkMessagesLength,
            advertId = $stateParams.advertId;

        $rootScope.base.isFooterBottom = false;

        $rootScope.base.lastLoadedId = 0;
        $rootScope.base.isEarliestMessages = false;
        $rootScope.base.endOfLoaded = false;

        /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

        advert.attachId = "00000";
        advert.selectedGroup = $rootScope.currentGroup;
        advert.topics = messageClient.getAdverts(advert.selectedGroup.id, 0, 1000).topics;
        advert.fullTalkTopic = {};
        advert.fullTalkMessages = {};
        advert.fullTalkFirstMessages = [];
        advert.groups = userClientGroups;

        advert.isTalk = true;

        $rootScope.base.initStartParamsForCreateMessage(advert);

        var showFullTalk = function(advert,advertOutsideId){

            initFancyBox($('.adverts-single'));
            var topicLength;
            advert.topics ? topicLength = advert.topics.length : topicLength = 0;

            var advertId = advertOutsideId,
                fullTalkFirstMessagesLength;
            for(var i = 0; i < topicLength; i++){
                if(advertId == advert.topics[i].id){
                    advert.fullTalkTopic = advert.topics[i];

                    $rootScope.base.initStartParamsForCreateTopic(advert.fullTalkTopic);

                    advert.fullTalkTopic.isTalk = true;
                    advert.fullTalkTopic.isAdvert = true;
                    advert.fullTalkTopic.message.createdEdit = getTiming(advert.fullTalkTopic.message.created);
                    advert.fullTalkTopic.label = getLabel(advert.groups,advert.fullTalkTopic.groupType);
                    advert.fullTalkTopic.tagColor = getTagColor(advert.fullTalkTopic.label);

                }
            }
            if(advert.fullTalkTopic.poll != null){
                setPollEditNames(advert.fullTalkTopic.poll);
                advert.fullTalkTopic.metaType = "poll";
            }else{
                advert.fullTalkTopic.metaType = "message";
            }

            advert.fullTalkFirstMessages = messageClient.getFirstLevelMessages(advertId,advert.selectedGroup.id,6,$rootScope.base.lastLoadedId,0,10).messages;

            $rootScope.base.lastLoadedId = $rootScope.base.initFirstMessages(advert.fullTalkFirstMessages);

            $rootScope.base.isAdvertTitles = false;
            $rootScope.base.mainContentTopIsHide = true;
            $rootScope.base.createTopicIsHide = true;

            $rootScope.base.advert = advert;

        };

        showFullTalk(advert,advertId);

        var initFlagsTopic = [];
        advert.showTopicAnswerInput = function(event,fullTalkTopic){
            event.preventDefault();

            advert.answerShow = true;

            if(!initFlagsTopic[fullTalkTopic.id]) {
               // initAttachImage($('#attachImage-' + fullTalkTopic.id), $('#attach-area-' + fullTalkTopic.id));
                //initAttachDoc($('#attachDoc-' + fullTalkTopic.id), $('#attach-doc-area-' + fullTalkTopic.id));
                initFlagsTopic[fullTalkTopic.id] = true;
            }

            advert.fullTalkTopic.answerInputIsShow ?
                advert.fullTalkTopic.answerInputIsShow = false :
                advert.fullTalkTopic.answerInputIsShow = true ;
        };

        var initFlagsMessage = [];
        advert.showMessageAnswerInput = function(event,fullTalkTopic,firstMessage,message){
            event.preventDefault();
            var attachId;

            if(!message){
                // если это сообщение первого уровня
                attachId = fullTalkTopic.id+'-'+firstMessage.id;

                firstMessage.isTalk = true;

                if(!advert.fulladvertFirstMessages) advert.fulladvertFirstMessages = messageClient.getFirstLevelMessages(advertId,advert.selectedGroup.id,6,0,0,1000).messages;
                var fulladvertFirstMessagesLength = advert.fulladvertFirstMessages.length;

                $rootScope.base.initStartParamsForCreateMessage(firstMessage);

                firstMessage.answerInputIsShow ?
                    firstMessage.answerInputIsShow = false :
                    firstMessage.answerInputIsShow = true;


            }else{
                // если простое сообщение
                attachId = fullTalkTopic.id+'-'+message.id;

                message.isTalk = true;

                if(!advert.fullTalkMessages[firstMessage.id]) advert.fullTalkMessages[firstMessage.id] = messageClient.getMessages(advertId,advert.selectedGroup.id,6,firstMessage.id,0,1000).messages;
                var  fullTalkMessagesLength = advert.fullTalkMessages[firstMessage.id].length;

                $rootScope.base.initStartParamsForCreateMessage(message);

                message.answerInputIsShow ?
                    message.answerInputIsShow = false :
                    message.answerInputIsShow = true;


            }

            if(!initFlagsMessage[attachId]) {
                //initAttachImage($('#attachImage-' + attachId), $('#attach-area-' + attachId));
                //initAttachDoc($('#attachDoc-' + attachId), $('#attach-doc-area-' + attachId));

                initFlagsMessage[attachId] = true;
            }
        };

        advert.toggleTreeFirstMessage = function(event,firstMessage){
            event.preventDefault();

            firstMessage.isTreeOpen ?
                firstMessage.isTreeOpen = false :
                firstMessage.isTreeOpen = true ;


            // --------

            advert.fullTalkMessages[firstMessage.id] = messageClient.getMessages(advertId,advert.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            advert.fullTalkMessages[firstMessage.id] ?
                fullTalkMessagesLength = advert.fullTalkMessages[firstMessage.id].length:
                fullTalkMessagesLength = 0;
            if(advert.fullTalkMessages[firstMessage.id] === null) advert.fullTalkMessages[firstMessage.id] = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                advert.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                advert.fullTalkMessages[firstMessage.id][i].isTreeOpen = true;
                advert.fullTalkMessages[firstMessage.id][i].isOpen = true;
                advert.fullTalkMessages[firstMessage.id][i].isParentOpen = true;
                advert.fullTalkMessages[firstMessage.id][i].createdEdit = getTiming(advert.fullTalkMessages[firstMessage.id][i].created);
                advert.fullTalkMessages[firstMessage.id][i].answerMessage = TEXT_DEFAULT_2;

            }

        };

        advert.toggleTree = function(event,message,firstMessage){
            event.preventDefault();

            if(!advert.fullTalkMessages[firstMessage.id]) advert.fullTalkMessages[firstMessage.id] = messageClient.getMessages(advertId,advert.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            var fullTalkMessagesLength = advert.fullTalkMessages[firstMessage.id].length;

            message.isTreeOpen ?
                message.isTreeOpen = false :
                message.isTreeOpen = true ;

            var afterCurrentIndex = false,
                nextMessageOnCurrentLevel = false,
                loopMessageOffset,
                parentOpenStatus,
                areAllMyParentsTreeOpen = [],
                checkAreAllMyParentsTreeOpen = true,
                beginOffset = message.offset,
                parentOpenStatusArray = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                loopMessageOffset = advert.fullTalkMessages[firstMessage.id][i].offset;

                if(afterCurrentIndex && !nextMessageOnCurrentLevel
                    && message.offset < loopMessageOffset){

                    areAllMyParentsTreeOpen[loopMessageOffset] = true;

                    if(loopMessageOffset - message.offset == 1){
                        //если это непосредственный потомок

                        advert.fullTalkMessages[firstMessage.id][i].isOpen ?
                            advert.fullTalkMessages[firstMessage.id][i].isOpen = false :
                            advert.fullTalkMessages[firstMessage.id][i].isOpen = true ;

                        parentOpenStatusArray[loopMessageOffset] = true;
                        parentOpenStatus = advert.fullTalkMessages[firstMessage.id][i].isOpen;

                        if (!advert.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }
                    }else{
                        // если это птомки потомка

                        checkAreAllMyParentsTreeOpen = true;
                        for(var j = beginOffset; j < loopMessageOffset; j++){
                            // проверяем нет ли у кого в предках isTreeOpen = false
                            if(areAllMyParentsTreeOpen[j] == false){
                                checkAreAllMyParentsTreeOpen = false;
                            }
                        }
                        parentOpenStatus && checkAreAllMyParentsTreeOpen ?
                            advert.fullTalkMessages[firstMessage.id][i].isOpen = true :
                            advert.fullTalkMessages[firstMessage.id][i].isOpen = false ;

                        if (!advert.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            // если у кого-то из предков не открыто дерево
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }

                        parentOpenStatusArray[loopMessageOffset] = true;
                    }
                }

                if (afterCurrentIndex && loopMessageOffset == message.offset){
                    nextMessageOnCurrentLevel = true;
                    break;
                }
                if(message.id == advert.fullTalkMessages[firstMessage.id][i].id){
                    afterCurrentIndex = true;
                }
            }
        };

        var buff,lastLoadedIdFF;
        advert.addMoreItems = function(){
            var temp = messageClient.getFirstLevelMessages(advertId,advert.selectedGroup.id,1,$rootScope.base.lastLoadedId,0,10),
                buff = temp.messages;
            if(buff) {
                var buffLength = buff.length;

                if(buffLength != 0) {

                    $rootScope.base.lastLoadedId = buff[buffLength - 1].id;

                    if(lastLoadedIdFF != $rootScope.base.lastLoadedId) {
                        $rootScope.base.initFirstMessages(buff);
                        advert.fullTalkFirstMessages = advert.fullTalkFirstMessages.concat(buff);
                    }

                    lastLoadedIdFF = $rootScope.base.lastLoadedId;

                }
            }else{
                $rootScope.base.endOfLoaded = true;
            }

        };

        $('.ng-cloak').removeClass('ng-cloak');
    }

module.exports = [ '$rootScope','$stateParams', advertsSingleCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\base.js":[function(require,module,exports){
//var forumControllers = angular.module('forum.controllers', ['ui.select2','infinite-scroll','ngSanitize','yaMap','ui.bootstrap']);

var baseCtrl = function($scope,$rootScope,$state,$filter,$location) {
    console.log('base');

    $rootScope.IS_BUSINESS = localStorage.getItem('VO_is_business');
    //$rootScope.IS_BUSINESS = 1;
    //localStorage.removeItem('VO_is_business');

        var base = this;
        base.url = $location.url();
        $scope.$on('$locationChangeSuccess', function($event,newState,oldState){
            console.log('change');
            if (newState.indexOf('blog') == -1 && newState.indexOf('about') == -1 && newState.indexOf('contacts') == -1) {
                var isLogin = authClient.checkIfAuthorized();
                if(!isLogin) document.location.replace('/login');

                if(!userClientGroups) userClientGroups = userClient.getUserGroups();
                if(!shortUserInfo) shortUserInfo = userClient.getShortUserInfo();
                if(!hasStart) start();
                base.url = $location.url();
            }
        });

    if(base.url != '/blog' && base.url != '/about' && base.url != '/contacts') {
        if(!hasStart) start();
    }
    var hasStart = false;

    function start(){
        console.log('1',shortUserInfo);
        hasStart = true;
        $rootScope.isTopSearchShow = true;
        base.neighboursLoadStatus = "";
        base.privateMessagesLoadStatus = "";
        base.profileLoadStatus = "";
        base.settingsLoadStatus = "";
        base.mapsLoadStatus = "";

        base.mainContentTopIsHide = false;
        base.createTopicIsHide = true;
        base.me = shortUserInfo;

        base.isFooterBottom = false;

        base.isTalkTitles = true;

        resetPages(base);
        base.lentaIsActive = true;
        base.emptyMessage = "Сообщений пока нет";

        base.textareaBlur = function (message, defaultText, ctrl, isTopic) {
            if (isTopic) {
                if (message == "") ctrl.message.content = defaultText;
            } else {
                if (message == "") ctrl.commentText = defaultText;
            }
            base.isLentaFocus = false;
        };

        base.textareaFocus = function (message, defaultText, ctrl, isTopic) {
            if (isTopic) {
                if (message == defaultText) ctrl.message.content = "";
            } else {
                if (message == defaultText) ctrl.commentText = "";
            }

        };

        base.addPollInput = function (event, obj, isFocus) {
            event.preventDefault();

            var newInput = {counter: 0, name: "" };
            obj.pollInputs.push(newInput);

            if (isFocus) {
                setTimeout(setNewFocus, 200, $(event.target));
            }

        };

        function setNewFocus(el) {
            el.prev().find('input').focus();
        }

        base.showPoll = function (event, obj) {
            event.preventDefault();

            obj.isPollShow = true;
            obj.pollSubject = "";
            obj.poll = null;

            obj.pollInputs = [
                {
                    counter: 0,
                    name: ""
                },
                {
                    counter: 1,
                    name: ""
                }
            ];
            obj.isPollAvailable = false;
        };

        base.doPoll = function (event, poll) {
            event.preventDefault();
            poll.values = [];
            var pollNamesLength = poll.editNames.length;
            var item;

            for (var i = 0; i < pollNamesLength; i++) {
                if (poll.editNames[i].value == 1) {
                    item = i;
                    break;
                }
            }

            var tempPoll = messageClient.doPoll(poll.pollId, item);
            poll.alreadyPoll = true;
            poll.values = tempPoll.values;

            setPollEditNames(poll);

        };

        base.oldTextLength = 0;
        base.messageChange = function (event) {

            var el = event.target,
                clientHeight = el.clientHeight,
                scrollHeight = el.scrollHeight,
                textLength = el.textLength,
                clientWidth = el.clientWidth,
                textLengthPX, newHeight, removeRowCount,
                defaultHeight, newRowCount;

            defaultHeight = TEXTAREA_DEFAULT_HEIGHT;

            /*
             Исходные данные:
             На один символ приходится ~8px в ширину
             Высота строки текста ~14px

             * Здесь выполняем такие действия :
             * 1) Считаем длину текста в пикселях
             * 2) Определяем целое количестов строк, которые удалили
             * 3) Определям новую высоту с учетом высоты удаленного текста
             * */

            //console.log("0 "+scrollHeight+" "+clientHeight);
            if (scrollHeight > clientHeight) {

                el.style.height = scrollHeight + 'px';
            } else if (scrollHeight > defaultHeight) {
                textLengthPX = (parseInt(base.oldTextLength) - textLength) * 8; // 1
                //console.log("2 "+textLengthPX+" "+clientWidth+" "+textLength);
                if (textLengthPX > clientWidth) {
                    // console.log("3 "+textLengthPX+" "+clientWidth);
                    removeRowCount = Math.floor(textLengthPX / clientWidth); // 2
                    newHeight = parseInt(event.target.style.height) - removeRowCount * 14; // 3
                    newHeight > defaultHeight ? event.target.style.height = newHeight + "px" :
                        event.target.style.height = defaultHeight + 'px';

                } else {
                    el.style.height = scrollHeight - 6 + 'px';

                    //console.log("5 "+textLength+" "+textLength*8/clientWidth);
                }
            } else {
                //console.log('4');
                el.style.height = defaultHeight + 'px';
            }
            base.oldTextLength = textLength;
        };

        base.getTextareaHeight = function (textLength, clientWidth, isTopic) {
            /*if(isTopic){
             var k1 = 10,
             k2 = 19;
             }else{*/
            var k1 = 12,
                k2 = 14;
            //}

            var stringLen = textLength * k1;
            if (stringLen > clientWidth) {
                var rowCount = parseInt(stringLen / clientWidth); // сколько строк
                var areaHeight = rowCount * k2;
            } else {
                areaHeight = TEXTAREA_DEFAULT_HEIGHT;
            }

            return areaHeight;
        };

        base.initFirstMessages = function (firstMessages) {
            var fullTalkFirstMessagesLength,
                lastLoadedId;

            firstMessages ?
                fullTalkFirstMessagesLength = firstMessages.length :
                fullTalkFirstMessagesLength = 0;

            if (fullTalkFirstMessagesLength != 0) lastLoadedId = firstMessages[fullTalkFirstMessagesLength - 1].id;

            if (firstMessages === null) firstMessages = [];

            for (var i = 0; i < fullTalkFirstMessagesLength; i++) {
                firstMessages[i].answerInputIsShow = false;
                firstMessages[i].isTreeOpen = false;
                firstMessages[i].isLoaded = false;
                firstMessages[i].answerMessage = TEXT_DEFAULT_2;
                firstMessages[i].createdEdit = getTiming(firstMessages[i].created);

            }

            return lastLoadedId;
        };

        base.deleteMessage = function (message, messagesArray, isTopic, isWall, isDialog) {

            if (isTopic && !isWall || message.isWallSingle) {
                // если talk-single или profit-single

                bootbox.confirm("Вы уверены, что хотите удалить эту тему?", function (result) {
                    if (result) {

                        try {
                            var deleteResult = messageClient.deleteTopic(message.id);
                            message.message.content = deleteResult.message.content;
                        } catch (e) {
                            // вернул null, значит потомков нет
                        }

                        if (message.message.type == 1) {
                            $state.go('talks');
                        } else if (message.message.type == 6) {
                            $state.go('profit');
                        } else if (message.message.type == 5) {
                            $state.go('main');
                        }

                    }
                });
            } else if (isTopic) {
                try {
                    var deleteResult = messageClient.deleteTopic(message.id);
                    message.message.content = deleteResult.message.content;
                } catch (e) {
                    // вернул null, значит удаление произошло чисто
                    var messagesArrayLength = messagesArray.length;

                    for (var i = 0; i < messagesArrayLength; i++) {

                        var currentId;
                        isWall ? currentId = messagesArray[i].topic.id :
                            currentId = messagesArray[i].id;

                        if (currentId == message.id) {
                            messagesArray.splice(i, 1);
                            break;
                        }
                    }
                }
            } else {
                if (isDialog) {
                    dialogClient.deleteDialogMessage(message.id);

                    messagesArrayLength = messagesArray.length;
                    for (var i = 0; i < messagesArrayLength; i++) {
                        if (messagesArray[i].id == message.id) {
                            messagesArray.splice(i, 1);
                            break;
                        }
                    }

                } else {
                    try {
                        deleteResult = messageClient.deleteMessage(message.id);
                        message.content = deleteResult.content;
                    }
                    catch (e) {
                        messagesArrayLength = messagesArray.length;
                        for (var i = 0; i < messagesArrayLength; i++) {
                            if (messagesArray[i].id == message.id) {
                                messagesArray.splice(i, 1);
                                break;
                            }
                        }
                    }
                }

            }
        };

        base.setEdit = function (event, message, isNeedAnswerShow) {
            if(!message.rubric) {
                //message.selRubricName = "Общее";
                message.rubric = {};
                message.rubric.visibleName = "Общее";
                message.rubric.id = 0;
            }

            //$rootScope.currentRubric = message.rubric;

            console.log('setEdit',$rootScope.currentRubric);
            var isTopic;
            (message.message) ? isTopic = true : isTopic = false;

            if (message.isEdit) {
                message.isEdit = false;

                if (isTopic) {
                    message.message.content = $filter('linky')(message.message.content, 'blank');
                    message.message.content = withTags(message.message.content);
                } else {
                    message.content = $filter('linky')(message.commentText, 'blank');
                    message.content = withTags(message.content);
                }

            } else {

                if (isTopic) {
                    message.message.content = withoutTags(message.message.content);
                } else {
                    message.commentText = withoutTags(message.content);
                }

                var el = event.target;

                var h0 = $(el).closest('.text-container').find('.text:eq(0)').height(),
                    h1 = $(el).closest('.text-container').find('.text:eq(1)').height(),
                    h;

                (h0 > h1) ? h = h0 + 24 : h = h1;

                message.isEdit = true;

                if (message.answerInputIsShow) message.answerInputIsShow = false;

                if (isTopic) {
                    var textLen = message.message.content.length;
                } else {
                    textLen = message.content.length;
                }

                /*if(textLen > base.contentLength){
                 h = (textLen/base.contentLength).toFixed(0)*(h-24);
                 }*/

                if (h < TEXTAREA_DEFAULT_HEIGHT) h = TEXTAREA_DEFAULT_HEIGHT;

                $(el).closest('.text-container').find('.edit-message textarea').height(h + 'px');
            }

            if (isNeedAnswerShow) {
                message.answerShow = true;
                message.commentText = message.content;
                message.isTalk = true;
            }

            if (message.isEdit) {
                // здесь рассматривается ситуация когда мы возвращаемся из редактирования,
                // но выше мы уже переключиди флаг, поэтому пишу message.isEdit, а не !message.isEdit
                if (isTopic) {
                    message.message.content = withoutTags(message.message.content);
                } else {
                    message.commentText = withoutTags(message.content);
                }
            }

        };

        base.pageTitle = "Новости";

        base.user = shortUserInfo;

        base.bufferSelectedGroup = userClientGroups[3];

        base.markImportant = function (event, message) {
            event.preventDefault();
            var isImportant;

            if (message.important == 3 || message.important == 2) {
                message.important = 1;
                isImportant = true;
                message.importantText = 'Снять метку "Важное"';
            } else {
                message.important = 3;
                isImportant = false;
                message.importantText = 'Пометить как "Важное"';
            }

            messageClient.markMessageImportant(message.id, isImportant);
        };

        base.markLike = function (event, message) {
            event.preventDefault();
            var isLike;

            if (message.like == 1) {

                $('#like-help-' + message.id).fadeIn(200);

                setTimeout(hideLikeHelp, 2000, message.id);

            }

            message.like = 1;
            messageClient.markMessageLike(message.id);
        };

        base.initStartParamsForCreateTopic = function (ctrl) {
            ctrl.selectedGroup = $rootScope.base.bufferSelectedGroup = $rootScope.currentGroup;
            
            ctrl.isEdit = false;
            ctrl.isCreateMessageError = false;
            ctrl.isPollAvailable = true;

            if (ctrl.id) {
                // если редактирование
                if (ctrl.poll && ctrl.poll.pollId) {
                    ctrl.isPollShow = true;

                    ctrl.pollSubject = ctrl.poll.subject;
                    var namesLength = ctrl.poll.names.length;
                    ctrl.pollInputs = [];
                    for (var i = 0; i < namesLength; i++) {
                        ctrl.pollInputs[i] = {};
                        ctrl.pollInputs[i].counter = i;
                        ctrl.pollInputs[i].name = ctrl.poll.names[i];
                    }
                    ctrl.isPollAvailable = false;
                }
            } else {
                // если создание


                ctrl.isPollShow = false;
                ctrl.pollSubject = "";
                ctrl.pollInputs = [
                    {
                        counter: 0,
                        name: ""
                    },
                    {
                        counter: 1,
                        name: ""
                    }
                ];
                ctrl.attachedImages = [];
            }

        }

        var hideLikeHelp = function (messageId) {
            $('#like-help-' + messageId).fadeOut(200);
        };

        base.showAllGroups = function () {
            var groupsLength = $rootScope.groups.length;
            for (var i = 0; i < groupsLength; i++) {
                $rootScope.groups[i].isShow = true;
                $rootScope.groups[i].selected = false;
            }
            $rootScope.groups[0].selected = true;
            $rootScope.base.bufferSelectedGroup = $rootScope.groups[0];
        };

        base.groups = userClientGroups;
        base.rubrics = userClientRubrics;

        base.goToDialog = function (userId) {
            var users = [];
            users[0] = userId;
            var dialog = dialogClient.getDialog(users, 0);

            $state.go('dialog-single', { 'dialogId': dialog.id});
        };

        base.selectGroupInDropdown = function (groupId, ctrl) {
            $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);

            //if(!ctrl.isEdit){
            ctrl.selectedGroup = $rootScope.base.bufferSelectedGroup;
            //}
        };

        base.removeAttach = function (message, index, isImage) {
            isImage ?
                message.images.splice(index, 1) :
                message.documents.splice(index, 1);
        };

        $rootScope.initCreateTopic = function (ctrl) {

            if (ctrl.id) {
                // значит редактирование

                setTimeout(pollAttach, 200, ctrl.id, true); // ждем пока загрузится

            } else {
                // значит создание

                setTimeout(pollAttach, 200, ctrl.attachId, false);

            }

        };

        $rootScope.initCreateMessage = function (ctrlId, isEdit) {

            if (isEdit) {

                setTimeout(pollAttach, 200, ctrlId, true);

            } else {

                setTimeout(pollAttach, 200, ctrlId, false);

            }

        };

        function pollAttach(ctrlId, isEdit) {

            if (isEdit) {
                if ($('#attachImage-edit-' + ctrlId).length) {
                    initAttachImage($('#attachImage-edit-' + ctrlId), $('#attach-area-edit-' + ctrlId)); // ��� ����� ��������
                    initAttachDoc($('#attachDoc-edit-' + ctrlId), $('#attach-doc-area-edit-' + ctrlId), isEdit);
                } else {
                    setTimeout(pollAttach, 200, ctrlId, true);
                }
            } else {
                if ($('#attachImage-' + ctrlId).length) {
                    initAttachImage($('#attachImage-' + ctrlId), $('#attach-area-' + ctrlId)); // ��� ����� ��������
                    initAttachDoc($('#attachDoc-' + ctrlId), $('#attach-doc-area-' + ctrlId));
                } else {
                    setTimeout(pollAttach, 200, ctrlId, false);
                }
            }
        }

        function addSingleTalk(talk) {
            console.log('addSingleTalk-0',$rootScope.currentRubric);

            talk.selectedRubric = $rootScope.currentRubric;
            if(!talk.selectedRubric) {
                talk.selectedRubric = {};
                talk.selectedRubric.id = 0;
            }

            if (talk.isEdit) {
                talk.attachedImages = getAttachedImages($('#attach-area-edit-' + talk.id));
                talk.attachedDocs = getAttachedDocs($('#attach-doc-area-edit-' + talk.id), talk.isEdit);
            } else {
                talk.attachedImages = getAttachedImages($('#attach-area-' + talk.attachId));
                talk.attachedDocs = getAttachedDocs($('#attach-doc-area-' + talk.attachId));
            }

            if (talk.subject == TEXT_DEFAULT_4 || talk.subject == "") {

                talk.isCreateTalkError = true;
                talk.createTalkErrorText = "Вы не указали заголовок";

            } else if (talk.attachedImages.length == 0 && (talk.attachedDocs === undefined || talk.attachedDocs.length == 0) && !talk.isPollShow
                && (talk.message.content == TEXT_DEFAULT_3 || !talk.message.content)) {

                talk.isCreateTalkError = true;
                talk.createTalkErrorText = "Вы не ввели сообщение";

            } else if (talk.isPollShow && (!talk.pollSubject || talk.pollInputs[0].name == "" || talk.pollInputs[1].name == "")) {

                talk.isCreateTalkError = true;
                talk.createTalkErrorText = "Вы не указали данные для опроса";

            } else {

                if (talk.message.content == TEXT_DEFAULT_3 && (talk.attachedImages || talk.attachedDocs || talk.isPollShow)) {
                    talk.message.content = "";
                }
                talk.isCreateTalkError = false;

                var isWall = 0, isAdvert = false;
                if (talk.isAdvert) isAdvert = true;

                console.log('addSingleTalk',$rootScope.currentRubric);
                var newTopic = postTopic(talk, isWall, isAdvert, $filter);

                if (newTopic.poll && talk.poll) talk.poll.pollId = newTopic.poll.pollId;

                newTopic.label = getLabel(base.groups, newTopic.groupType);
                newTopic.tagColor = getTagColor(newTopic.label);

                $rootScope.base.createTopicIsHide = true;

                if (talk.isEdit) {
                    cleanAttached($('#attach-area-edit-' + talk.id));
                    cleanAttached($('#attach-doc-area-edit-' + talk.id));
                    talk.isEdit = false;
                } else {
                    cleanAttached($('#attach-area-' + talk.attachId));
                    cleanAttached($('#attach-doc-area-' + talk.attachId));
                    $rootScope.selectGroup($rootScope.base.bufferSelectedGroup);
                    talk.subject = TEXT_DEFAULT_4;
                }
            }
        }

        function createWallTopic(ctrl) {

            if(ctrl.isEdit && !$rootScope.currentRubric) {
                ctrl.selectedRubric = ctrl.rubric;
            }else{
                ctrl.selectedRubric = $rootScope.currentRubric;
            }

            //console.log('WallTopic',ctrl.selectedRubric);

            if (ctrl.isEdit) {
                ctrl.attachedImages = getAttachedImages($('#attach-area-edit-' + ctrl.id));
                ctrl.attachedDocs = getAttachedDocs($('#attach-doc-area-edit-' + ctrl.id), ctrl.isEdit);
            } else {
                ctrl.attachedImages = getAttachedImages($('#attach-area-' + ctrl.attachId));
                ctrl.attachedDocs = getAttachedDocs($('#attach-doc-area-' + ctrl.attachId));
            }

            if (ctrl.attachedImages.length == 0 && ctrl.attachedDocs && ctrl.attachedDocs.length == 0 && !ctrl.isPollShow
                && (ctrl.message.content == TEXT_DEFAULT_1 || !ctrl.message.content)) {

                ctrl.isCreateMessageError = true;
                ctrl.isCreateMessageGroupError = false;
                ctrl.isCreateMessageRubricError = false;

                ctrl.createMessageErrorText = "Вы не ввели сообщение";

            } else if (ctrl.isPollShow && (!ctrl.pollSubject || ctrl.pollInputs[0].name == "" || ctrl.pollInputs[1].name == "")) {

                ctrl.isCreateMessageError = true;
                ctrl.isCreateMessageGroupError = false;
                ctrl.isCreateMessageRubricError = false;

                ctrl.createMessageErrorText = "Вы не указали данные для опроса";

            } else if(!ctrl.selectedGroup){

                ctrl.isCreateMessageError = false;
                ctrl.isGroupsInMessShow = true;
                ctrl.isCreateMessageGroupError = true;
                ctrl.isCreateMessageRubricError = false;

            }else if(ctrl.selectedRubric === null || ctrl.selectedRubric.id === undefined){

                ctrl.isCreateMessageError = false;
                ctrl.isCreateMessageGroupError = false;
                ctrl.isCreateMessageRubricError = true;
                ctrl.isRubricsInMessShow = true;

            }else{

                if (ctrl.message.content == TEXT_DEFAULT_1 && (ctrl.attachedImages || ctrl.attachedDocs || ctrl.isPollShow)) {
                    ctrl.message.content = "";
                }
                ctrl.isCreateMessageError = false;
                ctrl.isOpenMessageBar = false;
                ctrl.isGroupsInMessShow = false;
                ctrl.isRubricsInMessShow = false;

                //console.log('createWallTopic',ctrl.selectedRubric);

                var isWall = 1,
                    newTopic = postTopic(ctrl, isWall, false, $filter);

                if (ctrl.isEdit) {
                    cleanAttached($('#attach-area-edit-' + ctrl.id));
                    cleanAttached($('#attach-doc-area-edit-' + ctrl.id));
                    ctrl.isEdit = false;
                    if (ctrl.poll && newTopic.poll) {
                        ctrl.poll.alreadyPoll = newTopic.poll.alreadyPoll;
                        ctrl.poll.pollId = newTopic.poll.pollId;
                    }
                } else {
                    ctrl.selectedGroup = ctrl.selGroupName = ctrl.selRubricName = null;
                    ctrl.selectedRubric = {};
                    cleanAttached($('#attach-area-' + ctrl.attachId));
                    cleanAttached($('#attach-doc-area-' + ctrl.attachId));
                }

                if (!ctrl.isWallSingle) $rootScope.selectGroup($rootScope.base.bufferSelectedGroup);

            }
        }

        $rootScope.createTopic = function (event, ctrl) {
            event.preventDefault();

            if (!ctrl.isEdit) {
                $(event.target).closest('.message-input').find('.topic-textarea').height(TEXTAREA_DEFAULT_HEIGHT);
            }

            if (ctrl.isTalk) {
                // значит это talk
                addSingleTalk(ctrl);
            } else {
                // значит это wall
                createWallTopic(ctrl);
            }
        };

        function createWallMessage(wallItem) {
            //wallItem.groupId = lenta.selectedGroupInTop.id;
            wallItem.groupId = $rootScope.base.bufferSelectedGroup.id;

            var isWall = true,
                message = postMessageMy(wallItem, isWall, false, $filter);

            if (message == 0) {
                wallItem.isCreateCommentError = true;
                wallItem.createCommentErrorText = "Вы не ввели сообщение";
            } else {
                wallItem.isCreateCommentError = false;
                base.initStartParamsForCreateMessage(message);

                if (wallItem.messages) {
                    wallItem.messages.push(message);

                    var mesLen = wallItem.messages.length;

                    (mesLen >= $rootScope.COMMENTS_DEFAULT_COUNT && !wallItem.isOpen) ?
                        wallItem.bufferMessages = wallItem.messages.slice(mesLen - $rootScope.COMMENTS_DEFAULT_COUNT) :
                        wallItem.bufferMessages = wallItem.messages;

                } else {
                    wallItem.messages = [];
                    wallItem.messages[0] = message;

                    wallItem.bufferMessages = [];
                    wallItem.bufferMessages[0] = wallItem.messages[0];
                }

            }
        }

        function addSingleFirstMessage(talk) {
            if (talk.fullTalkTopic)talk.topicId = talk.fullTalkTopic.id;

            talk.messageId = talk.id;

            var isWall = false,
                isFirstLevel = true,
                newMessage = postMessageMy(talk, isWall, isFirstLevel, $filter);

            if (newMessage == 0) {
                talk.isCreateFirstMessageError = true;
                talk.createFirstMessageErrorText = "Вы не ввели сообщение";
            } else {
                talk.fullTalkTopic ?
                    talk.fullTalkTopic.answerInputIsShow = false :
                    talk.answerInputIsShow = false;

                talk.isCreateFirstMessageError = false;

                /*if(talk.fullTalkTopic && !talk.fullTalkFirstMessages){
                 talk.fullTalkFirstMessages = [];
                 talk.fullTalkFirstMessages[0] = newMessage;
                 }*/

                talk.isEdit = false;

                if (talk.fullTalkTopic) {
                    if (talk.fullTalkFirstMessages) {

                        if (talk.fullTalkFirstMessages.length < 10 ||
                            $rootScope.base.isEarliestMessages ||
                            $rootScope.base.endOfLoaded) {

                            $rootScope.base.lastLoadedId = newMessage.id;
                            talk.fullTalkFirstMessages.push(newMessage);

                        }

                    } else {
                        talk.fullTalkFirstMessages = [];
                        talk.fullTalkFirstMessages[0] = newMessage;
                        $rootScope.base.lastLoadedId = newMessage.id;
                        $rootScope.base.isEarliestMessages = true;
                    }
                }

            }
        }

        function addSingleMessage(firstMessage, topicId, talk, message) {
            if (!talk.fullTalkMessages[firstMessage.id])
                talk.fullTalkMessages[firstMessage.id] =
                    messageClient.getMessages(topicId, talk.selectedGroup.id, 1, firstMessage.id, 0, 1000).messages;

            var fullTalkMessagesLength;
            talk.fullTalkMessages[firstMessage.id] ?
                fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length :
                fullTalkMessagesLength = 0;

            var newMessage, answer, parentId;

            if (!message) {
                // если добавляем к сообщению первого уровня
                talk.messageId = firstMessage.id;
                talk.message = firstMessage;

                answer = firstMessage.commentText;
                firstMessage.isTreeOpen = true;
                firstMessage.commentText = TEXT_DEFAULT_2;
                parentId = firstMessage.id;

                if (!firstMessage.childCount || firstMessage.childCount == 0) firstMessage.childCount = 1;

            } else {
                // если добавляем к простому сообщению
                talk.messageId = message.id;
                talk.message = message;

                for (var i = 0; i < fullTalkMessagesLength; i++) {
                    if (talk.fullTalkMessages[firstMessage.id][i].id == message.id) {
                        //talk.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                        talk.fullTalkMessages[firstMessage.id][i].isTreeOpen = true;
                        talk.fullTalkMessages[firstMessage.id][i].isOpen = true;
                        talk.fullTalkMessages[firstMessage.id][i].isParentOpen = true;
                        talk.fullTalkMessages[firstMessage.id][i].createdEdit = getTiming(talk.fullTalkMessages[firstMessage.id][i].created);
                        answer = talk.fullTalkMessages[firstMessage.id][i].commentText;
                    }
                }
                parentId = message.id;

            }
            var isWall = false,
                isFirstLevel = false;
            talk.topicId = topicId;
            talk.parentId = parentId;
            talk.commentText = answer;

            newMessage = postMessageMy(talk, isWall, isFirstLevel, $filter);

            if (newMessage == 0) {
                if (!message) {
                    talk.isCreateMessageToFirstError = true;
                    talk.createMessageToFirstErrorText = "Вы не ввели сообщение";
                } else {
                    talk.isCreateMessageError = true;
                    talk.createMessageErrorText = "Вы не ввели сообщение";
                }
            } else {
                if (!message) {
                    talk.isCreateMessageToFirstError = false;
                    firstMessage.answerInputIsShow = false;
                    firstMessage.isEdit = false;

                } else {
                    talk.isCreateMessageError = false;
                    for (var i = 0; i < fullTalkMessagesLength; i++) {
                        if (talk.fullTalkMessages[firstMessage.id][i].id == message.id) {
                            talk.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                            talk.fullTalkMessages[firstMessage.id][i].isEdit = false;
                        }
                    }
                }

                talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(topicId, talk.selectedGroup.id, 1, firstMessage.id, 0, 1000).messages;

                talk.fullTalkMessages[firstMessage.id] ?
                    fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length :
                    fullTalkMessagesLength = 0;

                for (var i = 0; i < fullTalkMessagesLength; i++) {
                    talk.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                    talk.fullTalkMessages[firstMessage.id][i].isTreeOpen = true;
                    talk.fullTalkMessages[firstMessage.id][i].isOpen = true;
                    talk.fullTalkMessages[firstMessage.id][i].isParentOpen = true;
                    talk.fullTalkMessages[firstMessage.id][i].createdEdit = getTiming(talk.fullTalkMessages[firstMessage.id][i].created);
                    talk.fullTalkMessages[firstMessage.id][i].commentText = TEXT_DEFAULT_2;
                }
            }
        }

        function addDialogMessage(ctrl) {
            var attach = [];

            if ((ctrl.commentText != TEXT_DEFAULT_1 && ctrl.commentText != "") || attach.length != 0) {

                if (ctrl.isEdit) {
                    // значит редактирование

                    var attachImg = getAttachedImages($('#attach-area-edit-' + ctrl.attachId));
                    var attachDoc = getAttachedDocs($('#attach-doc-area-edit-' + ctrl.attachId), true);
                    attach = attachImg.concat(attachDoc);

                    // еще attach
                    ctrl.commentText = $filter('linky')(ctrl.commentText, 'blank');
                    ctrl.commentText = withTags(ctrl.commentText);
                    dialogClient.updateDialogMessage(ctrl.id, ctrl.commentText, attach);

                    cleanAttached($('#attach-area-edit-' + ctrl.attachId));
                    cleanAttached($('#attach-doc-area-edit-' + ctrl.attachId));

                    ctrl.content = ctrl.commentText;

                    ctrl.images = attachImg;
                    ctrl.documents = attachDoc;
                    ctrl.isEdit = false;

                } else {
                    // значит создание
                    attach = getAttachedImages($('#attach-area-' + ctrl.attachId)).concat(getAttachedDocs($('#attach-doc-area-' + ctrl.attachId)));

                    var newDialogMessage = new com.vmesteonline.be.thrift.messageservice.DialogMessage();

                    (ctrl.commentText == TEXT_DEFAULT_1) ?
                        newDialogMessage.content = "" :
                        newDialogMessage.content = ctrl.commentText;

                    newDialogMessage.author = $rootScope.base.me.id;

                    newDialogMessage.created = Date.parse(new Date()) / 1000;
                    newDialogMessage.authorProfile = userClient.getUserProfile(newDialogMessage.author);

                    newDialogMessage.content = $filter('linky')(newDialogMessage.content, 'blank');
                    newDialogMessage.content = withTags(newDialogMessage.content);
                    var tempMessage = dialogClient.postMessage(ctrl.dialogId, newDialogMessage.content, attach);

                    newDialogMessage.images = tempMessage.images;
                    newDialogMessage.documents = tempMessage.documents;
                    newDialogMessage.id = tempMessage.id;
                    newDialogMessage.isDialog = true;
                    newDialogMessage.attachId = ctrl.dialogId + "-" + newDialogMessage.id;

                    //ctrl.privateMessages.unshift(newDialogMessage);
                    $rootScope.base.privateMessages.unshift(newDialogMessage);
                    $rootScope.base.initStartParamsForCreateMessage(newDialogMessage);

                    if (ctrl.privateMessages.length == 1) {
                        // на случай если с 0 добавляется более 20 сообщений
                        // чтобы подгружал от 1го сообщения а не от 0
                        $rootScope.base.lastLoadedId = newDialogMessage.id;
                    }

                    ctrl.commentText = TEXT_DEFAULT_1;

                    cleanAttached($('#attach-area-' + ctrl.attachId));
                    cleanAttached($('#attach-doc-area-' + ctrl.attachId));
                }

            }

        }

        $rootScope.createMessage = function (e, ctrl, topicId, talk, message) {
            e.preventDefault();

            if (!ctrl.isEdit) {
                $(e.target).closest('.answer-block').find('.message-textarea').height(TEXTAREA_DEFAULT_HEIGHT);
            }

            if (ctrl.isTalk) {
                //alert('111 '+ctrl.fullAdvertTopic+" "+ctrl.parentId);
                if ((ctrl.fullTalkTopic || ctrl.parentId == 0) && !topicId) {
                    //alert('1');
                    addSingleFirstMessage(ctrl);
                } else {
                    if (!message) {
                        //alert('2');
                        addSingleMessage(ctrl, topicId, talk);
                    } else {
                        //alert('3');
                        addSingleMessage(message, topicId, talk, ctrl);
                    }
                }

            } else if (ctrl.isDialog) {
                addDialogMessage(ctrl);
            } else {
                createWallMessage(ctrl);
            }

        };

        base.initStartParamsForCreateMessage = function (ctrl) {

            ctrl.isEdit = false;
            ctrl.answerShow = false;
            ctrl.isFocus = false;
            ctrl.isCreateCommentError = false;

            if (ctrl.isDialog) {
                ctrl.default = ctrl.commentText = TEXT_DEFAULT_1;
            } else {
                ctrl.default = ctrl.commentText = TEXT_DEFAULT_2;
            }

            if (ctrl.id || ctrl.isDialog) {
                // занчит редактирование
                if (!ctrl.isTalk) ctrl.commentText = ctrl.content;
                ctrl.answerShow = true;
            } else {
                // значит создание
            }

        };

        base.getUserColor = function (groupType) {
            return getTagColor(getLabel(base.groups, groupType));
        };

        base.toggleFullText = function (ctrl) {
            ctrl.isFullText ? ctrl.isFullText = false : ctrl.isFullText = true;
        };

        base.setPrivateMessages = function (dialogId, loadedLength) {
            try {
                $rootScope.base.privateMessages = dialogClient.getDialogMessages(dialogId, 0, loadedLength, 0);
            } catch (e) {
                $state.go('dialogs');
            }
            var privateMessagesLength = $rootScope.base.privateMessages.length;

            if (privateMessagesLength != 0) $rootScope.base.lastLoadedId = $rootScope.base.privateMessages[privateMessagesLength - 1].id;

            for (var i = 0; i < privateMessagesLength; i++) {
                $rootScope.base.privateMessages[i].authorProfile = userClient.getUserProfile($rootScope.base.privateMessages[i].author);
                $rootScope.base.privateMessages[i].isDialog = true;
                $rootScope.base.privateMessages[i].attachId = dialogId + "-" + $rootScope.base.privateMessages[i].id;
                $rootScope.base.initStartParamsForCreateMessage($rootScope.base.privateMessages[i]);
            }
        };

        base.newPrivateMessagesCount = 0;
        base.biggestCountDialogId = 0;
        $rootScope.newMessages = [];
        $rootScope.newImportantCount = 0;

        var timeStamp = 0;
        base.checkUpdates = function () {
            try {
                timeStamp = messageClient.checkUpdates(timeStamp);
            } catch (e) {
                document.location.replace('/login');
            }

            var updateMap,
                old = 0;

            console.log('timestemp ' + timeStamp);

            if (timeStamp == 0) {
                try {
                    updateMap = messageClient.getDialogUpdates();
                } catch (e) {
                    document.location.replace('/login');
                }
                var temp = 0,
                    currentDialogId,
                    counter = 0;

                if($rootScope.base && $rootScope.base.currentDialogId)currentDialogId = $rootScope.base.currentDialogId;


                $rootScope.newMessages = [];

                for (var dialogId in updateMap) {
                    $rootScope.newMessages[counter++] = {
                        dialogId: dialogId,
                        count: updateMap[dialogId]
                    };
                    if (dialogId != currentDialogId || $rootScope.currentPage != 'dialog-single') {

                        temp += updateMap[dialogId];

                        if (updateMap[dialogId] > old) {
                            base.biggestCountDialogId = dialogId;
                        }

                        old = updateMap[dialogId];
                    } else {
                        base.setPrivateMessages(currentDialogId, 20);
                    }
                }

                base.newPrivateMessagesCount = temp;
                try {
                    $rootScope.$digest();
                } catch (e) {
                    console.log('err');
                }

            } else if (timeStamp == 1) {
                // notification
                $rootScope.newMessages = [];
                base.me.notificationIsShow = true;
                base.me.userNotification = messageClient.getMulticastMessage();

            } else if (timeStamp >= 2 && timeStamp < 10000) {
                // important messages
                console.log('important ' + timeStamp);
                $rootScope.newMessages = [];
                $rootScope.newImportantCount = timeStamp;

                $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);

            } else {
                $rootScope.newMessages = [];
                $rootScope.newImportantCount = 0;
            }

        };

        setInterval(base.checkUpdates, 5000);

        base.nextNotification = function () {
            base.me.userNotification = messageClient.getNextMulticastMessage();
            if (!base.me.userNotification) {
                base.me.notificationIsShow = false;
            }
        };

        base.groupAddresesList = [];
        base.isAddresesListShow = [];
        base.showGroupAdressesList = function(messageId){
            if(!base.groupAddresesList[messageId]) {
                base.groupAddresesList[messageId] = userClient.getAddressListByMessageId(messageId);
            }
            base.isAddresesListShow[messageId] = true;
        };
        base.hideGroupAdressesList = function(messageId){
            base.isAddresesListShow[messageId] = false;
        };

        base.userMenuToggle = function($event){
            $event.preventDefault();
            $event.stopPropagation();
            base.isUserMenuShow ? base.isUserMenuShow = false : base.isUserMenuShow = true;
        };

        base.isAttachDropdownShow = [];
        base.isHashtagDropdownShow = false;
        base.isRubricsDropdownShow = false;

        base.toggleAttachDropdown = function($event,ctrl,ctrlId){
            $event.stopPropagation();

            var id;
            if(ctrl) {
                (ctrl.isEdit) ? id = ctrl.id : id = ctrl.attachId;
            }else{
                id = ctrlId;
            }

            base.isAttachDropdownShow[id] ?
                base.isAttachDropdownShow[id] = false :
                    base.isAttachDropdownShow[id] = true;

            //console.log('3',id,base.isAttachDropdownShow[id]);
        };
        base.toggleHashtagDropdown = function($event){
            $event.stopPropagation();
            base.isHashtagDropdownShow ? base.isHashtagDropdownShow = false : base.isHashtagDropdownShow = true;
        };
        base.toggleRubricsDropdown = function($event){
            $event.stopPropagation();
            base.isRubricsDropdownShow ? base.isRubricsDropdownShow = false : base.isRubricsDropdownShow = true;
        };

        base.hideDropdown = function(){
            base.isUserMenuShow = false;
            base.isAttachDropdownShow = [];
            base.isHashtagDropdownShow = false;
            base.isRubricsDropdownShow = false;
        };

        base.contentLength = 500;

        /*var lsGroupId = localStorage.getItem('groupId'),
            groupsLength = base.groups.length;*/

        /*if (!lsGroupId) {*/
            $rootScope.currentGroup = getDefaultGroup(base.groups);
        /*} else {
            for (var i = 0; i < groupsLength; i++) {
                if (base.groups[i].id == lsGroupId) {
                    $rootScope.currentGroup = base.groups[i];
                }
            }
            if (!$rootScope.currentGroup) {
                $rootScope.currentGroup = getDefaultGroup(base.groups);
            }
        }*/

        base.isLentaFocus = false;

        base.checkUpdates();

        $rootScope.currentPage = 'lenta';

        $rootScope.leftbar = {};
    }

    $rootScope.base = base;

    };

module.exports = [ '$scope','$rootScope','$state','$filter','$location', baseCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\blog.js":[function(require,module,exports){

var blogCtrl = function($rootScope) {
    var blog = this;

    $rootScope.base.isFooterBottom = true;

    blog.isAuth = authClient.checkIfAuthorized();

    if(blog.isAuth){
        //me = userClient.getUserProfile();
        //$('.anonName').removeClass('hidden');
    }

    blog.posts = messageClient.getBlog(0,1000);

    var len = blog.posts.topics.length;
    for(var i = 0; i < len; i++){
        blog.posts.topics[i].isCommentShow = false;
        blog.posts.topics[i].isInputShow = false;
    }

    blog.toggleComm = function($event,post){
        $event.preventDefault();

        if (post.isCommentShow){
            post.isCommentShow = false;

        }else{
            post.isCommentShow = true;

            if(!post.comments) {
                post.comments = messageClient.getMessagesAsList(post.id, 7, 0, false, 1000).messages;
                console.log('finish');
            }
        }

    };

    blog.toggleInput = function($event,post){
        $event.preventDefault();

        post.isInputShow ? post.isInputShow = false : post.isInputShow = true;

        console.log('input',post.isInputShow);

        //$(this).closest('.post').find('.input-group').slideToggle(200,function(){
            /*if(userName){
                $(this).find('textarea').val(userName);
                setCaretToPos($(this).find('textarea')[0],userName.length);
            }
            $(this).find('textarea').focus();*/
        //});
    };

    blog.sendComm = function($event,post){
        $event.preventDefault();
        var message = new com.vmesteonline.be.thrift.messageservice.Message();

        message.id = 0;
        message.topicId = post.id;
        message.type = com.vmesteonline.be.thrift.messageservice.MessageType.BLOG;//7;
        message.groupId = 0;
        message.content = post.commenting;
        message.parentId = 0;
        message.created = Date.parse(new Date())/1000;

        if(!blog.isAuth){
            message.anonName = post.anonName;
        }else{
            message.anonName = "";
        };

        var returnComment = messageClient.postBlogMessage(message);
        if(post.comments && post.comments.length) {
            post.comments.push(returnComment);
        }else{
            post.comments = [];
            post.comments[0] = returnComment;
        }

    };

    blog.getTiming = function(messageObjDate){
        var minute = 60*1000,
            hour = minute*60,
            day = hour*24,
            threeDays = day* 3,
            now = Date.parse(new Date()),
            timing = (now - messageObjDate*1000),
            timeTemp;

        if(timing < minute){
            timing = "только что";
        }else if(timing < hour){
            timing = new Date(timing);
            timing = timing.getMinutes()+" мин назад";
        }else if(timing < day){
            timing = new Date(timing);
            timeTemp = timing.getHours();
            if(timeTemp == 1 || timeTemp == 0){
                timing = "1 час назад";
            }else if(timeTemp > 1 && timeTemp < 5){
                timing = timeTemp + " часа назад";
            }else{
                timing = timeTemp + " часов назад";
            }
        }else if(timing < threeDays){
            timing = new Date(timing);
            timeTemp = timing.getDate();
            if(timeTemp == 1){
                timing = timeTemp+" день назад";
            }else{
                timing = timeTemp+" дней назад";
            }
        }else{
            timeTemp = new Date(messageObjDate*1000).toLocaleDateString();
            var arr = timeTemp.split('.');
            if(arr[0].length == 1) arr[0] = "0"+arr[0];
            if(arr[1].length == 1) arr[1] = "0"+arr[1];
            timing = arr[0]+"."+arr[1]+"."+arr[2];
        }

        return timing;
    };

    /*$('.itemdiv').each(function(){
        var span = $(this).find('.lenta-item-bottom span');
        var created = span.attr('data-created');

        span.text(getTiming(created));
    });

    var h = $(window).height()-105;
    $('.container.coming-soon .main-container').css({'min-height': h});

    $('.post').each(function(){
        var link = $(this).attr('data-postlink');

        $(this).find('.topic').load(link+' .post', function(){
        });
    });

    var isCommentsLoaded = [];
    $('.show-comment').click(function(e){
        e.preventDefault();

        if($(this).text() == "Показать комментарии"){
            $(this).text("Скрыть комментарии");
        }else{
            $(this).text("Показать комментарии");
        }

        var topicId = $(this).closest('.post').attr('data-topicid'),
            dialogs = $(this).closest('.post').find('.dialogs');

        //if(!isCommentsLoaded[topicId]){
        var comments = messageClient.getMessagesAsList(topicId, 7, 0,false,1000).messages;
        //alert(comments.length);

        if(comments){
            var commentsLength = comments.length,
                commentsHTML = "";

            for(var i = 0; i < commentsLength; i++){
                var classNoLink = "",
                    messageAvatar,
                    messageName,
                    messageUserId;

                if(!comments[i].userInfo){
                    messageAvatar = "data/da.gif";
                    messageUserId = 0;
                    classNoLink = "no-link";
                }else{
                    //messageName = comments[i].userInfo.firstName+" "+comments[i].userInfo.lastName;
                    messageAvatar = comments[i].userInfo.avatar;
                    messageUserId = comments[i].userInfo.id;
                }

                messageName = comments[i].anonName;

                commentsHTML += '<div class="itemdiv dialogdiv new">'+
                    '<a href="profile-'+messageUserId+'" class="user '+classNoLink+'">'+
                    '<div class="avatar short2" style="background-image: url('+messageAvatar+')"></div>'+
                    '</a>'+
                    '<div class="body">'+
                    '<div class="name">'+
                    '<a href="profile-'+messageUserId+'" class="'+classNoLink+'">'+messageName+'</a>'+
                    '</div>'+
                    '<div class="text">'+comments[i].content+'</div>'+
                    '<div class="lenta-item-bottom">'+
                    '<span>'+ getTiming(comments[i].created) +'</span>'+
                    '<a href="#"> Ответить</a>'+
                    '</div>'+
                    '</div>'+
                    '</div>';
            }
        }

        dialogs.html("");
        dialogs.prepend(commentsHTML);

        initNoLink($(this).closest('.post'));
        initAnswerToComment($('.new .lenta-item-bottom a'));
        $('.new').removeClass('new');

        isCommentsLoaded[topicId] = true;

        //}

        dialogs.slideToggle(200);
    });

    function initAnswerToComment(selector){
        selector.click(function(e){
            e.preventDefault();

            var userName = $(this).closest('.body').find('.name a').text()+", ";
            $(this).closest('.post').find('.make-comment').trigger('click',userName);
        });
    }
    initAnswerToComment($('.lenta-item-bottom a'));

    $('.make-comment').click(function(e,userName){
        e.preventDefault();

        $(this).closest('.post').find('.input-group').slideToggle(200,function(){
            if(userName){
                $(this).find('textarea').val(userName);
                setCaretToPos($(this).find('textarea')[0],userName.length);
            }
            $(this).find('textarea').focus();
        });
    });

    function initNoLink(selector){

        selector.find('.no-link').click(function(e){
            e.preventDefault();

        });

    }
    initNoLink($('.blog'));

    $('.send-in-blog').click(function(){
        var message = new com.vmesteonline.be.thrift.messageservice.Message();

        message.id = 0;
        message.topicId = $(this).closest('.post').attr('data-topicid');
        message.type = com.vmesteonline.be.thrift.messageservice.MessageType.BLOG;//7;
        message.groupId = 0;
        message.content = $(this).closest('.input-group').find('.message-textarea').val();
        message.parentId = 0;
        message.created = Date.parse(new Date())/1000;

        if(!isAuth){
            message.anonName = $(this).closest('.input-group').find('.anonName').val();
        }else{
            message.anonName = "";
        };

        var returnComment = messageClient.postBlogMessage(message);
        var comments = $(this).closest('.post').find('.dialogs');

        var classNoLink = "";

        if(!isAuth){
            message.avatar = "data/da.gif";
            message.name = message.anonName;
            message.userId = 0;
            classNoLink = "no-link";
        }else{
            message.avatar = returnComment.userInfo.avatar;
            message.name = returnComment.userInfo.firstName+" "+returnComment.userInfo.lastName;
            message.userId = returnComment.userInfo.id ;
        }

        var newCommentHTML = '<div class="itemdiv dialogdiv new">'+
            '<a href="profile-'+ message.userId +'" class="user '+ classNoLink +'">'+
            '<div class="avatar short2" style="background-image: url('+ message.avatar +')"></div>'+
            '</a>'+
            '<div class="body">'+
            '<div class="name">'+
            '<a href="profile-'+ message.userId +'" class="'+ classNoLink +'" >'+ message.name +'</a>'+
            '</div>'+
            '<div class="text">'+ message.content +'</div>'+
            '<div class="lenta-item-bottom">'+
            '<span>'+ getTiming(message.created) +'</span>'+
            '<a href="#">Ответить</a>'+
            '</div>'+
            '</div>'+
            '</div>';

        if(comments.css('display') == 'none'){

            $(this).closest('.post').find('.show-comment').trigger('click');

        }else{
            comments.append(newCommentHTML);

            initNoLink($('.new'));
            initAnswerToComment($('.new .lenta-item-bottom a'));
            $('.new').removeClass('new');
        }

        //setTimeout(tempFunc,1000,comments,newCommentHTML,message,$(this));

        $(this).closest('.input-group').hide();
        $(this).closest('.input-group').find('textarea').val("");

    });

    function getTiming(messageObjDate){
        var minute = 60*1000,
            hour = minute*60,
            day = hour*24,
            threeDays = day* 3,
            now = Date.parse(new Date()),
            timing = (now - messageObjDate*1000),
            timeTemp;

        if(timing < minute){
            timing = "только что";
        }else if(timing < hour){
            timing = new Date(timing);
            timing = timing.getMinutes()+" мин назад";
        }else if(timing < day){
            timing = new Date(timing);
            timeTemp = timing.getHours();
            if(timeTemp == 1 || timeTemp == 0){
                timing = "1 час назад";
            }else if(timeTemp > 1 && timeTemp < 5){
                timing = timeTemp + " часа назад";
            }else{
                timing = timeTemp + " часов назад";
            }
        }else if(timing < threeDays){
            timing = new Date(timing);
            timeTemp = timing.getDate();
            if(timeTemp == 1){
                timing = timeTemp+" день назад";
            }else{
                timing = timeTemp+" дней назад";
            }
        }else{
            timeTemp = new Date(messageObjDate*1000).toLocaleDateString();
            var arr = timeTemp.split('.');
            if(arr[0].length == 1) arr[0] = "0"+arr[0];
            if(arr[1].length == 1) arr[1] = "0"+arr[1];
            timing = arr[0]+"."+arr[1]+"."+arr[2];
        }

        return timing;
    }

    function setSelectionRange(input, selectionStart, selectionEnd) {
        if (input.setSelectionRange) {
            input.focus();
            input.setSelectionRange(selectionStart, selectionEnd);
        }
        else if (input.createTextRange) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
            range.select();
        }
    }

    function setCaretToPos (input, pos) {
        setSelectionRange(input, pos, pos);
    }
*/

    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', blogCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\cabinet.js":[function(require,module,exports){

var cabinetCtrl = function($rootScope) {
    var nearby = this,
        postId;

    var businessDescription = new com.vmesteonline.be.thrift.businesservice.BusinessDescription;
    businessDescription.shortName = "Мега Пицца";
    businessDescription.fulltName = "Мега Пицца круто-круто";
    businessDescription.shortInfo = "Мега Пицца круто-круто быстро-быстро";
    businessDescription.fullInfo = "Мега Пицца круто-круто быстро-быстро дешево";
    businessDescription.longitude = '30';
    businessDescription.latitude = '60';
    businessDescription.radius = 500;
    //businessClient.createBusinessDescription(businessDescription,'w','w');

    //console.log('business created');

    nearby.info = businessClient.getMyBusinessInfo();
    nearby.info.fullInfo = nearby.info.fullInfo.replace('\n','<br>');

    /*if ($stateParams.nearbyId && $stateParams.nearbyId != 0){
        postId = $stateParams.nearbyId;
    }*/

    nearby.carouselInterval = 5000;
    /*nearby.addSlide = function() {
        var newWidth = 600 + slides.length + 1;
        slides.push({
            image: 'http://placekitten.com/' + newWidth + '/300',
            text: ['More','Extra','Lots of','Surplus'][slides.length % 4] + ' ' +
                ['Cats', 'Kittys', 'Felines', 'Cutes'][slides.length % 4]
        });
    };
    for (var i=0; i<4; i++) {
        nearby.addSlide();
    }*/

    $rootScope.base.isFooterBottom = true;

    nearby.toggleInput = function($event,post){
        $event.preventDefault();

        post.isInputShow ? post.isInputShow = false : post.isInputShow = true;

        console.log('input',post.isInputShow);

    };

    nearby.wallItem = businessClient.getWallItem(nearby.info.id);
    console.log('1',nearby.wallItem);

    nearby.sendComm = function($event,post){
        $event.preventDefault();
        var message = new com.vmesteonline.be.thrift.messageservice.Message();

        message.id = 0;
        message.topicId = nearby.info.id; //post.id;
        message.type = com.vmesteonline.be.thrift.messageservice.MessageType.WALL;//8;
        message.groupId = 0;
        message.content = post.commenting;
        message.topicId = nearby.wallItem.topic.id;
        message.parentId = 0;
        message.created = Date.parse(new Date())/1000;
        post.commenting = "";

        if(!nearby.isAuth){
            message.anonName = post.anonName;
        }else{
            message.anonName = "";
        };

        console.log('post',message);
        //var returnComment = messageClient.postBusinessTopics(message);
        var returnComment = messageClient.postMessage(message);
        console.log('post2',returnComment);


        if(nearby.wallItem.messages && nearby.wallItem.messages.length) {
            nearby.wallItem.messages.push(returnComment);
        }else{
            nearby.wallItem.messages = [];
            nearby.wallItem.messages[0] = returnComment;
        }

    };

    nearby.getTiming = function(messageObjDate){
        var minute = 60*1000,
            hour = minute*60,
            day = hour*24,
            threeDays = day* 3,
            now = Date.parse(new Date()),
            timing = (now - messageObjDate*1000),
            timeTemp;

        if(timing < minute){
            timing = "только что";
        }else if(timing < hour){
            timing = new Date(timing);
            timing = timing.getMinutes()+" мин назад";
        }else if(timing < day){
            timing = new Date(timing);
            timeTemp = timing.getHours();
            if(timeTemp == 1 || timeTemp == 0){
                timing = "1 час назад";
            }else if(timeTemp > 1 && timeTemp < 5){
                timing = timeTemp + " часа назад";
            }else{
                timing = timeTemp + " часов назад";
            }
        }else if(timing < threeDays){
            timing = new Date(timing);
            timeTemp = timing.getDate();
            if(timeTemp == 1){
                timing = timeTemp+" день назад";
            }else{
                timing = timeTemp+" дней назад";
            }
        }else{
            timeTemp = new Date(messageObjDate*1000).toLocaleDateString();
            var arr = timeTemp.split('.');
            if(arr[0].length == 1) arr[0] = "0"+arr[0];
            if(arr[1].length == 1) arr[1] = "0"+arr[1];
            timing = arr[0]+"."+arr[1]+"."+arr[2];
        }

        return timing;
    };


    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', cabinetCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\edit.js":[function(require,module,exports){

var editCtrl = function($rootScope,$scope, FileUploader) {

    var edit = this;

    var attach = new com.vmesteonline.be.thrift.messageservice.Attach(),
        isLogoUploader, isImagesUploader, imagesCounter = 0,imagesLength;

    $scope.setLoadImage = function(fileBase64){

        var svc = fileClient.saveFileContent(fileBase64, true);
        console.log('setLoadImage',fileBase64);
        if(isLogoUploader){
            edit.businessDescription.logo.URL = attach.URL = edit.logoURL = svc;
            isLogoUploader = false;
        }else if(isImagesUploader){
            edit.businessDescription.images[imagesCounter].URL = svc;
            imagesCounter++;
            if(imagesCounter == imagesLength) isImagesUploader = false;

            console.log('images',imagesCounter,edit.businessDescription.images);
        }

    };

    //var uploader = $scope.uploaderLogo = new FileUploader();
    $scope.uploaderLogo = new FileUploader();
    $scope.uploaderImages = new FileUploader();

    // FILTERS

    $scope.uploaderLogo.filters.push({
        name: 'imageFilter',
        fn: function(item /*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    /*uploaderLogo.onWhenAddingFileFailed = function(item *//*{File|FileLikeObject}*//*, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };*/
    $scope.uploaderLogo.onAfterAddingFile = function(fileItem) {
        console.info('onAfterAddingFile 1', fileItem);
        isLogoUploader = true;

        attach.fileName = fileItem._file.name;
        attach.contentType = fileItem._file.type;
    };
    $scope.uploaderImages.onAfterAddingFile = function(fileItem) {
        console.info('onAfterAddingFile 2', fileItem);
    };
    $scope.uploaderImages.onAfterAddingAll = function(addedFileItems) {
        console.info('onAfterAddingAll', addedFileItems);

        isImagesUploader = true;
        //imagesCounter = 0;

        imagesLength = addedFileItems.length;
        for(var i = 0; i < imagesLength; i++){
            edit.businessDescription.images[i] = new com.vmesteonline.be.thrift.messageservice.Attach();
            edit.businessDescription.images[i].fileName = addedFileItems[i]._file.name;
            edit.businessDescription.images[i].contentType = addedFileItems[i]._file.type;
        }

    };
    /*$scope.uploaderLogo.onBeforeUploadItem = function(item) {
        console.info('onBeforeUploadItem', item);
    };
    $scope.uploaderLogo.onProgressItem = function(fileItem, progress) {
        console.info('onProgressItem', fileItem, progress);
    };
    $scope.uploaderLogo.onProgressAll = function(progress) {
        console.info('onProgressAll', progress);
    };
    $scope.uploaderLogo.onSuccessItem = function(fileItem, response, status, headers) {
        console.info('onSuccessItem', fileItem, response, status, headers);
    };
    $scope.uploaderLogo.onErrorItem = function(fileItem, response, status, headers) {
        console.info('onErrorItem', fileItem, response, status, headers);
    };
    $scope.uploaderLogo.onCancelItem = function(fileItem, response, status, headers) {
        console.info('onCancelItem', fileItem, response, status, headers);
    };
    $scope.uploaderLogo.onCompleteItem = function(fileItem, response, status, headers) {
        console.info('onCompleteItem', fileItem, response, status, headers);
    };
    $scope.uploaderLogo.onCompleteAll = function() {
        console.info('onCompleteAll');
    };*/


    $rootScope.businessDescription = edit.businessDescription = businessClient.getMyBusinessInfo();

    //edit.businessDescription = new com.vmesteonline.be.thrift.businesservice.BusinessDescription;

    edit.save = function(){

        //edit.businessDescription.logo.URL = fileClient.saveFileContent(bg, true);
        // bg - binary data base64


        edit.businessDescription.logo = attach;
        console.log('save',edit.businessDescription);
        //edit.businessDescription.logo.fileName = '1';
        //edit.businessDescription.logo.URL = '/static/images/anna.jpg';

        try {
            businessClient.updateBusinessDescription(edit.businessDescription);
            edit.statusText = "Сохранено";
            edit.status = 1;
        }catch(e){
            edit.statusText = "При сохранении произошла ошибка";
            edit.status = 0;
        }

        console.log('after save',edit.businessDescription);

    }

};

module.exports = [ '$rootScope','$scope','FileUploader', editCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\statistic.js":[function(require,module,exports){

var statisticCtrl = function($rootScope) {

    var maps = this,
        businessDescription;

    ($rootScope.businessDescription) ?
    businessDescription = $rootScope.businessDescription :
    businessDescription = businessClient.getMyBusinessInfo() ;

    var yaMap;
    maps.afterMapInit=function(nMap){
        yaMap = nMap;
    };

    //var location = userClient.getGroupView(groupId);
    maps.center = [businessDescription.longitude,businessDescription.latitude];
    maps.zoom = 16;
    maps.radius = businessDescription.radius;
    maps.color = MAP_COLOR;

    maps.baloon = {
        geometry: {
            type: 'Point',
            coordinates: maps.center
        },
        // Свойства
        properties: {
            hintContent: "Я здесь"
        }
    };

};

module.exports = [ '$rootScope', statisticCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\changeAvatar.js":[function(require,module,exports){

var changeAvatarCtrl = function($state,$rootScope){

        var changeAvatar = this, newSrc,
            x1 = 50, y1 = 50, x2 = 200, y2 = 200,
            imageWidth = 150, imageHeight = 150;

        changeAvatar.save = function(){

            var saveSrc = newSrc+"?w="+ imageWidth +"&h="+ imageHeight +"&s="+x1+","+y1+","+x2+","+y2;
            userClient.updateUserAvatar(saveSrc);
            $rootScope.base.user.avatar = $rootScope.base.avatarBuffer = saveSrc;

            $("#dialog-message").dialog('close');
            $state.go('profile');

            $('.preview-container').addClass('hidden');

            $('.ui-dialog').each(function(){
                if($(this).attr('aria-describedby') == 'dialog-message'){
                    $(this).detach();
                }
            });
        };

        changeAvatar.back = function(){
            $('.load-avatar').find('.file-label').html("").
                removeClass("hide-placeholder selected").
                attr("data-title","Загрузить аватар");

            $('.loadAvatar-area').removeClass('hidden');
            $('.crop-area').addClass('hidden');

            $('.preview-container').addClass('hidden');
            $('.loading').removeClass('hidden');

            $('#image-for-crop').detach();
            $('.jcrop-holder').detach();

            $('.btn-save-avatar').before('<img src="#" id="image-for-crop" alt="#" class="hidden" />');

        };

        initModalAndCrop();

        function initModalAndCrop() {

            $("#dialog-message").removeClass('hide').dialog({
                modal: true,
                width: 504,
                position: ['center', 100],
                title_html: false,
                closeText: "",
                create: function (event, ui) {

                    $('.load-avatar input').ace_file_input({
                        style: 'well',
                        btn_choose: 'Загрузить аватар',
                        btn_change: null,
                        no_icon: '',
                        droppable: true,
                        thumbnail: 'large',
                        icon_remove: null
                    }).on('change', function () {
                        var imageForCrop = $('#image-for-crop');

                        $('.loadAvatar-area,.load-avatar-error').addClass('hidden');
                        $('.crop-area').removeClass('hidden');

                        setTimeout(saveNewAva, 1000);

                        function saveNewAva() {
                            var avaImg = $('.load-avatar').find('.file-label img');
                            if(parseInt(avaImg.css('width')) < 200 || parseInt(avaImg.css('height')) < 200){

                                $('.loading,.btn-save-avatar').addClass('hidden');

                                $('.load-avatar-error')
                                    .text('Изображение должно быть не менее 200px в ширину и высоту. Попробуйте загрузить другое изображение.').removeClass('hidden');

                            }else {
                                $('.loading').addClass('hidden');

                                var bg = avaImg.css('background-image'),
                                    src = avaImg.attr('src');

                                newSrc = fileClient.saveFileContent(bg, true);

                                $('#preview').attr('src', newSrc);

                                imageForCrop.attr('src', newSrc);
                                imageForCrop.css({'max-width': '500px', 'max-height': '500px'});

                                imageForCrop.Jcrop({
                                    aspectRatio: 1,
                                    setSelect: [ 200, 200, 50, 50 ],
                                    onChange: updateCoords,
                                    onSelect: updateCoords
                                }).removeClass('hidden');

                                $('.preview-container,.btn-save-avatar').removeClass('hidden');

                            }
                        }

                        function updateCoords(c) {
                            imageWidth = imageForCrop.width();
                            imageHeight = imageForCrop.height();

                            x1 = c.x;
                            y1 = c.y;
                            x2 = c.x2;
                            y2 = c.y2;
                            $('#x').val(c.x);
                             $('#y').val(c.y);
                             $('#w').val(c.w);
                             $('#h').val(c.h);

                             $('#x2').val(c.x2);
                             $('#y2').val(c.y2);

                            var rx = 150 / c.w; // 150 - размер окна предварительного просмотра
                            var ry = 150 / c.h;

                            $('#preview').css({
                                width: Math.round(rx * imageWidth) + 'px',
                                height: Math.round(ry * imageHeight) + 'px',
                                marginLeft: '-' + Math.round(rx * c.x) + 'px',
                                marginTop: '-' + Math.round(ry * c.y) + 'px'
                            });
                        };
                    });

                },
                close: function (event, ui) {
                    $state.go('profile');

                    $('.preview-container').addClass('hidden');

                    $('.ui-dialog').each(function(){
                        if($(this).attr('aria-describedby') == 'dialog-message'){
                            $(this).detach();
                        }
                    });
                }
            });
        }
    };

module.exports = [ '$state','$rootScope', changeAvatarCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\contacts.js":[function(require,module,exports){

var contactsCtrl = function($rootScope) {
    var ctrl = this;

    $rootScope.base.isFooterBottom = true;

    ctrl.isAuth = authClient.checkIfAuthorized();

    if (ctrl.isAuth){
        ctrl.user = userClient.getShortUserInfo();
        ctrl.user_name = ctrl.user.firstName+" "+ctrl.user.lastName;
        ctrl.contacts = userClient.getUserContacts();
    }

    ctrl.send = function($event){
        $event.preventDefault();
        var email,name,
            content = ctrl.content;

        if(ctrl.isAuth){
            email = ctrl.contacts.email;
            name = ctrl.user_name;
        }else{
            email = ctrl.email;
            name = ctrl.name;
        }

        messageClient.sendInfoEmail(email,name,content);
        ctrl.isSend = true;
        ctrl.content = "";
        //console.log(email,name,content);
    };

    var oldTextLength = 0;

    $('.content').keyup(function(event) {

        var el = event.target,
            clientHeight = el.clientHeight,
            scrollHeight = el.scrollHeight,
            textLength = el.textLength,
            clientWidth = el.clientWidth,
            textLengthPX, newHeight, removeRowCount,
            defaultHeight, newRowCount;

        defaultHeight = 100;

        /*
         Исходные данные:
         На один символ приходится ~8px в ширину
         Высота строки текста ~14px

         * Здесь выполняем такие действия :
         * 1) Считаем длину текста в пикселях
         * 2) Определяем целое количестов строк, которые удалили
         * 3) Определям новую высоту с учетом высоты удаленного текста
         * */

        if (scrollHeight > clientHeight) {

            el.style.height = scrollHeight + 'px';
        } else if (scrollHeight > defaultHeight) {
            textLengthPX = (parseInt(oldTextLength) - textLength) * 8; // 1
            if (textLengthPX > clientWidth) {
                removeRowCount = Math.floor(textLengthPX / clientWidth); // 2
                newHeight = parseInt(event.target.style.height) - removeRowCount * 14; // 3
                newHeight > defaultHeight ? event.target.style.height = newHeight + "px" :
                    event.target.style.height = defaultHeight + 'px';

            } else {
                el.style.height = scrollHeight - 6 + 'px';

            }
        } else {
            el.style.height = defaultHeight + 'px';
        }
        oldTextLength = textLength;


        $('.ng-cloak').removeClass('ng-cloak');
    });

    angular.element($('.coming-soon')).css({'min-height': $(window).height()-105});

    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', contactsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\counters.js":[function(require,module,exports){

var countersCtrl = function($rootScope,$modal,$counters) {
        var counters = this;
        //counters = $scope;

        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.base.pageTitle = "Счетчики";
        $rootScope.base.isFooterBottom = true;

        counters.counters = $counters.getCounters;
        counters.typesArray = [];
        var typesEnumLength = 6;

        var counterService = utilityClient.getCounterService();

        var currentDate = (new Date()).getDate();

        counters.endDateOfMonth = counterService.endDateOfMonth;
        counters.startDateOfMonth = counterService.startDateOfMonth;

    console.log(counterService.startDateOfMonth+" " +
        counterService.endDateOfMonth+" "+
        counterService.infoProvided);

    var isNow;
    if(counterService.endDateOfMonth > counterService.startDateOfMonth){
        isNow = (currentDate >= counterService.startDateOfMonth &&
            currentDate <= counterService.endDateOfMonth);
    }else{
        isNow = (currentDate <= counterService.endDateOfMonth ||
            currentDate >= counterService.startDateOfMonth);
    }

        if(isNow ){

            if(counterService.infoProvided){
                // с 14 по 24, отправлено
                counters.state = 2;
            }else{
                // с 14 по 24, не отправлено
                counters.state = 1;
            }
        }else{
            // время с 24 по 14 число
            counters.state = 0;
        }


    //console.log('state '+counters.state);

        for(var i = 0; i < typesEnumLength; i++){
            counters.typesArray[i] = {};
            counters.typesArray[i].type = i;
            counters.typesArray[i].typeString = $counters.getTypeString(i);
        }

        var countersLength = counters.counters.length;
        for(var i = 0; i < countersLength; i++){
            counters.counters[i].currentValue = "";
            counters.counters[i].isEdit = false;
            counters.counters[i].wasEdit = false;
            counters.counters[i].typeString = $counters.getTypeString(counters.counters[i].type);
        }

        counters.save = function(){

            var countersLen = counters.counters.length,
                currentValue,
                date, isCanSave = true;


            for(var i = 0; i < countersLen; i++){
                if(!counters.counters[i].currentValue) {
                    isCanSave= false;
                    break;
                }
            }

            if(isCanSave) {
                counters.errorText = "";
                for (i = 0; i < countersLen; i++) {
                    if (counters.counters[i].wasEdit) {
                        date = Date.parse(new Date()) / 1000;
                        currentValue = counters.counters[i].currentValue;

                        if (!currentValue) currentValue = 0;
                        utilityClient.setCurrentCounterValue(counters.counters[i].id, currentValue, date);
                        counters.counters[i].lastValue = currentValue;
                        counters.counters[i].currentValue = "";
                        counters.state = 2;
                    }
                }
            }else{
                counters.errorText = "Необходимо указать значения всех счтечиков";
            }

        };

        counters.addCounter = function(){
            var counter = new com.vmesteonline.be.thrift.utilityservice.Counter();
            counter.id = utilityClient.registerCounter(counter);
            counter.isEdit = true;
            counters.counters.push(counter);
        };
        counters.editCounter = function(counter){
            counter.isEdit = true;
        };
        counters.saveEditedCounter = function(counter){
            //alert(counter.id+" "+counter.number+" "+counter.type+" "+counter.location);
            /*for(var p in counter){
                alert(counter[p]+" "+p);
            }*/

            var correctCounter = new com.vmesteonline.be.thrift.utilityservice.Counter();
            correctCounter.id = counter.id;
            correctCounter.location = counter.location;
            correctCounter.type = counter.type;
            correctCounter.number = counter.number;
            correctCounter.lastValue = counter.lastValue;

            utilityClient.updateCounter(correctCounter);
            counter.isEdit = false;
            counter.typeString = $counters.getTypeString(counter.type);
        };
        counters.removeCounter = function(counter){

            var modal = $modal.open({
                templateUrl: 'myModalContent.html',
                controller: 'ModalInstanceCtrl',
                windowClass: 'modal-remove-counter',
                size: 'sm'
            });

            modal.result.then(function () {

                utilityClient.removeCounter(counter.id);
                var countersLength = counters.counters.length;
                for(var i = 0; i< countersLength; i++){

                    if(counter.id == counters.counters[i].id){
                        counters.counters.splice(i,1);
                    }

                }

            });

        };

        counters.countersConfirm = function(){

            var newServicesStatuses = [];
            newServicesStatuses['11'] = true;

            userClient.updateUserServices(newServicesStatuses);

            $rootScope.base.me.countersConfirmed = true;
        };

        counters.cancel = function(){
            counters.state = 1;
        };

        counters.toggleNotification = function(){
           var newServicesStatuses = [];

          if ($rootScope.base.me.countersNotification ){
              $rootScope.base.me.countersNotification = newServicesStatuses['12'] = false;
          }else{
              $rootScope.base.me.countersNotification = newServicesStatuses['12'] = true;
          }

            userClient.updateUserServices(newServicesStatuses);

        };

    counters.inputCounter = function(counter){
        counter.wasEdit = true;
        counter.currentValue = parseInt(counter.currentValue);
     };

        angular.element($('.counters')).css({'min-height': $(window).height()-105});

    };

module.exports = [ '$rootScope','$modal','$counters', countersCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\countersHistory.js":[function(require,module,exports){

var countersHistoryCtrl = function($scope,$stateParams,$rootScope,$counters) {

        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.base.pageTitle = "История показаний счетчика";
        $rootScope.base.isFooterBottom = true;

        var counters = $counters.getCounters,
            countersLen = counters.length;
        for(var i = 0; i < countersLen; i++){
            if(counters[i].id == $stateParams.counterId){
                $scope.currentCounter = counters[i];
                $scope.currentCounter.typeString = $counters.getTypeString(counters[i].type);
            }
        }

        var now = Date.parse(new Date())/1000,
            history = utilityClient.getCounterHistory($stateParams.counterId,0,now),
            counter = 0;

        $scope.history = [];
        $scope.counterName = $stateParams.counterName;

        for(var p in history){
            $scope.history[counter] = {};
            $scope.history[counter].date = p;
            $scope.history[counter].val = history[p];
            counter++;
        }

        angular.element($('.counters')).css({'min-height': $(window).height()-105});

    };

module.exports = [ '$state','$stateParams','$rootScope','$counters', countersHistoryCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\dialog.js":[function(require,module,exports){

var dialogCtrl = function($rootScope,$stateParams,$state) {

        initFancyBox($('.dialog'));
        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.base.isFooterBottom = false;
        $rootScope.base.lastLoadedId = 0;
        $rootScope.currentPage = 'dialog-single';
        $rootScope.base.currentDialogId = $stateParams.dialogId;
        $rootScope.currentRubric = null;

        var dialog = this,
            lastLoadedId = 0,
            loadedLength = 20;

        try {
            var currentDialog = dialogClient.getDialogById($stateParams.dialogId);

            var currentDialogLength = currentDialog.length;

            dialog.isDialog = true;
            dialog.attachId = '000';
            dialog.dialogId = $stateParams.dialogId;

            dialog.users = currentDialog.users;
            var dialogUsersLength = dialog.users.length;
            for (var i = 0; i < dialogUsersLength; i++) {
                //console.log(dialog.users[i].id+" "+$rootScope.base.me.id);
                if (dialog.users[i] && (dialog.users[i].id == $rootScope.base.me.id)) {
                    dialog.users.splice(i, 1);
                }
            }

            if ($stateParams.dialogId) {
                $rootScope.base.setPrivateMessages(dialog.dialogId,loadedLength);

                dialog.privateMessages = $rootScope.base.privateMessages;
            }

            //dialog.messageText = TEXT_DEFAULT_1;
            $rootScope.base.initStartParamsForCreateMessage(dialog);

        }catch(e){
            $state.go('dialogs');
        }

        var lastLoadedIdFF;
        dialog.addMoreItems = function(){
            var buff = dialogClient.getDialogMessages($stateParams.dialogId,0,loadedLength,$rootScope.base.lastLoadedId);
            if(buff) {
                var buffLength = buff.length;

                if(buffLength != 0) {

                    $rootScope.base.lastLoadedId = buff[buffLength - 1].id;

                    if(lastLoadedIdFF != $rootScope.base.lastLoadedId) {
                        for (var i = 0; i < buffLength; i++) {
                            buff[i].authorProfile = userClient.getUserProfile(buff[i].author);
                        }
                        dialog.privateMessages =
                            $rootScope.base.privateMessages = $rootScope.base.privateMessages.concat(buff);
                    }

                    lastLoadedIdFF = $rootScope.base.lastLoadedId;
                }
            }

        };

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$stateParams','$state', dialogCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\dialogs.js":[function(require,module,exports){

var dialogsCtrl =  function($rootScope,$state){
        $rootScope.isTopSearchShow = false;
        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.leftbar.tab = 0;
        $rootScope.base.isFooterBottom = false;
        $rootScope.currentPage = "dialogs";
        $rootScope.currentRubric = null;

        resetPages($rootScope.base);
        $rootScope.base.privateMessagesIsActive = true;
        $rootScope.base.pageTitle = "Личные сообщения";

        resetAceNavBtns($rootScope.navbar);
        $rootScope.navbar.privateMessagesBtnStatus = "active";

        $rootScope.base.privateMessagesLoadStatus = "isLoaded";

        $rootScope.isNewPrivateMessageAdded = false;

        var dialogs = this;

        dialogs.dialogsList = dialogClient.getDialogs(0);
        var dialogsListLength = dialogs.dialogsList.length;
        for(var i = 0; i < dialogsListLength; i++){
            (dialogs.dialogsList[i].users[0].id != $rootScope.base.me.id) ?
                dialogs.dialogsList[i].anotherUser = dialogs.dialogsList[i].users[0] :
                dialogs.dialogsList[i].anotherUser = dialogs.dialogsList[i].users[1];

            dialogs.dialogsList[i].newMessagesCount = 0;
            console.log("dialog "+$rootScope.newMessages.length);
            if($rootScope.newMessages.length > 0) {
                var newMessagesLength = $rootScope.newMessages.length;
                for(var j = 0; j < newMessagesLength; j++) {
                    if (dialogs.dialogsList[i].id == $rootScope.newMessages[j].dialogId) {
                        dialogs.dialogsList[i].newMessagesCount = $rootScope.newMessages[j].count;
                    }
                }
            }
        }

        dialogs.goToSingleDialog = function(dialogId){
            var usersInfoArray = [],
                usersInfoLength,
                usersId = [];
            for(var i = 0; i < dialogsListLength; i++){
                if(dialogs.dialogsList[i].id == dialogId){
                    usersInfoArray = dialogs.dialogsList[i].users;
                }
            }
            if(usersInfoArray){
                usersInfoLength = usersInfoArray.length;
                for(var i = 0; i < usersInfoLength; i++){
                    usersId[i] = usersInfoArray[i].id
                }
            }
            //$rootScope.currentDialog = dialogClient.getDialog(usersId);
            $state.go('dialog-single',{ dialogId : dialogId});
        };

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$state', dialogsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\important.js":[function(require,module,exports){

var importantCtrl = function($rootScope) {

        $rootScope.setTab(4);
        $rootScope.base.showAllGroups();
        $rootScope.base.isFooterBottom = false;
        $rootScope.base.pageTitle = "Важно";
        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.currentRubric = null;

        var important = this,
            lastLoadedId = 0,
            loadedLength = 10;

        $rootScope.COMMENTS_DEFAULT_COUNT = 4;
        important.selectedGroupInTop = $rootScope.currentGroup;

        /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantTopics($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

        //important.topics = messageClient.getImportantTopics($rootScope.currentGroup.id);
        important.wallItems = messageClient.getImportantNews($rootScope.currentGroup.id,0,0,0);

        important.attachId = "0";
        //$rootScope.base.initStartParamsForCreateTopic(important);

        important.message = {};

        important.message.content = important.message.default = TEXT_DEFAULT_1;

        $rootScope.importantChangeGroup = function(groupId){

            important.wallItems = messageClient.getImportantNews(groupId, 0, loadedLength);

            if(important.wallItems.length) {
                initWallItem(important.wallItems);

                //lastLoadedId = lenta.wallItems[important.wallItems.length-1].topic.id;
            }

        };

        var wallItemsLength;
        important.wallItems ? wallItemsLength = important.wallItems.length :
            wallItemsLength = 0;

        if(wallItemsLength == 0) $rootScope.base.mainContentTopIsHide = true;

        if(wallItemsLength != 0) lastLoadedId = important.wallItems[wallItemsLength-1].topic.id;

        initWallItem(important.wallItems);

        $rootScope.selectGroupInDropdown_important = function(groupId){
            important.selectedGroup = $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
        };

        important.goToAnswerInput = function(event){
            event.preventDefault();
        };

        var initFlagsArray = [];
        important.showAnswerInput = function(event,wallItem,wallMessage){
            event.preventDefault();

            /*wallItem.answerShow ?
             wallItem.answerShow = false :*/
            wallItem.answerShow = true ;
            wallItem.isFocus = true ;

            if(wallMessage){
                var authorName;
                wallMessage.userInfo ?
                    authorName = wallMessage.userInfo.firstName :
                    authorName = wallMessage.authorName.split(' ')[0];
                wallItem.commentText = authorName+", ";
            }else{
                wallItem.commentText = "";
            }

            if(!initFlagsArray[wallItem.topic.id]) {
                // инифицализацмю AttachImage нужно делать только один раз для каждого сообщения
                initFlagsArray[wallItem.topic.id] = true;
            }

        };

        $rootScope.wallChangeGroup = function(groupId){

            important.wallItems = messageClient.getWallItems(groupId, 0, loadedLength);

            if(important.wallItems.length) {
                initWallItem(important.wallItems);

                lastLoadedId = important.wallItems[important.wallItems.length-1].topic.id;
            }

        };

        function initWallItem(wallItems){
            wallItemsLength = wallItems.length;
            for(var i = 0; i < wallItemsLength; i++){

                $rootScope.base.initStartParamsForCreateMessage(wallItems[i]);

                $rootScope.base.initStartParamsForCreateTopic(wallItems[i].topic);

                //  wallItems[i].topic.message.groupId сейчас не задана почему-то
                wallItems[i].label = getLabel($rootScope.base.groups,wallItems[i].topic.groupType);

                wallItems[i].tagColor = getTagColor(wallItems[i].label);

                wallItems[i].isOpen = false;

                if(wallItems[i].topic.message.important == 1){
                    wallItems[i].topic.message.importantText = 'Снять метку "Важное"';
                }else{
                    wallItems[i].topic.message.importantText = 'Пометить как "Важное"';
                }

                if(wallItems[i].topic.message.type == 1){

                    wallItems[i].topic.lastUpdateEdit = getTiming(wallItems[i].topic.lastUpdate);

                }else if(wallItems[i].topic.message.type == 5){

                    wallItems[i].topic.message.createdEdit = getTiming(wallItems[i].topic.message.created);
                    wallItems[i].topic.authorName = getAuthorName(wallItems[i].topic.userInfo);
                    wallItems[i].topic.metaType = "message";

                    var mesLen;
                    wallItems[i].messages ?
                        mesLen = wallItems[i].messages.length:
                        mesLen = 0;

                    for(var j = 0; j < mesLen; j++){
                        wallItems[i].messages[j].createdEdit = getTiming(wallItems[i].messages[j].created);
                        wallItems[i].messages[j].authorName = getAuthorName(wallItems[i].messages[j].userInfo);
                        wallItems[i].messages[j].isEdit = false;

                        $rootScope.base.initStartParamsForCreateMessage(wallItems[i].messages[j]);
                    }

                    (mesLen >= $rootScope.COMMENTS_DEFAULT_COUNT) ?
                        wallItems[i].bufferMessages = wallItems[i].messages.slice(mesLen-$rootScope.COMMENTS_DEFAULT_COUNT):
                        wallItems[i].bufferMessages = wallItems[i].messages;



                    if(wallItems[i].topic.poll != null){
                        //значит это опрос
                        setPollEditNames(wallItems[i].topic.poll);

                        wallItems[i].topic.metaType = "poll";
                    }
                }
            }
        }

        important.toggleComments = function(event,wallItem){
            event.preventDefault();

            var mesLen = wallItem.messages.length;

            if(wallItem.isOpen){
                wallItem.isOpen = false;

                (mesLen >= $rootScope.COMMENTS_DEFAULT_COUNT) ?
                    wallItem.bufferMessages = wallItem.messages.slice(mesLen-$rootScope.COMMENTS_DEFAULT_COUNT):
                    wallItem.bufferMessages = wallItem.messages;

                //wallItem.bufferMessages = wallItem.messages.slice(mesLen-important.COMMENTS_DEFAULT_COUNT);
            }else{
                wallItem.isOpen = true;
                wallItem.bufferMessages = wallItem.messages;
            }
        };

        initFancyBox($('.forum'));

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope', importantCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\index.js":[function(require,module,exports){
'use strict';

module.exports = angular.module('VOControllers', ['ui.select2','infinite-scroll','ngSanitize','yaMap','ui.bootstrap'])

    .controller('baseCtrl', require('./base.js'))

    .controller('aboutCtrl', require('./about.js'))
    .controller('advertsCtrl', require('./adverts.js'))
    .controller('advertsSingleCtrl', require('./advertsSingle.js'))
    .controller('blogCtrl', require('./blog.js'))
    .controller('changeAvatarCtrl', require('./changeAvatar.js'))
    .controller('contactsCtrl', require('./contacts.js'))
    .controller('countersCtrl', require('./counters.js'))
    .controller('countersHistoryCtrl', require('./countersHistory.js'))
    .controller('dialogCtrl', require('./dialog.js'))
    .controller('dialogsCtrl', require('./dialogs.js'))
    .controller('importantCtrl', require('./important.js'))
    .controller('leftBarCtrl', require('./leftBar.js'))
    .controller('wallCtrl', require('./wall.js'))
    .controller('mainContentTopCtrl', require('./mainContentTop.js'))
    .controller('mapsCtrl', require('./maps.js'))
    .controller('modalInstanceCtrl', require('./modalInstance.js'))
    .controller('navbarCtrl', require('./navbar.js'))
    .controller('nearbyCtrl', require('./nearby.js'))
    .controller('nearbySingleCtrl', require('./nearbySingle.js'))
    .controller('neighboursCtrl', require('./neighbours.js'))
    .controller('profileCtrl', require('./profile.js'))
    .controller('rubricsCtrl', require('./rubrics.js'))
    .controller('rubricsSingleCtrl', require('./rubricsSingle.js'))
    .controller('setInfoCtrl', require('./setInfo.js'))
    .controller('settingsCtrl', require('./settings.js'))
    .controller('talksCtrl', require('./talks.js'))
    .controller('talksSingleCtrl', require('./talksSingle.js'))
    .controller('unconfirmedCtrl', require('./unconfirmed.js'))
    .controller('wallSingleCtrl', require('./wallSingle.js'))

    // business
    .controller('cabinetCtrl', require('./business/cabinet.js'))
    .controller('editCtrl', require('./business/edit.js'))
    .controller('statisticCtrl', require('./business/statistic.js'))
;
},{"./about.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\about.js","./adverts.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\adverts.js","./advertsSingle.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\advertsSingle.js","./base.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\base.js","./blog.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\blog.js","./business/cabinet.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\cabinet.js","./business/edit.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\edit.js","./business/statistic.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\business\\statistic.js","./changeAvatar.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\changeAvatar.js","./contacts.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\contacts.js","./counters.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\counters.js","./countersHistory.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\countersHistory.js","./dialog.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\dialog.js","./dialogs.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\dialogs.js","./important.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\important.js","./leftBar.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\leftBar.js","./mainContentTop.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\mainContentTop.js","./maps.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\maps.js","./modalInstance.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\modalInstance.js","./navbar.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\navbar.js","./nearby.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\nearby.js","./nearbySingle.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\nearbySingle.js","./neighbours.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\neighbours.js","./profile.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\profile.js","./rubrics.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\rubrics.js","./rubricsSingle.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\rubricsSingle.js","./setInfo.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\setInfo.js","./settings.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\settings.js","./talks.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\talks.js","./talksSingle.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\talksSingle.js","./unconfirmed.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\unconfirmed.js","./wall.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\wall.js","./wallSingle.js":"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\wallSingle.js"}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\leftBar.js":[function(require,module,exports){

var leftBarCtrl = function($rootScope,$state) {

    $rootScope.setTab = function(newValue){

        $rootScope.leftbar.tab = newValue;
        $rootScope.isTopSearchShow = true;
        resetPages($rootScope.base);
        resetAceNavBtns($rootScope.navbar);

        switch(newValue){
            case 1:
                $rootScope.base.mainContentTopIsHide = false;
                $rootScope.base.lentaIsActive = true;
                $rootScope.currentPage = 'lenta';
                $rootScope.base.pageTitle = "Новости";
                break;
            case 2:
                $rootScope.base.mainContentTopIsHide = false;
                $rootScope.base.isTalkTitles = true;
                $rootScope.base.talksIsActive = true;
                $rootScope.currentPage = 'talks';
                $rootScope.base.pageTitle = "Обсуждения";
                break;
            case 3:
                $rootScope.base.mainContentTopIsHide = false;
                $rootScope.base.isAdvertsTitles = true;
                $rootScope.base.advertsIsActive = true;
                $rootScope.currentPage = 'adverts';
                $rootScope.base.pageTitle = "Объявления";
                break;
            case 4:
                $rootScope.base.mainContentTopIsHide = false;
                $rootScope.base.importantIsActive = true;
                $rootScope.currentPage = 'important';
                $rootScope.base.pageTitle = "Важные сообщения";
                break;
            case 5:
                $rootScope.base.mainContentTopIsHide = false;
                $rootScope.base.importantIsActive = true;
                $rootScope.currentPage = 'nearby';
                $rootScope.base.pageTitle = "Рядом";
                break;
            default :
                break;
        }

    };

    $rootScope.isSet = function(number){
        return $rootScope.leftbar.tab === number;
    };

    $rootScope.setRubric = function(rubric){

            $rootScope.currentRubric = rubric;
            $rootScope.selRubricName = $rootScope.currentRubric.visibleName;
        if(!rubric) {
            $rootScope.currentRubric = {};
            $rootScope.selRubricName = null;
        }

        if($state.current.name != 'main') {
            var st = $state.get('main');
            st.rubricId = rubric.id;
            $state.go('main');
        }else {
            $rootScope.wallChangeRubric($rootScope.currentRubric.id);
        }

    }
  };

module.exports = [ '$rootScope','$state', leftBarCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\mainContentTop.js":[function(require,module,exports){

var mainContentTopCtrl = function($rootScope, $state) {

        var topCtrl = this;

        topCtrl.groups = userClientGroups;// ? userClientGroups.reverse() : userClient.getUserGroups().reverse();
        var groups = $rootScope.groups = topCtrl.groups,
            groupsLength = groups.length;

        for(var i = 0; i < groupsLength; i++){
            groups[i].isShow = true;
            if(groups[i].id == $rootScope.currentGroup.id) groups[i].selected = true;
        }

        topCtrl.isSet = function(groupId){
            //return groupId ===
        };

        $rootScope.selectGroup = function(group){
            //var groupId = group.id;

            if(group.id == 0){

                $state.go('set-info');

            }else {
                if($state.current.name == 'set-info') {
                    localStorage.setItem('VO_setInfo_groupId',group.id);
                    $state.go('main');
                }

                for (var i = 0; i < groupsLength; i++) {
                    groups[i].selected = false;
                }

                group.selected = true;

                $rootScope.currentGroup = group;
                $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(group.id);

                //$rootScope.importantTopics = messageClient.getImportantNews(group.id);

                if ($rootScope.currentPage == 'lenta') {
                    $rootScope.wallChangeGroup(group.id);
                    $rootScope.selectGroupInDropdown_lenta(group.id);
                } else if ($rootScope.currentPage == 'talks') {
                    $rootScope.talksChangeGroup(group.id);
                    $rootScope.selectGroupInDropdown_talks(group.id);
                } else if ($rootScope.currentPage == 'adverts') {
                    $rootScope.advertsChangeGroup(group.id);
                    $rootScope.selectGroupInDropdown_adverts(group.id);
                } else if ($rootScope.currentPage == 'neighbours') {
                    $rootScope.neighboursChangeGroup(group.id);
                } else if ($rootScope.currentPage == 'maps') {
                    $rootScope.mapsChangeGroup(group.id);
                } else if ($rootScope.currentPage == 'important') {
                    $rootScope.importantChangeGroup(group.id);
                }

                localStorage.setItem('groupId', group.id);
                //$rootScope.currentGroup = $rootScope.base.selectGroupInDropdown(group.id);
            }
        };

        $rootScope.showCreateTopic = function(event){
            event.preventDefault();

            $rootScope.base.createTopicIsHide ? $rootScope.base.createTopicIsHide = false : $rootScope.base.createTopicIsHide = true;

        };

        $('.ng-cloak').removeClass('ng-cloak');
    };

module.exports = [ '$rootScope','$state', mainContentTopCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\maps.js":[function(require,module,exports){

var mapsCtrl = function($rootScope) {
        var maps = this;

        $rootScope.currentPage = "maps";
        $rootScope.isTopSearchShow = false;
        $rootScope.base.mainContentTopIsHide = false;
        $rootScope.leftbar.tab = 0;
        $rootScope.base.pageTitle = "Карты";

        resetPages($rootScope.base);
        $rootScope.base.mapsIsActive = true;

        resetAceNavBtns($rootScope.navbar);
        $rootScope.navbar.mapsBtnStatus = "active";

        $rootScope.base.mapsLoadStatus = "isLoaded";

        showGroupOverBuilding($rootScope.groups);
        //$rootScope.groups[0].isShow = false;
        //$rootScope.groups[1].selected = true;

        /*if($rootScope.currentGroup.id == $rootScope.groups[0].id){
            $rootScope.currentGroup = $rootScope.groups[1];
        }*/
    $rootScope.currentGroup = userClientGroups[3];

        $rootScope.base.isFooterBottom = true;

        var yaMap;
        maps.afterMapInit=function(nMap){
            yaMap = nMap;
        };

        maps.color = MAP_COLOR;

        //maps.url = userClient.getGroupMap($rootScope.currentGroup.id,MAP_COLOR);

        var location = userClient.getGroupView($rootScope.currentGroup.id);

        var setMap = function(location){

            maps.center = [location.longitude,location.latitude];

            if (yaMap) {
                ($rootScope.currentGroup.type == 4) ? yaMap.setZoom(17) : yaMap.setZoom(16); ;
            }else{
                ($rootScope.currentGroup.type == 4) ? maps.zoom = 17 : maps.zoom = 16 ;
            }

            maps.baloon = {
                // Геометрия = тип объекта + географические координаты объекта
                geometry: {
                    // Тип геометрии - точка
                    type: 'Point',
                    // Координаты точки.
                    coordinates: maps.center
                },
                // Свойства
                properties: {
                    hintContent: "Я здесь"
                }
            };

            maps.radius = {
                geometry: {
                    type: 'Circle',
                    coordinates: maps.center,
                    radius: location.radius
                },
                properties: {
                }
            };

        };

        setMap(location);

        $rootScope.mapsChangeGroup = function(groupId){
            var location = userClient.getGroupView(groupId);

            setMap(location);
        };
        //$rootScope.selectGroup(getBuildingGroup($rootScope.currentGroup));

        angular.element($('.maps.page')).css({'min-height': $(window).height()-175}); 

    };

module.exports = [ '$rootScope', mapsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\modalInstance.js":[function(require,module,exports){

var modalInstanceCtrl = function($scope, $modalInstance) {
        $scope.ok = function () {
            $modalInstance.close();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

module.exports = [ '$scope','$$modalInstance', modalInstanceCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\navbar.js":[function(require,module,exports){

var navbarCtrl = function($rootScope) {

        this.privateMessagesBtnStatus = "";
        $rootScope.navbar = this;

        this.logout = function(event){
            event.preventDefault();

            localStorage.removeItem('groupId');
            localStorage.removeItem('VO_is_business');
            authClient.logout();

            document.location.replace("/login");

        };

        //$('.ng-cloak').removeClass('ng-cloak');

  };

module.exports = [ '$rootScope', navbarCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\nearby.js":[function(require,module,exports){

var nearbyCtrl = function($rootScope) {
    var nearby = this;

    var groupType = com.vmesteonline.be.thrift.GroupType.NEIGHBORS;
    nearby.businessList = businessClient.getBusinessList(groupType,0);

    $rootScope.base.isFooterBottom = true;
    $rootScope.base.pageTitle = "Рядом";
    $rootScope.base.talksIsActive = $rootScope.base.advertsIsActive = false;
    showGroupOverBuilding($rootScope.groups);
    $rootScope.currentRubric = null;

    nearby.isAuth = authClient.checkIfAuthorized();

    if(nearby.isAuth){
        //me = userClient.getUserProfile();
        //$('.anonName').removeClass('hidden');
    }

    nearby.posts = messageClient.getBusinessTopics(0,1000);

    if(nearby.posts.topics) {
        var len = nearby.posts.topics.length;
        for (var i = 0; i < len; i++) {
            nearby.posts.topics[i].isCommentShow = false;
            nearby.posts.topics[i].isInputShow = false;
            nearby.posts.topics[i].short = nearby.posts.topics[i].message.content.split(';')[0];
        }
    }

    angular.element($('.nearby')).css({'min-height': $(window).height()-110});

    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', nearbyCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\nearbySingle.js":[function(require,module,exports){

var nearbySingleCtrl =  function($rootScope,$stateParams) {
    var nearby = this,
        businessId;

    if ($stateParams.nearbyId && $stateParams.nearbyId != 0){
        businessId = $stateParams.nearbyId;
    }

    nearby.info = businessClient.getBusinessDescription(businessId);
    nearby.info.fullInfo = nearby.info.fullInfo.replace('\n','<br>');
    nearby.wallItem = businessClient.getWallItem(nearby.info.id);

    $rootScope.base.isFooterBottom = true;
    $rootScope.base.pageTitle = "Рядом";

    nearby.isAuth = authClient.checkIfAuthorized();

    if(nearby.isAuth){
        //me = userClient.getUserProfile();
        //$('.anonName').removeClass('hidden');
    }

    nearby.posts = messageClient.getBusinessTopics(0,1000);

    if(nearby.posts.topics) {
        var len = nearby.posts.topics.length;
        for (var i = 0; i < len; i++) {
            console.log(nearby.posts.topics[i].id,parseInt(businessId));
            if(nearby.posts.topics[i].id == parseInt(businessId)){
                nearby.posts.topics[i].isCommentShow = true;
                nearby.posts.topics[i].isInputShow = true;
                nearby.posts.topics[i].full = nearby.posts.topics[i].message.content.split(';')[1];

                nearby.post = nearby.posts.topics[i];
                nearby.post.fullLink = '/'+nearby.posts.topics[i].full;
                console.log(nearby.post);
            }
        }
    }

    nearby.toggleComm = function($event,post){
        $event.preventDefault();

        if (post.isCommentShow){
            post.isCommentShow = false;

        }else{
            post.isCommentShow = true;

            if(!post.comments) {
                post.comments = messageClient.getMessagesAsList(post.id, 8, 0, false, 1000).messages;
                console.log('finish');
            }
        }

    };

    nearby.toggleInput = function($event,post){
        $event.preventDefault();

        post.isInputShow ? post.isInputShow = false : post.isInputShow = true;

        console.log('input',post.isInputShow);

    };

    nearby.sendComm = function($event,post){
        $event.preventDefault();
        var message = new com.vmesteonline.be.thrift.messageservice.Message();

        message.id = 0;
        message.topicId = nearby.info.id; //post.id;
        message.type = com.vmesteonline.be.thrift.messageservice.MessageType.WALL;//8;
        message.groupId = 0;
        message.content = post.commenting;
        message.topicId = nearby.wallItem.topic.id;
        message.parentId = 0;
        message.created = Date.parse(new Date())/1000;
        post.commenting = "";

        if(!nearby.isAuth){
            message.anonName = post.anonName;
        }else{
            message.anonName = "";
        };

        console.log('post',message);
        //var returnComment = messageClient.postBusinessTopics(message);
        var returnComment = messageClient.postMessage(message);
        console.log('post2',returnComment);


        if(nearby.wallItem.messages && nearby.wallItem.messages.length) {
            nearby.wallItem.messages.push(returnComment);
        }else{
            nearby.wallItem.messages = [];
            nearby.wallItem.messages[0] = returnComment;
        }

    };

    nearby.getTiming = function(messageObjDate){
        var minute = 60*1000,
            hour = minute*60,
            day = hour*24,
            threeDays = day* 3,
            now = Date.parse(new Date()),
            timing = (now - messageObjDate*1000),
            timeTemp;

        if(timing < minute){
            timing = "только что";
        }else if(timing < hour){
            timing = new Date(timing);
            timing = timing.getMinutes()+" мин назад";
        }else if(timing < day){
            timing = new Date(timing);
            timeTemp = timing.getHours();
            if(timeTemp == 1 || timeTemp == 0){
                timing = "1 час назад";
            }else if(timeTemp > 1 && timeTemp < 5){
                timing = timeTemp + " часа назад";
            }else{
                timing = timeTemp + " часов назад";
            }
        }else if(timing < threeDays){
            timing = new Date(timing);
            timeTemp = timing.getDate();
            if(timeTemp == 1){
                timing = timeTemp+" день назад";
            }else{
                timing = timeTemp+" дней назад";
            }
        }else{
            timeTemp = new Date(messageObjDate*1000).toLocaleDateString();
            var arr = timeTemp.split('.');
            if(arr[0].length == 1) arr[0] = "0"+arr[0];
            if(arr[1].length == 1) arr[1] = "0"+arr[1];
            timing = arr[0]+"."+arr[1]+"."+arr[2];
        }

        return timing;
    };


    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope','$stateParams', nearbySingleCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\neighbours.js":[function(require,module,exports){

var neighboursCtrl = function($rootScope,$state) {
        $rootScope.currentPage = "neighbours";
        $rootScope.isTopSearchShow = false;
        $rootScope.leftbar.tab = 0;
        $rootScope.base.showAllGroups();
        $rootScope.base.isFooterBottom = false;

        resetPages($rootScope.base);
        $rootScope.base.mainContentTopIsHide = false;
        $rootScope.base.neighboursIsActive = true;

        resetAceNavBtns($rootScope.navbar);
        $rootScope.navbar.neighboursBtnStatus = "active";
        $rootScope.base.pageTitle = "";

        $rootScope.currentGroup = userClientGroups[3];

        $rootScope.base.neighboursLoadStatus = "isLoaded";

        var neighbours = this;
        neighbours.neighboors = userClient.getNeighboursByGroup($rootScope.currentGroup.id);

        $rootScope.neighboursChangeGroup = function(groupId){
            neighbours.neighboors = userClient.getNeighboursByGroup(groupId);
            initAutoFill();
        };

        neighbours.neighboorsSize = neighbours.neighboors.length;

        function initAutoFill(){
            var data = [],
                neighboursLength = neighbours.neighboors.length;
            for(var i = 0; i < neighboursLength; i++){
                data[i] = {};
                data[i].label = neighbours.neighboors[i].firstName+" "+neighbours.neighboors[i].lastName;
                data[i].value = neighbours.neighboors[i].id;
                data[i].category = "";
            }
            $("#search-neighbours" ).catcomplete({
                delay: 0,
                source: data,
                select: function(event,ui){
                    $state.go('profile',{ 'userId' : ui.item.value});

                }
            });
        }
        initAutoFill();

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$state', neighboursCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\profile.js":[function(require,module,exports){

var profileCtrl = function($rootScope, $stateParams) {

        $rootScope.isTopSearchShow = false;
        $rootScope.leftbar.tab = 0;

        resetPages($rootScope.base);
        $rootScope.base.profileIsActive = true;
        $rootScope.base.isFooterBottom = true;

        resetAceNavBtns($rootScope.navbar);
        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.base.profileLoadStatus = "isLoaded";

        var profile = this, userId;
        profile.isMayEdit = false;

        $("#dialog-message").addClass('hide');

        if ($stateParams.userId && $stateParams.userId != 0 && $stateParams.userId != shortUserInfo.id){
            userId = $stateParams.userId;
            //profile.userContacts = userClient.getUserContactsExt(userId);
        }else{
            userId = 0;
            profile.isMayEdit = true;

            try {
                var location = userClient.getGroupView($rootScope.groups[0].id);

                profile.map = {};
                profile.map.zoom = 17;
                profile.map.center = [location.longitude, location.latitude];

                profile.map.baloon = {
                    // Геометрия = тип объекта + географические координаты объекта
                    geometry: {
                        // Тип геометрии - точка
                        type: 'Point',
                        // Координаты точки.
                        coordinates: profile.map.center
                    },
                    // Свойства
                    properties: {
                        hintContent: "Я здесь"
                    }
                };
            }catch(err){
            }
            //profile.map = userClient.getGroupMap($rootScope.groups[0].id, MAP_COLOR);
            //profile.userContacts = userClient.getUserContacts();
        }

        profile.userProfile = userClient.getUserProfile(userId);

        var isEmptyContacts = false,
            isEmptyFamily = false,
            isEmptyInterests = false,
            isEmptyNotifications = false,
            isEmptyUserInfo = false;

        if(!profile.userProfile.userInfo || !profile.userProfile.userInfo.birthday) isEmptyUserInfo = true;

        if(!profile.userProfile.contacts || (!profile.userProfile.contacts.homeAddress && !profile.userProfile.contacts.mobilePhone &&
            !profile.userProfile.contacts.email)) isEmptyContacts = true;

        if(!profile.userProfile.family || (!profile.userProfile.family.relations
            && !profile.userProfile.family.childs && !profile.userProfile.family.pets)) isEmptyFamily = true;

        if(!profile.userProfile.interests || (!profile.userProfile.interests.userInterests && !profile.userProfile.interests.job)) isEmptyInterests = true;

        if(!profile.userProfile.notifications) isEmptyNotifications = true;

        //alert(isEmptyUserInfo+" "+isEmptyContacts+" "+isEmptyFamily+" "+isEmptyInterests+" "+isEmptyNotifications);
        if(isEmptyUserInfo && isEmptyContacts && isEmptyFamily && isEmptyInterests && isEmptyNotifications)
            profile.isEmptyProfile = true;

        if(profile.userProfile.userInfo){
            if (profile.userProfile.userInfo.gender == 1){
                profile.userProfile.userInfo.genderMeta = "Женский";
            }else if(profile.userProfile.userInfo.gender == 2){
                profile.userProfile.userInfo.genderMeta = "Мужской";
            }else{
                profile.userProfile.userInfo.genderMeta = "";
            }
        }

        $rootScope.base.avatarBuffer = profile.userProfile.userInfo.avatar;

        if(profile.userProfile.family && profile.userProfile.family.relations == 0){

            if(profile.userProfile.userInfo.gender == 1){
                profile.userProfile.family.relationsMeta = "Замужем";
            }else if(profile.userProfile.userInfo.gender == 2){
                profile.userProfile.family.relationsMeta = "Женат";
            }

        }else if(profile.userProfile.family && profile.userProfile.family.relations == 1){
            if(profile.userProfile.userInfo.gender == 1){
                profile.userProfile.family.relationsMeta = "Не замужем";
            }else if(profile.userProfile.userInfo.gender == 2){
                profile.userProfile.family.relationsMeta = "Холост";
            }
        }

        if(profile.userProfile.family && profile.userProfile.family.pets && profile.userProfile.family.pets.length != 0){
           var petsLength = profile.userProfile.family.pets.length;
            var pets = profile.userProfile.family.pets;
            for(var i = 0; i < petsLength; i++){
                switch(profile.userProfile.family.pets[i].type){
                    case 0:
                        profile.userProfile.family.pets[i].typeMeta = "Кошка";
                        break;
                    case 1:
                        profile.userProfile.family.pets[i].typeMeta = "Собака";
                        break;
                    case 2:
                        profile.userProfile.family.pets[i].typeMeta = "Птичка";
                        break;
                }

            }
        }

        //$rootScope.chageIndex = 0;

        angular.element($('.profile')).css({'min-height': $(window).height()-135});

        $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope','$stateParams', profileCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\rubrics.js":[function(require,module,exports){

var rubricsCtrl = function($rootScope,$stateParams) {
        /*
        * при работе с обсждениями нужно учесть следующее:
        * есть три типа сообщения :
        * 1) топик. На странице обсуждения может быть только один. Его дети
        * это сообщения первого уровня. Его дети всегда открыты, поэтому у него
        * нет контрола плюс-минус. Страница топика загружается в методе showFullTalk
        * через topicId который передается в функцию при вызове
        * Хранится в объекте talk.fullTalkTopic.
        *
        * 2) Сообщение первого уровня. Берутся через getFirstLevelMessages. Изначально
        * все потомки скрыты и не подгружены. При первом нажатии на контрол плюс-минус
        * подгружаются, потом просто переключается show-hide. ParentId у таких сообщений
        * равен 0. Внимание! : ParentId передается в getFirstLevelMessages через lastLoadedId.        *
        * У каждого сообщения первого уровня есть свой массив сообщений 3го типа.
        * Хранятся в массиве talk.fullTalkFirstMessages.
        *
        * 3) Просто сообщение. Береутся через getMessages(). Через параметр lastLoadedId передается
        * id последнего загруженного простого сообщения, для подгрузки. У каждого простого сообщения
        * есть offset, который задается на БЕ. offset'ы определяют вложенность сообщений и за счет них
        * создается древовидная структура форума.
        * Хранятся в двумерном массиве talk.fullTalkMessages[firstMessage.id][]
        *
        *
        * Есть следующие типы контролов, реализованные для разных типов сообщений:
        * 1) showAnswerInput : реализует клик на "Ответить", показвает поле для отправки
        * сообщения.
        * 2) addMessage: клик на "Отправить", создает и отображает новое сообщение
        * 3) toggleTree: контрол "плюс-минус", скрвает-показвает внутренние сообщения этого
        * сообщения.
        * */
            $rootScope.setTab(2);
            var talk = this;

            talk.attachId = "00";
            initFancyBox($('.talks'));

            $rootScope.base.showAllGroups();
            $rootScope.base.isFooterBottom = false;

            $rootScope.base.createTopicIsHide = true;

            talk.isTalksLoaded = false;
            talk.groups = userClientGroups;

            talk.message = {};
            talk.message.content = talk.message.default = TEXT_DEFAULT_3;
            talk.subject = TEXT_DEFAULT_4;

            $rootScope.base.bufferSelectedGroup = talk.selectedGroup =
            $rootScope.currentGroup = userClientGroups[3];

            $rootScope.base.initStartParamsForCreateTopic(talk);

            talk.isTalk = true;

            talk.fullTalkTopic = {};
            talk.fullTalkTopic.answerInputIsShow = false;
            talk.fullTalkMessages = [];
            talk.fullTalkFirstMessages = [];

            talk.commentText = TEXT_DEFAULT_2;
            var fullTalkFirstMessagesLength,
                talkId;

            /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
            $rootScope.importantIsLoadedFromTop = false;*/

            talk.topics = messageClient.getTopics(talk.selectedGroup.id, $stateParams.rubricId, 0, 0, 1000).topics;

            initTalks();

            if (!talk.topics) talk.topics = [];

            $rootScope.selectGroupInDropdown_talks = function(groupId){
                talk.selectedGroup = $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
            };

        function initTalks(){
            var topicLength;
            talk.topics ? topicLength = talk.topics.length : topicLength = 0;

            for(var i = 0; i < topicLength;i++){
                talk.topics[i].lastUpdateEdit = getTiming(talk.topics[i].lastUpdate);
                talk.topics[i].label = getLabel(talk.groups,talk.topics[i].groupType);
                talk.topics[i].tagColor = getTagColor(talk.topics[i].label);

                if(talk.topics[i].message.important == 1){
                    talk.topics[i].message.importantText = 'Снять метку "Важное"';
                }else{
                    talk.topics[i].message.importantText = 'Пометить как "Важное"';
                }
            }
        }

        $rootScope.talksChangeGroup = function(groupId){

            talk.topics = messageClient.getTopics(groupId,0,0,0,1000).topics;

            if(talk.topics) {
                initTalks();
            }

        };

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$stateParams', rubricsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\rubricsSingle.js":[function(require,module,exports){

var rubricsSingleCtrl = function($rootScope,$stateParams){

        $rootScope.base.isFooterBottom = false;

        var talk = this,
            fullTalkMessagesLength,
            talkId = $stateParams.talkId;

        $rootScope.base.lastLoadedId = 0;
        $rootScope.base.isEarliestMessages = false;
        $rootScope.base.endOfLoaded = false;

        talk.attachId = "00";
        talk.selectedGroup = $rootScope.currentGroup;

        /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

        talk.topics = messageClient.getTopics(talk.selectedGroup.id, 0, 0, 0, 1000).topics;
        talk.fullTalkTopic = {};
        talk.fullTalkMessages = {};
        talk.fullTalkFirstMessages = [];
        talk.groups = userClientGroups;

        talk.isTalk = true;

        $rootScope.base.initStartParamsForCreateMessage(talk);

        var showFullTalk = function(talk,talkOutsideId){

            initFancyBox($('.talks-single'));
            var topicLength;
            talk.topics ? topicLength = talk.topics.length : topicLength = 0;

            var talkId = talkOutsideId;
            for(var i = 0; i < topicLength; i++){
                if(talkId == talk.topics[i].id){
                    talk.fullTalkTopic = talk.topics[i];

                    $rootScope.base.initStartParamsForCreateTopic(talk.fullTalkTopic);

                    talk.fullTalkTopic.isTalk = true;
                    talk.fullTalkTopic.message.createdEdit = getTiming(talk.fullTalkTopic.message.created);
                    talk.fullTalkTopic.label = getLabel(talk.groups,talk.fullTalkTopic.groupType);
                    talk.fullTalkTopic.tagColor = getTagColor(talk.fullTalkTopic.label);

                    if(talk.fullTalkTopic.message.important == 1){
                        talk.fullTalkTopic.message.importantText = 'Снять метку "Важное"';
                    }else{
                        talk.fullTalkTopic.message.importantText = 'Пометить как "Важное"';
                    }
                }
            }

            if (talk.fullTalkTopic.poll != null) {
                setPollEditNames(talk.fullTalkTopic.poll);
                talk.fullTalkTopic.metaType = "poll";
            } else {
                talk.fullTalkTopic.metaType = "message";
            }

            talk.fullTalkFirstMessages = messageClient.getFirstLevelMessages(talkId, talk.selectedGroup.id, 1, $rootScope.base.lastLoadedId, 0, 10).messages;

            $rootScope.base.lastLoadedId = $rootScope.base.initFirstMessages(talk.fullTalkFirstMessages);

            $rootScope.base.isTalkTitles = false;
            $rootScope.base.mainContentTopIsHide = true;
            $rootScope.base.createTopicIsHide = true;

        };

        showFullTalk(talk,talkId);

        var initFlagsTopic = [];
        talk.showTopicAnswerInput = function(event,fullTalkTopic){
            event.preventDefault();

            talk.answerShow = true;

            if(!initFlagsTopic[fullTalkTopic.id]) {
                initFlagsTopic[fullTalkTopic.id] = true;
            }

            talk.fullTalkTopic.answerInputIsShow ?
                talk.fullTalkTopic.answerInputIsShow = false :
                talk.fullTalkTopic.answerInputIsShow = true ;
        };

        var initFlagsMessage = [];
        talk.showMessageAnswerInput = function(event,fullTalkTopic,firstMessage,message){
            event.preventDefault();
            var attachId;

            if(!message){
                // если это сообщение первого уровня
                firstMessage.isTalk = true;
                //firstMessage.isEdit = false;

                attachId = fullTalkTopic.id+'-'+firstMessage.id;

                if(!talk.fullTalkFirstMessages) talk.fullTalkFirstMessages = messageClient.getFirstLevelMessages(talkId,talk.selectedGroup.id,1,0,0,1000).messages;
                var fullTalkFirstMessagesLength = talk.fullTalkFirstMessages.length;

                $rootScope.base.initStartParamsForCreateMessage(firstMessage);

                firstMessage.answerInputIsShow ?
                    firstMessage.answerInputIsShow = false :
                    firstMessage.answerInputIsShow = true;


            }else{
                // если простое сообщение
                message.isTalk = true;
                //message.isEdit = false;

                attachId = fullTalkTopic.id+'-'+message.id;

                if(!talk.fullTalkMessages[firstMessage.id]) talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
                var  fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length;

                $rootScope.base.initStartParamsForCreateMessage(message);
                message.answerInputIsShow ?
                    message.answerInputIsShow = false :
                    message.answerInputIsShow = true;

            }

            if(!initFlagsMessage[attachId]) {
                //initAttachImage($('#attachImage-' + attachId), $('#attach-area-' + attachId));
                //initAttachDoc($('#attachDoc-' + attachId), $('#attach-doc-area-' + attachId));

                initFlagsMessage[attachId] = true;
            }
        };

        talk.toggleTreeFirstMessage = function(event,firstMessage){
            event.preventDefault();

            firstMessage.isTreeOpen ?
                firstMessage.isTreeOpen = false :
                firstMessage.isTreeOpen = true ;


            // --------

            talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            talk.fullTalkMessages[firstMessage.id] ?
                fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length:
                fullTalkMessagesLength = 0;
            if(talk.fullTalkMessages[firstMessage.id] === null) talk.fullTalkMessages[firstMessage.id] = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                talk.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                talk.fullTalkMessages[firstMessage.id][i].isTreeOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].isOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].isParentOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].createdEdit = getTiming(talk.fullTalkMessages[firstMessage.id][i].created);
                talk.fullTalkMessages[firstMessage.id][i].commentText = TEXT_DEFAULT_2;

            }

        };

        talk.toggleTree = function(event,message,firstMessage){
            event.preventDefault();

            if(!talk.fullTalkMessages[firstMessage.id]) talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            var fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length;

            message.isTreeOpen ?
                message.isTreeOpen = false :
                message.isTreeOpen = true ;

            var afterCurrentIndex = false,
                nextMessageOnCurrentLevel = false,
                loopMessageOffset,
                parentOpenStatus,
                areAllMyParentsTreeOpen = [],
                checkAreAllMyParentsTreeOpen = true,
                beginOffset = message.offset,
                parentOpenStatusArray = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                loopMessageOffset = talk.fullTalkMessages[firstMessage.id][i].offset;

                if(afterCurrentIndex && !nextMessageOnCurrentLevel
                    && message.offset < loopMessageOffset){

                    areAllMyParentsTreeOpen[loopMessageOffset] = true;

                    if(loopMessageOffset - message.offset == 1){
                        //если это непосредственный потомок

                        talk.fullTalkMessages[firstMessage.id][i].isOpen ?
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = false :
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = true ;

                        parentOpenStatusArray[loopMessageOffset] = true;
                        parentOpenStatus = talk.fullTalkMessages[firstMessage.id][i].isOpen;

                        if (!talk.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }
                    }else{
                        // если это птомки потомка

                        checkAreAllMyParentsTreeOpen = true;
                        for(var j = beginOffset; j < loopMessageOffset; j++){
                            // проверяем нет ли у кого в предках isTreeOpen = false
                            if(areAllMyParentsTreeOpen[j] == false){
                                checkAreAllMyParentsTreeOpen = false;
                            }
                        }
                        parentOpenStatus && checkAreAllMyParentsTreeOpen ?
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = true :
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = false ;

                        if (!talk.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            // если у кого-то из предков не открыто дерево
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }

                        parentOpenStatusArray[loopMessageOffset] = true;
                    }
                }

                if (afterCurrentIndex && loopMessageOffset == message.offset){
                    nextMessageOnCurrentLevel = true;
                    break;
                }
                if(message.id == talk.fullTalkMessages[firstMessage.id][i].id){
                    afterCurrentIndex = true;
                }
            }
        };

        var buff,
            lastLoadedIdFF;
        talk.addMoreItems = function(){
            var temp = messageClient.getFirstLevelMessages(talkId,talk.selectedGroup.id,1,$rootScope.base.lastLoadedId,0,10),
                buff = temp.messages;
            if(buff) {
                var buffLength = buff.length;

                if(buffLength != 0) {

                    $rootScope.base.lastLoadedId = buff[buffLength - 1].id;

                    if(lastLoadedIdFF != $rootScope.base.lastLoadedId) {
                        $rootScope.base.initFirstMessages(buff);
                        talk.fullTalkFirstMessages = talk.fullTalkFirstMessages.concat(buff);
                    }

                    lastLoadedIdFF = $rootScope.base.lastLoadedId;

                }
            }else{
                $rootScope.base.endOfLoaded = true;
            }

        };

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$stateParams', rubricsSingleCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\setInfo.js":[function(require,module,exports){

var setInfoCtrl = function($state, $rootScope) {
        var setInfo = this;

        setInfo.isSaveResult = false;
        setInfo.isError = false;

        setInfo.save = function(){
            var staircase, floor,flat;

            (!setInfo.staircase) ? staircase = 0 : staircase = setInfo.staircase;
            (!setInfo.floor) ? floor = 0 : floor = setInfo.floor;
            (!setInfo.flat) ? flat = 0 : flat = setInfo.flat;

            setInfo.isSaveResult = true;
            //try {
                userClient.updateUserAddress(staircase, floor, flat);
                setInfo.info = "Сохранено";
                window.location.replace('/');
                //$rootScope.$apply();
            /*}catch(e){
                setInfo.info = "Произошла ошибка";
                setInfo.isError = true;
            }*/
        };

    };

module.exports = [ '$state','$rootScope', setInfoCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\settings.js":[function(require,module,exports){

var settingsCtrl= function($rootScope,$scope) {
        $rootScope.isTopSearchShow = false;
        $rootScope.leftbar.tab = 0;

        resetPages($rootScope.base);
        $rootScope.base.settingsIsActive = true;
        $rootScope.base.isFooterBottom = true;

        resetAceNavBtns($rootScope.navbar);
        $rootScope.base.mainContentTopIsHide = true;

        $rootScope.base.settingsLoadStatus = "isLoaded";

        var settings = this,
            userProfileMeta = userClient.getUserProfile(),
            userContatcsMeta = userProfileMeta.contacts,
            userInfoMeta = userProfileMeta.userInfo,
            userPrivacyMeta = userProfileMeta.privacy,
            userNotificationsMeta = userProfileMeta.notifications,
            userFamilyMeta = userProfileMeta.family,
            userInterestsMeta = userProfileMeta.interests;

        if(userFamilyMeta === null){
            userFamilyMeta = new com.vmesteonline.be.thrift.UserFamily();
        }

        settings.userContacts = clone(userContatcsMeta);
        settings.userInfo = clone(userInfoMeta);
        settings.userPrivacy = clone(userPrivacyMeta);
        settings.userNotifications = clone(userNotificationsMeta);
        if(!settings.userNotifications){
            settings.userNotifications = new com.vmesteonline.be.thrift.Notifications();
            settings.userNotifications.freq = 4;
        }

        settings.family = clone(userFamilyMeta);
        settings.interests = clone(userInterestsMeta);

        if (settings.userInfo.gender == 1) {
            settings.married = "Замужем";
            settings.notMarried = "Не замужем";
        }else if(settings.userInfo.gender == 2){
            settings.married = "Женат";
            settings.notMarried = "Не женат";
        }else{
            settings.married = "В браке";
            settings.notMarried = "Не состою в браке";
        }

        settings.years= [];
        var ind = 0;
        for(var i = 2014; i > 1940; i--){
            settings.years[ind++] = i;
        }

        settings.userInfo.birthday ?
        settings.userInfo.birthdayMeta = new Date(settings.userInfo.birthday*1000) :
        settings.userInfo.birthdayMeta = "";

        if(settings.userInfo.birthdayMeta){
            var month = settings.userInfo.birthdayMeta.getMonth()+1+"";
            if(month.length == 1) month = "0"+month;

            var day = ""+settings.userInfo.birthdayMeta.getDate();
            if(day.length == 1) day = "0"+day;

            var year = settings.userInfo.birthdayMeta.getFullYear();

            settings.userInfo.birthdayMeta = day+"."+month+"."+year;
        }

        if(settings.family.childs === null || settings.family.childs.length == 0){
            settings.family.childs = [];
            settings.family.childs[0] = new com.vmesteonline.be.thrift.Children();
            settings.family.childs[0].name = "";
            var nowYear = new Date();
            nowYear = nowYear.getFullYear();
            //settings.family.childs[0].birthday = Date.parse('01.15.'+nowYear);
            settings.family.childs[0].birthday = null;
            settings.family.childs[0].isNotRemove = true;
        }
        var childsLength = settings.family.childs.length;
        for(var i = 0; i < childsLength; i++){
            if(settings.family.childs[i].birthday) {

                var birthDate = new Date(settings.family.childs[i].birthday*1000);
                    settings.family.childs[i].month = ""+birthDate.getMonth();

                if(settings.family.childs[i].month.length == 1)
                    settings.family.childs[i].month = "0"+settings.family.childs[i].month;

                    settings.family.childs[i].year = birthDate.getFullYear();
            }

        }

        if(settings.family.pets === null || settings.family.pets.length == 0){
            settings.family.pets = [];
            settings.family.pets[0] = new com.vmesteonline.be.thrift.Pet();
            settings.family.pets[0].name = "";
            settings.family.pets[0].type = "0";
            settings.family.pets[0].breed = "";
            settings.family.pets[0].isNotRemove = true;
        }

        settings.oldPassw = "";
        settings.newPassw = "";

        settings.canSave = function(num){
            switch(num){
                case 1:
                    return $scope.formUserInfo.$valid;
                    break;
                case 2:
                    return $scope.formPrivate.$valid;
                    break;
                case 3:
                    return $scope.formAlerts.$valid;
                    break;
                case 4:
                    return $scope.formContacts.$valid;
                    break;
                case 5:
                    return $scope.formFamily.$valid;
                    break;
                case 6:
                    return $scope.formInterests.$valid;
                    break;
            }

        };

        settings.profileInfo = "Сохранено";

        settings.isProfileError = false;
        settings.isProfileResult = false;
        settings.updateUserInfo = function(){
            var temp = new com.vmesteonline.be.thrift.UserInfo();

            settings.userInfo.birthdayMeta ?
                temp.birthday = Date.parse(getCorrectDate(settings.userInfo.birthdayMeta))/1000 :
                temp.birthday = 0;

            temp.gender = settings.userInfo.gender;
            temp.firstName = $rootScope.base.me.firstName = settings.userInfo.firstName;
            temp.lastName = $rootScope.base.me.lastName = settings.userInfo.lastName;

            userClient.updateUserInfo(temp);
            settings.isProfileResult = true;
            settings.isProfileError = false;
            settings.profileInfo = "Сохранено";

        };

        settings.isPasswError = false;
        settings.isPasswResult = false;
        settings.updatePassword = function(){
            if (settings.newPassw.length < 3){
                settings.isPasswResult = true;
                settings.isPasswError = true;
                settings.passwInfo = "Вы указали слишком короткий пароль";
            }else{
                settings.isPasswResult = true;
                try {
                    userClient.changePassword(settings.oldPassw, settings.newPassw);
                    settings.isPasswError = false;
                    settings.passwInfo = "Сохранено";
                }catch(e){
                    settings.isPasswError = true;
                    settings.passwInfo = "Вы указали не верный старый пароль";
                }
            }
        };


        settings.isPrivacyError = false;
        settings.isPrivacyResult = false;
        settings.updatePrivacy = function(){
            userClient.updatePrivacy(settings.userPrivacy);

            settings.isPrivacyResult = true;
            settings.isPrivacyError = false;
        };


        settings.isContactsError = false;
        settings.isContactsResult = false;
        settings.updateContacts = function(){
            var temp = new com.vmesteonline.be.thrift.UserContacts();
            temp.email = settings.userContacts.email;
            temp.mobilePhone = settings.userContacts.mobilePhone;
            userClient.updateContacts(temp);

            settings.isContactsError = false;
            settings.isContactsResult = true;
        };

        settings.isAlertsError = false;
        settings.isAlertsResult = false;
        settings.updateNotifications = function(){
            if(settings.userNotifications && (settings.userNotifications.email || settings.userNotifications.freq) ){
                var temp = new com.vmesteonline.be.thrift.Notifications();
                temp.email = settings.userNotifications.email;
                temp.freq = settings.userNotifications.freq;

                userClient.updateNotifications(temp);

                settings.isAlertsError = false;
                settings.isAlertsResult = true;
            }
        };

        settings.isFamilyError = false;
        settings.isFamilyResult = false;
        settings.updateFamily = function(){
            var temp = new com.vmesteonline.be.thrift.UserFamily();
            temp.relations = settings.family.relations;
            temp.childs = settings.family.childs;
            //temp.childs = [];
            //temp.childs[0] = settings.firstChild;

            temp.pets = settings.family.pets;

            var childsLength = settings.family.childs.length;
            for(var i = 0; i < childsLength; i++){
                if(settings.family.childs[i].name && settings.family.childs[i].name != ""){ <!--  && settings.family.childs[i].month && settings.family.childs[i].year -->

                    var tempMonth = parseInt(settings.family.childs[i].month)+1+"";

                    if(tempMonth.length < 2) tempMonth = "0" + tempMonth;

                    if(settings.family.childs[i].year && settings.family.childs[i].year != '1911' && settings.family.childs[i].month) {
                        temp.childs[i].birthday = Date.parse(getCorrectDate("15."+tempMonth +"." + settings.family.childs[i].year)) / 1000;
                        //alert(tempMonth+" "+getCorrectDate("15."+tempMonth +"." + settings.family.childs[i].year));
                    }else{
                        temp.childs[i].birthday = null;
                    }
                }
            }
            var petsLength = settings.family.pets.length;
            for(var i = 0; i < petsLength; i++){
                if(temp.pets[i] && !temp.pets[i].name){
                    //temp.pets.splice(i,1);
                }
            }

            userClient.updateFamily(temp);

            settings.isFamilyError = false;
            settings.isFamilyResult = true;
        };

        settings.isInterestsError = false;
        settings.isInterestsResult = false;
        settings.updateInterests = function(){
            var temp = new com.vmesteonline.be.thrift.UserInterests();
            temp.job = settings.interests.job;
            temp.userInterests = settings.interests.userInterests;
            userClient.updateInterests(temp);

            settings.isInterestsError = false;
            settings.isInterestsResult = true;
        };

        settings.childAdd = function(event){
            event.preventDefault();

            var newChild = new com.vmesteonline.be.thrift.Children();
            newChild.name = " ";
            var nowYear = new Date();
            nowYear = nowYear.getFullYear();
            newChild.birthday = Date.parse(getCorrectDate('15.01.'+nowYear));

            var birthDate = new Date(newChild.birthday);
            //newChild.month = ""+birthDate.getMonth();
            newChild.month = "";

            if(newChild.length == 1)
                newChild.month = "0"+newChild.month;

            //newChild.year = birthDate.getFullYear();
            newChild.year = "";


            if(settings.family == null){
                settings.family = new com.vmesteonline.be.thrift.UserFamily();
            }
            if(settings.family.childs == null){
                settings.family.childs= [];
            }

            settings.family.childs.length == 0 ?
            settings.family.childs[0] = newChild :
            settings.family.childs.push(newChild);

        };
        settings.removeChild = function(childName){
            var childsLength = settings.family.childs.length;
            for(var i = 0; i < childsLength; i++){
                if(settings.family.childs[i].name == childName) {
                    settings.family.childs.splice(i,1);
                }

            }
        };
        settings.petAdd = function(event){
            event.preventDefault();

            var newPet = new com.vmesteonline.be.thrift.Pet();
            newPet.name = " ";
            newPet.type = "0";

            if(settings.family == null){
                settings.family = new com.vmesteonline.be.thrift.UserFamily();
            }
            if(settings.family.pets == null){
                settings.family.pets= [];
            }

            settings.family.pets.length == 0 ?
                settings.family.pets[0] = newPet :
                settings.family.pets.push(newPet);
        };
        settings.removePet = function(petName){
            var petsLength = settings.family.pets.length;
            for(var i = 0; i < petsLength; i++){
                if(settings.family.pets[i].name == petName) {
                    settings.family.pets.splice(i,1);
                }

            }
        };

        settings.passwChange = false;
        settings.changePassw = function(){
            settings.passwChange = true;
        };

        /*(settings.userInfo.birthday != 0) ?
        settings.birthday = settings.userInfo.birthday :
        settings.birthday = "";*/

        $('#settings-input-3').datepicker({changeMonth:true, changeYear:true,dateFormat: "dd.mm.yy",yearRange:'c-100:+c'});
        $.datepicker.setDefaults($.datepicker.regional['ru']);

        angular.element($('.settings')).css({'min-height': $(window).height()-125});

        $('.ng-cloak').removeClass('ng-cloak');

        var href = document.location.href;
        var hrefInd = href.indexOf("/",9);
        $('input[name="redirect_uri"]').val(href.substring(0,hrefInd)+"/oauth");

    };

module.exports = [ '$rootScope','$scope', settingsCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\talks.js":[function(require,module,exports){

var talksCtrl = function($rootScope) {
        /*
        * при работе с обсждениями нужно учесть следующее:
        * есть три типа сообщения :
        * 1) топик. На странице обсуждения может быть только один. Его дети
        * это сообщения первого уровня. Его дети всегда открыты, поэтому у него
        * нет контрола плюс-минус. Страница топика загружается в методе showFullTalk
        * через topicId который передается в функцию при вызове
        * Хранится в объекте talk.fullTalkTopic.
        *
        * 2) Сообщение первого уровня. Берутся через getFirstLevelMessages. Изначально
        * все потомки скрыты и не подгружены. При первом нажатии на контрол плюс-минус
        * подгружаются, потом просто переключается show-hide. ParentId у таких сообщений
        * равен 0. Внимание! : ParentId передается в getFirstLevelMessages через lastLoadedId.        *
        * У каждого сообщения первого уровня есть свой массив сообщений 3го типа.
        * Хранятся в массиве talk.fullTalkFirstMessages.
        *
        * 3) Просто сообщение. Береутся через getMessages(). Через параметр lastLoadedId передается
        * id последнего загруженного простого сообщения, для подгрузки. У каждого простого сообщения
        * есть offset, который задается на БЕ. offset'ы определяют вложенность сообщений и за счет них
        * создается древовидная структура форума.
        * Хранятся в двумерном массиве talk.fullTalkMessages[firstMessage.id][]
        *
        *
        * Есть следующие типы контролов, реализованные для разных типов сообщений:
        * 1) showAnswerInput : реализует клик на "Ответить", показвает поле для отправки
        * сообщения.
        * 2) addMessage: клик на "Отправить", создает и отображает новое сообщение
        * 3) toggleTree: контрол "плюс-минус", скрвает-показвает внутренние сообщения этого
        * сообщения.
        * */
            $rootScope.setTab(2);
            var talk = this;

            talk.attachId = "00";
            initFancyBox($('.talks'));

            $rootScope.base.showAllGroups();
            $rootScope.base.isFooterBottom = false;

            $rootScope.base.createTopicIsHide = true;

            talk.isTalksLoaded = false;
            talk.groups = userClientGroups;

            talk.message = {};
            talk.message.content = talk.message.default = TEXT_DEFAULT_3;
            talk.subject = TEXT_DEFAULT_4;

            $rootScope.base.bufferSelectedGroup = talk.selectedGroup =
            $rootScope.currentGroup = userClientGroups[3];

            $rootScope.currentRubric = null;

            $rootScope.base.initStartParamsForCreateTopic(talk);

            talk.isTalk = true;

            talk.fullTalkTopic = {};
            talk.fullTalkTopic.answerInputIsShow = false;
            talk.fullTalkMessages = [];
            talk.fullTalkFirstMessages = [];

            talk.commentText = TEXT_DEFAULT_2;
            var fullTalkFirstMessagesLength,
                talkId;

            /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
            $rootScope.importantIsLoadedFromTop = false;*/

            talk.topics = messageClient.getTopics(talk.selectedGroup.id, 0, 0, 0, 1000).topics;

            initTalks();

            if (!talk.topics) talk.topics = [];

            $rootScope.selectGroupInDropdown_talks = function(groupId){
                talk.selectedGroup = $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
            };

        function initTalks(){
            var topicLength;
            talk.topics ? topicLength = talk.topics.length : topicLength = 0;

            for(var i = 0; i < topicLength;i++){
                talk.topics[i].lastUpdateEdit = getTiming(talk.topics[i].lastUpdate);
                talk.topics[i].label = getLabel(talk.groups,talk.topics[i].groupType);
                talk.topics[i].tagColor = getTagColor(talk.topics[i].label);

                if(talk.topics[i].message.important == 1){
                    talk.topics[i].message.importantText = 'Снять метку "Важное"';
                }else{
                    talk.topics[i].message.importantText = 'Пометить как "Важное"';
                }
            }
        }

        $rootScope.talksChangeGroup = function(groupId){

            talk.topics = messageClient.getTopics(groupId,0,0,0,1000).topics;

            if(talk.topics) {
                initTalks();
            }

        };

    talk.selRubricName = "Общее";
    talk.selectRubricNew = function(rubric){
        if(rubric) {
            talk.selRubricName = rubric.visibleName;
        }else{
            talk.selRubricName = "Общее";
            $rootScope.currentRubric = {};
            $rootScope.currentRubric.id = 0;
        }

        var rubricsLength = userClientRubrics.length;

        for(var i = 0; i < rubricsLength; i++){
            if(rubric.id == userClientRubrics[i].id){
                $rootScope.currentRubric = userClientRubrics[i];
            }
        }

    };

        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope', talksCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\talksSingle.js":[function(require,module,exports){

var talksSingleCtrl = function($rootScope,$stateParams){

        $rootScope.base.isFooterBottom = false;

        var talk = this,
            fullTalkMessagesLength,
            talkId = $stateParams.talkId;

        $rootScope.base.lastLoadedId = 0;
        $rootScope.base.isEarliestMessages = false;
        $rootScope.base.endOfLoaded = false;

        talk.attachId = "00";
        talk.selectedGroup = getDefaultGroup($rootScope.base.groups);//$rootScope.currentGroup;

        /*if(!$rootScope.importantIsLoadedFromTop)
            $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

    //console.log('0',talk.selectedGroup,getDefaultGroup($rootScope.base.groups));
        talk.topics = messageClient.getTopics(talk.selectedGroup.id, 0, 0, 0, 1000).topics;
        talk.fullTalkTopic = {};
        talk.fullTalkMessages = {};
        talk.fullTalkFirstMessages = [];
        talk.groups = userClientGroups;

        talk.isTalk = true;

        $rootScope.base.initStartParamsForCreateMessage(talk);

        var showFullTalk = function(talk,talkOutsideId){

            initFancyBox($('.talks-single'));
            var topicLength;
            talk.topics ? topicLength = talk.topics.length : topicLength = 0;

            var talkId = talkOutsideId;
            for(var i = 0; i < topicLength; i++){
                if(talkId == talk.topics[i].id){
                    talk.fullTalkTopic = talk.topics[i];
                    talk.fullTalkTopic.rubric = getTopicRubric(talk.fullTalkTopic);
                    if(!talk.fullTalkTopic.rubric) talk.fullTalkTopic.selRubricName = "Общее";

                    talk.fullTalkTopic.selectRubricNew = function(rubric){
                        if(rubric) {
                            talk.fullTalkTopic.selRubricName = rubric.visibleName;
                        }else{
                            talk.fullTalkTopic.selRubricName = "Общее";
                            $rootScope.currentRubric = {};
                            $rootScope.currentRubric.id = 0;
                        }
                        var rubricsLength = userClientRubrics.length;

                        for(var i = 0; i < rubricsLength; i++){
                            if(rubric.id == userClientRubrics[i].id){
                                $rootScope.currentRubric = userClientRubrics[i];
                            }
                        }

                        console.log('talk-single',$rootScope.currentRubric);

                    };

                    $rootScope.base.initStartParamsForCreateTopic(talk.fullTalkTopic);

                    talk.fullTalkTopic.isTalk = true;
                    talk.fullTalkTopic.message.createdEdit = getTiming(talk.fullTalkTopic.message.created);
                    talk.fullTalkTopic.label = getLabel(talk.groups,talk.fullTalkTopic.groupType);
                    talk.fullTalkTopic.tagColor = getTagColor(talk.fullTalkTopic.label);

                    if(talk.fullTalkTopic.message.important == 1){
                        talk.fullTalkTopic.message.importantText = 'Снять метку "Важное"';
                    }else{
                        talk.fullTalkTopic.message.importantText = 'Пометить как "Важное"';
                    }
                }
            }

            if (talk.fullTalkTopic.poll != null) {
                setPollEditNames(talk.fullTalkTopic.poll);
                talk.fullTalkTopic.metaType = "poll";
            } else {
                talk.fullTalkTopic.metaType = "message";
            }

            talk.fullTalkFirstMessages = messageClient.getFirstLevelMessages(talkId, talk.selectedGroup.id, 1, $rootScope.base.lastLoadedId, 0, 10).messages;

            $rootScope.base.lastLoadedId = $rootScope.base.initFirstMessages(talk.fullTalkFirstMessages);

            $rootScope.base.isTalkTitles = false;
            $rootScope.base.mainContentTopIsHide = true;
            $rootScope.base.createTopicIsHide = true;

        };

        showFullTalk(talk,talkId);

        var initFlagsTopic = [];
        talk.showTopicAnswerInput = function(event,fullTalkTopic){
            event.preventDefault();

            talk.answerShow = true;

            if(!initFlagsTopic[fullTalkTopic.id]) {
                initFlagsTopic[fullTalkTopic.id] = true;
            }

            talk.fullTalkTopic.answerInputIsShow ?
                talk.fullTalkTopic.answerInputIsShow = false :
                talk.fullTalkTopic.answerInputIsShow = true ;
        };

        var initFlagsMessage = [];
        talk.showMessageAnswerInput = function(event,fullTalkTopic,firstMessage,message){
            event.preventDefault();
            var attachId;

            if(!message){
                // если это сообщение первого уровня
                firstMessage.isTalk = true;
                //firstMessage.isEdit = false;

                attachId = fullTalkTopic.id+'-'+firstMessage.id;

                if(!talk.fullTalkFirstMessages) talk.fullTalkFirstMessages = messageClient.getFirstLevelMessages(talkId,talk.selectedGroup.id,1,0,0,1000).messages;
                var fullTalkFirstMessagesLength = talk.fullTalkFirstMessages.length;

                $rootScope.base.initStartParamsForCreateMessage(firstMessage);

                firstMessage.answerInputIsShow ?
                    firstMessage.answerInputIsShow = false :
                    firstMessage.answerInputIsShow = true;


            }else{
                // если простое сообщение
                message.isTalk = true;
                //message.isEdit = false;

                attachId = fullTalkTopic.id+'-'+message.id;

                if(!talk.fullTalkMessages[firstMessage.id]) talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
                var  fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length;

                $rootScope.base.initStartParamsForCreateMessage(message);
                message.answerInputIsShow ?
                    message.answerInputIsShow = false :
                    message.answerInputIsShow = true;

            }

            if(!initFlagsMessage[attachId]) {
                //initAttachImage($('#attachImage-' + attachId), $('#attach-area-' + attachId));
                //initAttachDoc($('#attachDoc-' + attachId), $('#attach-doc-area-' + attachId));

                initFlagsMessage[attachId] = true;
            }
        };

        talk.toggleTreeFirstMessage = function(event,firstMessage){
            event.preventDefault();

            firstMessage.isTreeOpen ?
                firstMessage.isTreeOpen = false :
                firstMessage.isTreeOpen = true ;


            // --------

            talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            talk.fullTalkMessages[firstMessage.id] ?
                fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length:
                fullTalkMessagesLength = 0;
            if(talk.fullTalkMessages[firstMessage.id] === null) talk.fullTalkMessages[firstMessage.id] = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                talk.fullTalkMessages[firstMessage.id][i].answerInputIsShow = false;
                talk.fullTalkMessages[firstMessage.id][i].isTreeOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].isOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].isParentOpen = true;
                talk.fullTalkMessages[firstMessage.id][i].createdEdit = getTiming(talk.fullTalkMessages[firstMessage.id][i].created);
                talk.fullTalkMessages[firstMessage.id][i].commentText = TEXT_DEFAULT_2;

            }

        };

        talk.toggleTree = function(event,message,firstMessage){
            event.preventDefault();

            if(!talk.fullTalkMessages[firstMessage.id]) talk.fullTalkMessages[firstMessage.id] = messageClient.getMessages(talkId,talk.selectedGroup.id,1,firstMessage.id,0,1000).messages;
            var fullTalkMessagesLength = talk.fullTalkMessages[firstMessage.id].length;

            message.isTreeOpen ?
                message.isTreeOpen = false :
                message.isTreeOpen = true ;

            var afterCurrentIndex = false,
                nextMessageOnCurrentLevel = false,
                loopMessageOffset,
                parentOpenStatus,
                areAllMyParentsTreeOpen = [],
                checkAreAllMyParentsTreeOpen = true,
                beginOffset = message.offset,
                parentOpenStatusArray = [];

            for(var i = 0; i < fullTalkMessagesLength; i++){
                loopMessageOffset = talk.fullTalkMessages[firstMessage.id][i].offset;

                if(afterCurrentIndex && !nextMessageOnCurrentLevel
                    && message.offset < loopMessageOffset){

                    areAllMyParentsTreeOpen[loopMessageOffset] = true;

                    if(loopMessageOffset - message.offset == 1){
                        //если это непосредственный потомок

                        talk.fullTalkMessages[firstMessage.id][i].isOpen ?
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = false :
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = true ;

                        parentOpenStatusArray[loopMessageOffset] = true;
                        parentOpenStatus = talk.fullTalkMessages[firstMessage.id][i].isOpen;

                        if (!talk.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }
                    }else{
                        // если это птомки потомка

                        checkAreAllMyParentsTreeOpen = true;
                        for(var j = beginOffset; j < loopMessageOffset; j++){
                            // проверяем нет ли у кого в предках isTreeOpen = false
                            if(areAllMyParentsTreeOpen[j] == false){
                                checkAreAllMyParentsTreeOpen = false;
                            }
                        }
                        parentOpenStatus && checkAreAllMyParentsTreeOpen ?
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = true :
                            talk.fullTalkMessages[firstMessage.id][i].isOpen = false ;

                        if (!talk.fullTalkMessages[firstMessage.id][i].isTreeOpen){
                            // если у кого-то из предков не открыто дерево
                            areAllMyParentsTreeOpen[loopMessageOffset] = false;
                        }

                        parentOpenStatusArray[loopMessageOffset] = true;
                    }
                }

                if (afterCurrentIndex && loopMessageOffset == message.offset){
                    nextMessageOnCurrentLevel = true;
                    break;
                }
                if(message.id == talk.fullTalkMessages[firstMessage.id][i].id){
                    afterCurrentIndex = true;
                }
            }
        };

        var buff,
            lastLoadedIdFF;
        talk.addMoreItems = function(){
            var temp = messageClient.getFirstLevelMessages(talkId,talk.selectedGroup.id,1,$rootScope.base.lastLoadedId,0,10),
                buff = temp.messages;
            if(buff) {
                var buffLength = buff.length;

                if(buffLength != 0) {

                    $rootScope.base.lastLoadedId = buff[buffLength - 1].id;

                    if(lastLoadedIdFF != $rootScope.base.lastLoadedId) {
                        $rootScope.base.initFirstMessages(buff);
                        talk.fullTalkFirstMessages = talk.fullTalkFirstMessages.concat(buff);
                    }

                    lastLoadedIdFF = $rootScope.base.lastLoadedId;

                }
            }else{
                $rootScope.base.endOfLoaded = true;
            }

        };


        $('.ng-cloak').removeClass('ng-cloak');

    };

module.exports = [ '$rootScope','$stateParams', talksSingleCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\unconfirmed.js":[function(require,module,exports){

var unconfirmedCtrl =  function($rootScope) {
    $rootScope.base.isFooterBottom = true;
    $rootScope.base.mainContentTopIsHide = true;
    $rootScope.base.hideSidebar = true;

    var ctrl = this;
    ctrl.user = userClient.getShortUserInfo();
    ctrl.isErrorConfirm = false;

    ctrl.unconfLogin = function(){

        var isConfirm = userClient.confirmUserAddress(ctrl.code);
        console.log(isConfirm);
        if(isConfirm){
            $rootScope.base.me.addressConfirmed = true;
        }else{
            ctrl.isErrorConfirm = true;
        }

    };

    angular.element($('.unconfirm')).css({'min-height': $(window).height()-105});

    $('.ng-cloak').removeClass('ng-cloak');

};

module.exports = [ '$rootScope', unconfirmedCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\wall.js":[function(require,module,exports){

var wallCtrl = function($rootScope,$state) {

    var lenta = this;

    /**/

    lenta.isGroupsInMessShow = false;
    lenta.isRubricsInMessShow = false;
    lenta.isOpenMessageBar = false;

    lenta.showGroups = function(){
        lenta.isGroupsInMessShow ? lenta.isGroupsInMessShow = false : lenta.isGroupsInMessShow = true
    };

    lenta.selectGroupNew = function(group){
        lenta.isGroupsInMessShow = false;
        lenta.isCreateMessageGroupError = false;

        //lenta.selGroupName = group.visibleName;
        $rootScope.base.selectGroupInDropdown(group.id,lenta);
    };

    lenta.showRubrics = function(){
        lenta.isRubricsInMessShow ? lenta.isRubricsInMessShow = false : lenta.isRubricsInMessShow = true
    };

    lenta.selectRubricNew = function(rubric,ctrl){
        lenta.isRubricsInMessShow = false;
        lenta.isCreateMessageRubricError = false;

        if(rubric) {
            $rootScope.selRubricName = rubric.visibleName;
        }else{
            $rootScope.selRubricName = "Общее";
            $rootScope.currentRubric = {};
            $rootScope.currentRubric.id = 0;
        }
        //$rootScope.base.selectRubricInDropdown(rubric.id,lenta);
        var rubricsLength = userClientRubrics.length,
            selectedRubric;

        //if(!ctrl.isEdit) {
            for (var i = 0; i < rubricsLength; i++) {
                if (rubric.id == userClientRubrics[i].id) {
                    $rootScope.currentRubric = userClientRubrics[i];
                }
            }
        //}

        if(ctrl){
            rubric ? ctrl.selRubricName = rubric.visibleName : ctrl.selRubricName = "Общее";
        }

        //$rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);

        //ctrl.selectedGroup = $rootScope.base.bufferSelectedGroup;
    };

    //$rootScope.currentRubric.id = 0;

    lenta.closeInput = function(){
        lenta.isCreateMessageError = false;
        lenta.isCreateMessageGroupError = false;
        lenta.isCreateMessageRubricError = false;

        lenta.isOpenMessageBar = false;
        lenta.isGroupsInMessShow = false;
        lenta.isRubricsInMessShow = false;
        lenta.selectedGroup = lenta.selGroupName = $rootScope.selRubricName = $rootScope.currentRubric = null;
        lenta.message.content = TEXT_DEFAULT_1;
    };

    lenta.isCreateMessageError = true;
    lenta.createMessageErrorText = "Вы не указали группу";

    /**/

    $('.ng-cloak').removeClass('ng-cloak');
        $rootScope.setTab(1);
        $rootScope.base.showAllGroups();
        $rootScope.base.isFooterBottom = false;

        var lastLoadedId = 0,
            loadedLength = 10;

        var len = userClientGroups.length;
        lenta.isCreateNewsShow = [];
        for(var i = 0; i < len; i++){
            lenta.isCreateNewsShow[userClientGroups[i].id] = false;
        }
        //lenta.isCreateNewsShow[] = false;
        $rootScope.COMMENTS_DEFAULT_COUNT = 3;

        var ls_setInfo_groupId = localStorage.getItem('VO_setInfo_groupId'),
            currentGroup = userClientGroups[3];

        if(ls_setInfo_groupId){
            var groupsLength = userClientGroups.length;
            for (var i = 0; i < groupsLength; i++) {
                if (userClientGroups[i].id == ls_setInfo_groupId) {
                    currentGroup = userClientGroups[i];
                }
            }
            localStorage.removeItem('VO_setInfo_groupId');
        }

    lenta.selectedGroupInTop = $rootScope.currentGroup =
        $rootScope.base.bufferSelectedGroup = currentGroup;
    //console.log('lenta',$rootScope.currentGroup.id);

        /*if(!$rootScope.importantIsLoadedFromTop)
        $rootScope.importantTopics = messageClient.getImportantNews($rootScope.currentGroup.id);
        $rootScope.importantIsLoadedFromTop = false;*/

        lenta.attachId = "0";
        $rootScope.base.initStartParamsForCreateTopic(lenta);
        lenta.selectedGroup = null;

        lenta.message = {};

        lenta.message.content = lenta.message.default = TEXT_DEFAULT_1;

        $rootScope.wallChangeRubric = function(rubricId){

            lenta.wallItems = messageClient.getWallItems(currentGroup.id, rubricId,0, loadedLength);

            if(lenta.wallItems.length) {
                initWallItem(lenta.wallItems);

                lastLoadedId = lenta.wallItems[lenta.wallItems.length-1].topic.id;
                lastLoadedIdFF = null;
            }

        };

        if($state.current.rubricId) {
            $rootScope.wallChangeRubric($state.current.rubricId);
            $state.current.rubricId = null;
        }else{
            $rootScope.currentRubric = {};
        }

        lenta.wallItems = messageClient.getWallItems($rootScope.base.bufferSelectedGroup.id,$rootScope.currentRubric.id,0,loadedLength);

        var wallItemsLength;
        lenta.wallItems ? wallItemsLength = lenta.wallItems.length :
            wallItemsLength = 0;

        if(wallItemsLength != 0) lastLoadedId = lenta.wallItems[wallItemsLength-1].topic.id;

        initWallItem(lenta.wallItems);

        $rootScope.selectGroupInDropdown_lenta = function(groupId){
            //lenta.selectedGroup = $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
            $rootScope.base.bufferSelectedGroup = selectGroupInDropdown(groupId);
        };

        lenta.goToAnswerInput = function(event){
            event.preventDefault();
        };

        var initFlagsArray = [];
        lenta.showAnswerInput = function(event,wallItem,wallMessage){
            event.preventDefault();

            /*wallItem.answerShow ?
                wallItem.answerShow = false :*/
                wallItem.answerShow = true ;
                wallItem.isFocus = true ;

            if(wallMessage){
                var authorName;
                wallMessage.userInfo ?
                    authorName = wallMessage.userInfo.firstName :
                    authorName = wallMessage.authorName.split(' ')[0];
                wallItem.commentText = authorName+", ";
            }else{
                wallItem.commentText = "";
            }

            if(!initFlagsArray[wallItem.topic.id]) {
                // инифицализацмю AttachImage нужно делать только один раз для каждого сообщения
                initFlagsArray[wallItem.topic.id] = true;
            }

        };

        $rootScope.wallChangeGroup = function(groupId){

            lenta.wallItems = messageClient.getWallItems(groupId, $rootScope.currentRubric.id,0, loadedLength);

            if(lenta.wallItems.length) {
                initWallItem(lenta.wallItems);

                lastLoadedId = lenta.wallItems[lenta.wallItems.length-1].topic.id;
                lastLoadedIdFF = null;
            }

        };

        function initWallItem(wallItems){
            wallItemsLength = wallItems.length;
            for(var i = 0; i < wallItemsLength; i++){

                $rootScope.base.initStartParamsForCreateMessage(wallItems[i]);

                $rootScope.base.initStartParamsForCreateTopic(wallItems[i].topic);

                //  wallItems[i].topic.message.groupId сейчас не задана почему-то
                wallItems[i].label = getLabel($rootScope.base.groups,wallItems[i].topic.groupType);

                wallItems[i].tagColor = getTagColor(wallItems[i].label);

                wallItems[i].isOpen = false;

                if(wallItems[i].topic.message.important == 1){
                    wallItems[i].topic.message.importantText = 'Снять метку "Важное"';
                }else{
                    wallItems[i].topic.message.importantText = 'Пометить как "Важное"';
                }

                if(wallItems[i].topic.message.type == 1){

                    wallItems[i].topic.lastUpdateEdit = getTiming(wallItems[i].topic.lastUpdate);

                }else if(wallItems[i].topic.message.type == 5){

                    wallItems[i].topic.message.createdEdit = getTiming(wallItems[i].topic.message.created);
                    wallItems[i].topic.authorName = getAuthorName(wallItems[i].topic.userInfo);
                    wallItems[i].topic.metaType = "message";
                    wallItems[i].topic.rubric = getTopicRubric(wallItems[i].topic);

                    var mesLen;
                    wallItems[i].messages ?
                        mesLen = wallItems[i].messages.length:
                        mesLen = 0;

                    for(var j = 0; j < mesLen; j++){
                        wallItems[i].messages[j].createdEdit = getTiming(wallItems[i].messages[j].created);
                        wallItems[i].messages[j].authorName = getAuthorName(wallItems[i].messages[j].userInfo);
                        wallItems[i].messages[j].isEdit = false;

                        $rootScope.base.initStartParamsForCreateMessage(wallItems[i].messages[j]);
                    }

                    (mesLen >= $rootScope.COMMENTS_DEFAULT_COUNT) ?
                    wallItems[i].bufferMessages = wallItems[i].messages.slice(mesLen-$rootScope.COMMENTS_DEFAULT_COUNT):
                        wallItems[i].bufferMessages = wallItems[i].messages;

                    if(wallItems[i].topic.poll != null){
                        //значит это опрос
                        setPollEditNames(wallItems[i].topic.poll);

                        wallItems[i].topic.metaType = "poll";
                    }
                }
            }
        }

        lenta.toggleComments = function(event,wallItem){
            event.preventDefault();

            var mesLen = wallItem.messages.length;

            if(wallItem.isOpen){
                wallItem.isOpen = false;

                (mesLen >= $rootScope.COMMENTS_DEFAULT_COUNT) ?
                    wallItem.bufferMessages = wallItem.messages.slice(mesLen-$rootScope.COMMENTS_DEFAULT_COUNT):
                    wallItem.bufferMessages = wallItem.messages;

                //wallItem.bufferMessages = wallItem.messages.slice(mesLen-lenta.COMMENTS_DEFAULT_COUNT);
            }else{
                wallItem.isOpen = true;
                wallItem.bufferMessages = wallItem.messages;
            }
        };

        var lastLoadedIdFF;
        lenta.addMoreItems = function(){
            //lastLoadedIdFF = lastLoadedId;
            console.log('addMoreItems',lastLoadedId,loadedLength,$rootScope.base.bufferSelectedGroup.id,$rootScope.currentRubric);
            if(wallItemsLength == 10) {
                var buff = messageClient.getWallItems($rootScope.base.bufferSelectedGroup.id,$rootScope.currentRubric.id, lastLoadedId, loadedLength);
                if (buff) {

                    var buffLength = buff.length;

                    if (buffLength != 0) {

                        lastLoadedId = buff[buffLength - 1].topic.id;

                        if(lastLoadedIdFF != lastLoadedId) {
                            initWallItem(buff);
                            lenta.wallItems = lenta.wallItems.concat(buff);
                        }

                        lastLoadedIdFF = lastLoadedId;

                    }
                }
            }
        };


    $rootScope.initCreateTopic(lenta);

        initFancyBox($('.forum'));

    };

module.exports = [ '$rootScope','$state', wallCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\controllers\\wallSingle.js":[function(require,module,exports){

var wallSingleCtrl = function($rootScope, $stateParams){
        var wallSingle = this;

        $rootScope.base.mainContentTopIsHide = true;
        $rootScope.base.isFooterBottom = false;
        initFancyBox($('.lenta-item'));

        // временно, нужна функция getWallItem(topicId)
        $rootScope.currentGroup.id = getDefaultGroup($rootScope.base.groups).id;
        var wallItems = messageClient.getWallItems($rootScope.currentGroup.id,0,0,1000),
        wallItemsLength = wallItems.length;

    //console.log('0',wallItems,$stateParams.topicId);
        for(var i = 0; i < wallItemsLength; i++){
            if(wallItems[i].topic.id == $stateParams.topicId){
                wallSingle.wallItem = wallItems[i];
                wallSingle.wallItem.topic.isWallSingle = true;
            }
        }

    //console.log('11',wallSingle.wallItem,$rootScope.currentGroup.id);
        $rootScope.base.initStartParamsForCreateMessage(wallSingle.wallItem);
        $rootScope.base.initStartParamsForCreateTopic(wallSingle.wallItem.topic);

/*
        wallSingle.wallItem.commentText = TEXT_DEFAULT_2;
        wallSingle.wallItem.answerShow = false;
        wallSingle.wallItem.isFocus = false;
        wallSingle.wallItem.isCreateCommentError = false;
*/

        if(wallSingle.wallItem.topic.message.important == 1){
            wallSingle.wallItem.topic.message.importantText = 'Снять метку "Важное"';
        }else{
            wallSingle.wallItem.topic.message.importantText = 'Пометить как "Важное"';
        }

        //  lenta.wallItems[i].topic.message.groupId сейчас не задана почему-то
        wallSingle.wallItem.label = getLabel(userClientGroups,wallSingle.wallItem.topic.groupType);

        wallSingle.wallItem.tagColor = getTagColor(wallSingle.wallItem.label);

        if(wallSingle.wallItem.topic.message.type == 1){

            wallSingle.wallItem.topic.lastUpdateEdit = getTiming(wallSingle.wallItem.topic.lastUpdate);

        }else if(wallSingle.wallItem.topic.message.type == 5){

            wallSingle.wallItem.topic.message.createdEdit = getTiming(wallSingle.wallItem.topic.message.created);
            wallSingle.wallItem.topic.authorName = getAuthorName(wallSingle.wallItem.topic.userInfo);
            wallSingle.wallItem.topic.metaType = "message";

            var mesLen;
            wallSingle.wallItem.messages ?
                mesLen = wallSingle.wallItem.messages.length:
                mesLen = 0;

            for(var j = 0; j < mesLen; j++){
                wallSingle.wallItem.messages[j].createdEdit = getTiming(wallSingle.wallItem.messages[j].created);
                wallSingle.wallItem.messages[j].authorName = getAuthorName(wallSingle.wallItem.messages[j].userInfo);
                wallSingle.wallItem.messages[j].isEdit = false;

                $rootScope.base.initStartParamsForCreateMessage(wallSingle.wallItem.messages[j]);
            }


            if(wallSingle.wallItem.topic.poll != null){
                //значит это опрос
                setPollEditNames(wallSingle.wallItem.topic.poll);

                wallSingle.wallItem.topic.metaType = "poll";
            }
        }

        var initFlagsArray = [];
        wallSingle.showAnswerInput = function(event,wallItem,wallMessage){
            event.preventDefault();

            /*wallItem.answerShow ?
             wallItem.answerShow = false :*/
            wallItem.answerShow = true ;
            wallItem.isFocus = true ;

            if(wallMessage){
                var authorName;
                wallMessage.userInfo ?
                    authorName = wallMessage.userInfo.firstName :
                    authorName = wallMessage.authorName.split(' ')[0];
                wallItem.commentText = authorName+", ";
            }else{
                wallItem.commentText = "";
            }

            if(!initFlagsArray[wallItem.topic.id]) {
                // инифицализацмю AttachImage нужно делать только один раз для каждого сообщения
                //initAttachImage($('#attachImage-' + wallItem.topic.id), $('#attach-area-' + wallItem.topic.id));
                //initAttachDoc($('#attachDoc-' + wallItem.topic.id), $('#attach-doc-area-' + wallItem.topic.id));
                initFlagsArray[wallItem.topic.id] = true;
            }

        };

        $('.ng-cloak').removeClass('ng-cloak');
    };

module.exports = [ '$rootScope','$stateParams', wallSingleCtrl ];
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\directives.js":[function(require,module,exports){
'use strict';

/* Directives */

angular.module('forum.directives', []).
  directive('ngHasfocus', function() {
        return function(scope, element, attrs) {

            scope.$watch(attrs.ngHasfocus, function (nVal, oVal) {
                if (nVal) {
                    element[0].focus();
                    if(scope.wallItem) {
                        setCaretToPos(element[0], scope.wallItem.commentText.length);
                    }else if(scope.ctrl){
                        scope.base.textareaFocus(scope.ctrl.message.content,scope.ctrl.message.default,scope.ctrl,true);
                    }
                }
            });

            element.bind('blur', function() {
                if(scope.wallItem){
                    scope.wallItem.isFocus = false;
                    scope.$apply(attrs.ngHasfocus + " = false");
                }
                //scope.$apply(attrs.ngShow + " = false");
            });

            element.bind('keydown', function (e) {
                if (e.which == 13)
                    scope.$apply(attrs.ngHasfocus + " = false");
            });
        }
    })
    .directive('button',function(){
        return {
            restrict : 'E',
            compile: function(element,attributes){
                element.addClass('btn');
                if(attributes.type == "submit"){
                    element.addClass('btn-primary');
                }
                if(attributes.size){
                    element.addClass('btn-'+attributes.size);
                }

            }
        }

    })
    .directive('pagination',function(){
        /*
        * <pagination num-pages="task.count" current-page="task.current" on-select-page="selectPage()"></pagination>
        * */
        return{
            template : '<div class="pagination">'+
                '<ul>'+
                '<li ng-class="{disabled: noPrevious()}"><a href="#" ng-click="selectPrevious()">Previous</a></li>'+
                '<li ng-repeat="page in pages" ng-class="{active : isActive(page)}"><a href="#" ng-click="selectPage(page)">{{page}}</a></li>'+
                '<li ng-class="{disabled: noNext()}"><a href="#" ng-click="selectNext()">Next</a></li>'+
                '</ul>'+
                '</div>',
            restrict:"E",
            scope : {
                numPages: "=",
                currentPage: "=",
                onSelectPage: "&"
            },
            replace: true,
            link: function(scope){
                scope.$watch('numPages',function(value){
                    scope.pages = [];
                    for(var i = 0; i <= value; i++){
                        scope.pages.push(i);
                    }
                    if(scope.currentPage > value){
                        scope.selectPage(value);
                    }
                });

                scope.isActive = function(page){
                    return scope.currentPage === page;
                };

                scope.selectPage = function(page){
                    if(!scope.isActive(page)){
                        scope.currentPage = page;
                        scope.onSelectPage({page : page});
                    }
                };

                scope.selectNext = function(){
                    if (!scope.noNext()){
                        scope.selectPage(scope.currentPage + 1);
                    }
                };
            }
        }
    })
	.directive('ngThumb', ['$window', function($window) {
        var helper = {
            support: !!($window.FileReader && $window.CanvasRenderingContext2D),
            isFile: function(item) {
                return angular.isObject(item) && item instanceof $window.File;
            },
            isImage: function(file) {
                var type =  '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        };

        return {
            restrict: 'A',
            template: '<canvas/>',
            link: function(scope, element, attributes) {
                if (!helper.support) return;

                var params = scope.$eval(attributes.ngThumb);

                if (!helper.isFile(params.file)) return;
                if (!helper.isImage(params.file)) return;

                var canvas = element.find('canvas');
                var reader = new FileReader();

                reader.onload = onLoadFile;
                reader.readAsDataURL(params.file);

                function onLoadFile(event) {
                    var img = new Image();
                    img.onload = onLoadImage;
                    img.src = event.target.result;
                }

                function onLoadImage() {
                    var width = params.width || this.width / this.height * params.height;
                    var height = params.height || this.height / this.width * params.width;
                    canvas.attr({ width: width, height: height });
                    canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);

                    //scope.$parent.fileBase64 = canvas[0].toDataURL();
                    console.log('dir',width,height);

                    scope.$parent.setLoadImage('url('+canvas[0].toDataURL()+')');

                }
            }
        };
    }]);
;



// functions

function setSelectionRange(input, selectionStart, selectionEnd) {
    if (input.setSelectionRange) {
        input.focus();
        input.setSelectionRange(selectionStart, selectionEnd);
    }
    else if (input.createTextRange) {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveEnd('character', selectionEnd);
        range.moveStart('character', selectionStart);
        range.select();
    }
}

function setCaretToPos (input, pos) {
    setSelectionRange(input, pos, pos);
}
},{}],"C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\services.js":[function(require,module,exports){
'use strict';

/* Services */

// Demonstrate how to register services
// In this case it is a simple value service.
angular.module('forum.services', []).
    factory( '$counters', function() {
        return {
            getCounters : utilityClient.getCounters(),
            getTypeString : function (type){
                var typeString;

                switch (parseInt(type)){
                    case 0:
                        typeString = "Горячая вода";
                        break;
                    case 1:
                        typeString = "Холодная вода";
                        break;
                    case 2:
                        typeString = "Электричество(общий)";
                        break;
                    case 3:
                        typeString = "Электричество(ночь)";
                        break;
                    case 4:
                        typeString = "Электричество(день)";
                        break;
                    case 5:
                        typeString = "Газ";
                        break;
                    case 6:
                        typeString = "Другое";
                        break;
                }

                return typeString;
            }
        }
    });

},{}]},{},["C:\\workspace\\projects\\vonline-cs\\vonline-cs\\src\\main\\webapp\\static\\js\\app.js"])
//# sourceMappingURL=data:application/json;base64,
